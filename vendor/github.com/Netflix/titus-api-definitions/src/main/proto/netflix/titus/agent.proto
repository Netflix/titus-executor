syntax = "proto2";

package messages;

import "netflix/titus/titus_base.proto";

option java_package = "io.titanframework.messages";
option java_outer_classname = "TitanProtos";

option go_package = "titus";

message TaskStatusData {
    required int64 timestamp = 1;
}

message StateUpdate {
    optional string id = 1;
    optional string state = 2;
    optional string message = 3;
    optional string timestamp = 4;
}

message StateUpdates {
    repeated StateUpdate stateUpdate = 1;
}

message TaskInfo {

    optional string containerId = 1;

    optional string taskId = 2;

    optional string hostName = 3;

    optional string slaveId = 4;

    enum Status {
        RUNNING = 0;
        FAILED = 1;
        STOPPED = 2;
    }

    optional Status status = 5;

    optional string message = 6;

    message EnvironmentVariable {
        optional string name = 1;
        optional string value = 2;
    }

    repeated EnvironmentVariable environmentVariable = 7;
}

// Agent-only structure: stores container info for a currently running container
message RunningContainerInfo {
    // Container hostname (not necessarily the same as task ID)
    optional string hostName = 1;

    // Container task ID
    optional string taskId = 2;

    // Container launch timestamp, in Unix epoch seconds
    optional uint64 launchTimeUnixSec = 3;
}

message ContainerInfo {

    optional string imageName = 1;

    optional string command = 2; // deprecated. replaced by entrypointCmd.

    optional string containerPorts = 3 [deprecated = true];

    optional string version = 4 [default = "latest"];

    // deprecated: use userProvidedEnv and titusProvidedEnv instead
    message EnvironmentVariable {
        optional string name = 1;
        optional string value = 2;
    }

    // deprecated: use userProvidedEnv and titusProvidedEnv instead
    repeated EnvironmentVariable environmentVariable = 5 [deprecated = true];

    optional string jobId = 6;

    optional string logUploadRegexp = 7;

    optional uint32 maxHealthFailures = 8 [deprecated = true];

    repeated string healthCheckCmd = 9 [deprecated = true];

    enum SnapshotPolicy {
        NEVER = 0;
        ERROR_ONLY = 1;
        SUCCESS_ONLY = 2;
        ALWAYS = 3;
    }

    optional SnapshotPolicy snapshotPolicy = 10 [deprecated = true];

    // deprecated: Use process instead
    repeated string entrypointCmd = 11 [deprecated = true];

    // deprecated: Use process instead
    optional string entrypointStr = 13 [deprecated = true];

    optional string appName = 14;

    optional string jobGroupStack = 15;

    optional string jobGroupDetail = 16;

    optional string iamProfile = 17;

    message NetworkConfigInfo {
        // deprecated: use eniLabel instead
        required string eniLablel = 1 [deprecated = true];
        // this should be required, but it was added later (typo fix) and is optional for backwards compatibility
        optional string eniLabel = 5;
        repeated string securityGroups = 3;
        optional uint32 bandwidthLimitMbps = 4; // In Mbps
    }

    optional NetworkConfigInfo networkConfigInfo = 18;

    optional string jobGroupSequence = 19;

    // TODO(Sargun): Remove, and use the Mesos resource info instead
    optional uint32 numGpus = 20;

    message EfsConfigInfo {
        enum MountPerms {
            RW = 1;
            RO = 2;
            WO = 3;
        }
        required string efsFsId = 1;
        required string mountPoint = 2;
        optional MountPerms mntPerms = 3; // Defaults to first enum value
        optional string efsFsRelativeMntPoint = 4;
    }

    repeated EfsConfigInfo efsConfigInfo = 21;

    message Capabilities {

        // Taken from include/uapi/linux/capability.h
        // #define _LINUX_CAPABILITY_VERSION_3  0x20080522
        enum Capability {
            CHOWN = 0;
            DAC_OVERRIDE = 1;
            DAC_READ_SEARCH = 2;
            FOWNER = 3;
            FSETID = 4;
            KILL = 5;
            SETGID = 6;
            SETUID = 7;
            SETPCAP = 8;
            LINUX_IMMUTABLE = 9;
            NET_BIND_SERVICE = 10;
            NET_BROADCAST = 11;
            NET_ADMIN = 12;
            NET_RAW = 13;
            IPC_LOCK = 14;
            IPC_OWNER = 15;
            SYS_MODULE = 16;
            SYS_RAWIO = 17;
            SYS_CHROOT = 18;
            SYS_PTRACE = 19;
            SYS_PACCT = 20;
            SYS_ADMIN = 21;
            SYS_BOOT = 22;
            SYS_NICE = 23;
            SYS_RESOURCE = 24;
            SYS_TIME = 25;
            SYS_TTY_CONFIG = 26;
            MKNOD = 27;
            LEASE = 28;
            AUDIT_WRITE = 29;
            AUDIT_CONTROL = 30;
            SETFCAP = 31;
            MAC_OVERRIDE = 32;
            MAC_ADMIN = 33;
            SYSLOG = 34;
            WAKE_ALARM = 35;
            BLOCK_SUSPEND = 36;
            AUDIT_READ = 37;
        }

        repeated Capability add = 1;
        repeated Capability drop = 2;
    }

    optional Capabilities capabilities = 22;

    message MetatronCreds {
        required string appMetadata = 1; // An encoded description of the task's job metadata
        required string metadataSig = 2; // An encoded description of the metadata signature
    }

    optional MetatronCreds metatronCreds = 23;

    map<string, string> userProvidedEnv = 24;

    map<string, string> titusProvidedEnv = 25;

    // imageDigest has precedence over version
    optional string imageDigest = 26;

    optional bool allowNetworkBursting = 27;

    // Number of seconds to wait before killing the container
    // otherwise, it will use the dockerd default
    optional uint32 killWaitSeconds = 28;

    // If the engine that is using this agent supports the
    // killinitiated state, this should be set to true.
    // That way, when this container is killed, as well as
    // when it is launched, the launchguard will be ignored.
    optional bool ignoreLaunchGuard = 29;

    // Should we allow this container to run privileged enough
    // to run internal container runtimes?
    optional bool allowNestedContainers = 30;

    // The image name with the registry
    optional string fullyQualifiedImage = 31;

    // Should this container be allowed to excceed its CPU cap?
    optional bool allowCpuBursting = 32;

    // Should this be tagged sched_batch? Does it prefer bigger chunks
    // of CPU, less frequently?
    optional bool batch = 33;

    // The s3 log location used when uploading logs
    message S3LogLocation {
        required string bucket = 1; // The bucket to use for all uploads
        required string prefix = 2; // The prefix to use for all object keys. e.g. foo/bar
    }

    repeated S3LogLocation s3LogLocations = 34;

    // This influences the value of oom_score_adj for the PID 1 (tini) of the container
    //
    // The value of /proc/<pid>/oom_score_adj is added to the badness score before it
    // is used to determine which task to kill.  Acceptable values range from -1000
    // (OOM_SCORE_ADJ_MIN) to +1000 (OOM_SCORE_ADJ_MAX).  This allows userspace to
    // polarize the preference for oom killing either by always preferring a certain
    // task or completely disabling it.  The lowest possible value, -1000, is
    // equivalent to disabling oom killing entirely for that task since it will always
    // report a badness score of 0.
    //
    // If this value is unset, it will be set to +1000 as default.
    optional int32 oomScoreAdj = 35;

    // Borrowed from Kubernetes
    enum ImagePullPolicy {
        // Always pull the tag / digest
        Always = 0;
        // Only pull if we don't have an image with that given tag / digest (guarantees freshness, as it requires digest)
        IfNotPresent = 1;
        // Only pull if we don't have an image with that given tag
        IfLabelPresent = 2;
    }
    // If omitted, Always is the default
    optional ImagePullPolicy imagePullPolicy = 36;

    // passthrough attributes are an arbitrary set of key / value pairs that are passed from API to executor
    map<string, string> passthroughAttributes = 37;

    // entrypoint and command follow Docker semantics, and can be used to override what is baked into the Docker image:
    // https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact
    //
    // Both CMD and ENTRYPOINT baked into the image can be explicitly cleared with a single empty value (i.e.: `[""]`).
    message Process {
        // when set, will override ENTRYPOINT baked into the image, and cause CMD from the image to be ignored
        repeated string entrypoint = 1;
        // when set, will override CMD baked into the image
        repeated string command = 2;
    }
    // Process to be executed inside the container
    optional Process process = 38;

    // Used internally by the agent to store information about a running container
    optional RunningContainerInfo runState = 39;

    /// (Optional) Amount of shared memory to allocate (must be <= memoryMB)
    optional uint32 shmSizeMB = 40;

    /// (Optional) IP address allocation for the task
    optional com.netflix.titus.SignedAddressAllocation signedAddressAllocation = 41;

    /// Timestamp in epoch millis of when the task's job was Accepted
    optional uint64 jobAcceptedTimestampMs = 42;
}

// For the identity client to query the metadata server to confirm the
// currently running task's identity
message TaskIdentity {
    // (Required) Current state of the task
    optional messages.TaskInfo task = 1;

    // (Required) Container details, including:
    //  - app name, stack, detail
    //  - image name, digest, label
    //  - environment variables
    //  - command, entrypoint
    //  - metadata string and signature from caller
    optional messages.ContainerInfo container = 2;

    // (Required) Timestamp, in Unix epoch seconds, when request was made.
    optional uint64 unixTimestampSec = 3;

    // (Required) IP address of container
    optional string ipv4Address = 4;

    // (Optional) IPv6 address of container
    optional string ipv6Address = 5;
}

enum SignatureAlgorithm {
    SHA256withRSAandMGF1 = 0;
    SHA384withRSAandMGF1 = 1;
    SHA512withRSAandMGF1 = 2;
    SHA256withECDSA = 3;
    SHA384withECDSA = 4;
    SHA512withECDSA = 5;
}

message CertificateSignature {
    // (Required) Raw signature produced from signing input bytes using the
    // private key of the titus agent’s certificate.
    optional bytes signature = 1;

    // (Required) Signature algorithm used (e.g. SHA512withRSAandMGF1)
    optional SignatureAlgorithm algorithm = 2;

    // (Required) The agent’s public certificate in DER form, followed by its trust chain.
    repeated bytes certChain = 3;
}

// Version of CertificateSignature that encodes all byte[]s as human-readable strings
message CertificateStringSignature {
    // (Required) Base64 signature produced from signing input bytes using the
    // private key of the titus agent’s certificate.
    optional string signature = 1;

    // (Required) Signature algorithm used (e.g. SHA512withRSAandMGF1)
    optional SignatureAlgorithm algorithm = 2;

    // (Required) The agent’s public certificate in DER form, followed by its trust chain.
    repeated string certChain = 3;
}

message TaskIdentityDocument {
    // (Required) Serialized form of a TaskIdentity protobuf.
    optional bytes identity = 1;

    // (Required) Signature produced by signing identity bytes.
    optional CertificateSignature signature = 2;
}

// Version of TaskIdentityDocument that encodes all byte[]s as human-readable strings
message TaskIdentityStringDocument {
    // (Required) Task Identity
    optional TaskIdentity identity = 1;

    // (Required) Signature produced by signing identity bytes.
    optional CertificateStringSignature signature = 2;
}

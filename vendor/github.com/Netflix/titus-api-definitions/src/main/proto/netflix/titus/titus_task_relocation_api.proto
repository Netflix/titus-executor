syntax = "proto3";

// Titus task relocation API specification.
//

package com.netflix.titus;

import "netflix/titus/titus_base.proto";

option java_multiple_files = true;
option java_package = "com.netflix.titus.grpc.protogen";
option java_outer_classname = "TaskRelocationProto";

option go_package = "titus";

// ----------------------------------------------------------------------------
// Task relocation core data structures

message TaskRelocationPlan {
    /// (Required) Id of a task to relocate.
    string taskId = 1;

    /// (Required) Relocation reason code. Currently defined reason codes are:
    //  * TODO
    string reasonCode = 2;

    /// (Optional) Human readable text providing more details on why the relocation is needed.
    string reasonMessage = 3;

    /// (Optional) The earliest time (epoch in milliseconds) at which the relocation may happen. Until that time,
    //  an owner of the task may chose to do the relocation themselve.
    uint64 relocationTime = 4;

    /// (Optional) The time at which the decision about relocating the task was made.
    uint64 decisionTime = 5;
}

message TaskRelocationStatus {
    enum TaskRelocationState {
        /// Reason codes:
        //  * 'normal'
        Success = 0;

        /// Reason codes:
        //  * 'noDisruptionBudget'
        Failure = 1;
    }

    /// (Required) Task relocation execution state.
    TaskRelocationState state = 1;

    /// (Required) Execution result. Each task relocation state is associated with a different set of the status codes.
    string statusCode = 2;

    /// (Required) Execution result details.
    string statusMessage = 3;
}

/// An execution status for a single relocation plan.
message TaskRelocationExecution {
    /// (Required) Executed task relocation plan.
    TaskRelocationPlan taskRelocationPlan = 1;

    /// (Required) An ordered list of relocation attempts, starting from the oldest one to the latest.
    repeated TaskRelocationStatus relocationAttempts = 2;
}

// ----------------------------------------------------------------------------
// GRPC services

message RelocationTaskId {
    string id = 1;
}

message TaskRelocationPlans {
    repeated TaskRelocationPlan plans = 1;
}

message TaskRelocationExecutions {
    repeated TaskRelocationExecution results = 1;
}

message TaskRelocationQuery {
    /// (Required) Requested page number/size.
    Page page = 1;

    /// (Optional) Collection of fields and their values for a filter.
    //  Query criteria common for all operations:
    //  * jobIds - list of comma separated job ids
    //  * taskIds - list of comma separated task ids
    //  * applicationName - job application name
    //  * capacityGroup - job assigned capacity group
    map<string, string> filteringCriteria = 2;

    /// (Optional) If set, only field values explicitly given in this parameter will be returned
    repeated string fields = 3;
}

message RelocationEvent {
    message SnapshotEnd {
    }

    message TaskRelocationPlanUpdateEvent {
        TaskRelocationPlan plan = 1;
    }

    message TaskRelocationPlanRemoveEvent {
        string taskId = 1;
    }

    message TaskRelocationResultEvent {
        TaskRelocationExecution result = 1;
    }

    oneof Event {
        SnapshotEnd snapshotEnd = 1;
        TaskRelocationPlanUpdateEvent taskRelocationPlanUpdateEvent = 2;
        TaskRelocationPlanRemoveEvent taskRelocationPlanRemoveEvent = 3;
        TaskRelocationResultEvent taskRelocationResultEvent = 4;
    }
}

service TaskRelocationService {

    /// Get the current relocation plan.
    rpc GetCurrentTaskRelocationPlans (TaskRelocationQuery) returns (TaskRelocationPlans) {
    }

    /// Get task relocation results for all tasks, optionally filtered, which are currently being processed.
    rpc GetLatestTaskRelocationResults (TaskRelocationQuery) returns (TaskRelocationExecutions) {
    }

    /// Returns task relocation result for a task with the given id. Both active and archived data sets are checked.
    rpc GetTaskRelocationResult (RelocationTaskId) returns (TaskRelocationExecution) {
    }

    /// Observe relocation plans and their execution status.
    rpc ObserveRelocationEvents (TaskRelocationQuery) returns (stream RelocationEvent) {
    }
}

syntax = "proto3";

// WORK IN PROGRESS
// This API is likely to change.

// Titus task eviction API specification.
//

package com.netflix.titus;

import "netflix/titus/titus_base.proto";

option java_multiple_files = true;
option java_package = "com.netflix.titus.grpc.protogen";
option java_outer_classname = "EvictionProto";

option go_package = "titus";

// ----------------------------------------------------------------------------
// Eviction core data structures

/// Current eviction quota at the system, tier, capacity group, and job level. The total amount of tasks that
//  can be evicted at a given point in time is constraint by this number.
message EvictionQuota {
    /// System layer/entity refrence.
    Reference target = 1;

    /// (Required) Total number of tasks that can be evicted at a given point in time.
    uint32 quota = 2;

    /// (Optional) Additional information associated with the current quota level.
    string message = 3;
}

// ----------------------------------------------------------------------------
// GRPC services

message CapacityGroupId {
    string id = 1;
}

message TierId {
    Tier tier = 1;
}

message TaskTerminateRequest {
    string taskId = 1;

    /// Textual description of why a task termination was requested.
    string reason = 2;
}

message TaskTerminateResponse {
    /// Set to true if the termination request was accepted.
    bool allowed = 1;

    /// If a termination request is not accepted, this field contains the reason code explaining why:
    //  * aboveSystemDisruptionBudget
    //  * aboveTierDisruptionBudget
    //  * aboveCapacityGroupDisruptionBudget
    //  * jobRelocationPolicyViolation
    string reasonCode = 2;

    /// If a termination request is not accepted, contains explanation why.
    string reasonMessage = 3;
}

message ObserverEventRequest {
    bool includeSnapshot = 2;
}

message EvictionServiceEvent {
    message SnapshotEnd {
    }

    message EvictionQuotaEvent {
        EvictionQuota quota = 1;
    }

    message TaskTerminationEvent {
        string taskId = 1;
        bool approved = 2;
        string reason = 3;
        string restrictionCode = 4;
        string restrictionMessage = 5;
    }

    oneof Event {
        SnapshotEnd snapshotEnd = 1;

        EvictionQuotaEvent evictionQuotaEvent = 2;

        TaskTerminationEvent taskTerminationEvent = 3;
    }
}

service EvictionService {

    rpc GetEvictionQuota (Reference) returns (EvictionQuota) {
    }

    /// Terminate a task.
    rpc TerminateTask (TaskTerminateRequest) returns (TaskTerminateResponse) {
    }

    /// Event stream with the disruption budge updates and task termination requests.
    rpc ObserveEvents (ObserverEventRequest) returns (stream EvictionServiceEvent) {
    }
}
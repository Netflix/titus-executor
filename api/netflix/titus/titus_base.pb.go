// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: netflix/titus/titus_base.proto

package titus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

/// Titus scheduler tier (see Titus scheduler documentation for more information).
type Tier int32

const (
	/// Tier for running latency insensitive batch workloads.
	Tier_Flex Tier = 0
	/// Tier for running latency sensitive workloads.
	Tier_Critical Tier = 1
)

// Enum value maps for Tier.
var (
	Tier_name = map[int32]string{
		0: "Flex",
		1: "Critical",
	}
	Tier_value = map[string]int32{
		"Flex":     0,
		"Critical": 1,
	}
)

func (x Tier) Enum() *Tier {
	p := new(Tier)
	*p = x
	return p
}

func (x Tier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tier) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_titus_base_proto_enumTypes[0].Descriptor()
}

func (Tier) Type() protoreflect.EnumType {
	return &file_netflix_titus_titus_base_proto_enumTypes[0]
}

func (x Tier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tier.Descriptor instead.
func (Tier) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{0}
}

/// Titus hierarchy level.
type Level int32

const (
	Level_SystemLevel        Level = 0
	Level_TierLevel          Level = 1
	Level_CapacityGroupLevel Level = 2
	Level_JobLevel           Level = 3
	Level_TaskLevel          Level = 4
)

// Enum value maps for Level.
var (
	Level_name = map[int32]string{
		0: "SystemLevel",
		1: "TierLevel",
		2: "CapacityGroupLevel",
		3: "JobLevel",
		4: "TaskLevel",
	}
	Level_value = map[string]int32{
		"SystemLevel":        0,
		"TierLevel":          1,
		"CapacityGroupLevel": 2,
		"JobLevel":           3,
		"TaskLevel":          4,
	}
)

func (x Level) Enum() *Level {
	p := new(Level)
	*p = x
	return p
}

func (x Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Level) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_titus_base_proto_enumTypes[1].Descriptor()
}

func (Level) Type() protoreflect.EnumType {
	return &file_netflix_titus_titus_base_proto_enumTypes[1]
}

func (x Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Level.Descriptor instead.
func (Level) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{1}
}

/// Disk mount permission mask
type MountPerm int32

const (
	/// Read only
	MountPerm_RO MountPerm = 0
	// Write only
	MountPerm_WO MountPerm = 1
	// Read/write
	MountPerm_RW MountPerm = 2
)

// Enum value maps for MountPerm.
var (
	MountPerm_name = map[int32]string{
		0: "RO",
		1: "WO",
		2: "RW",
	}
	MountPerm_value = map[string]int32{
		"RO": 0,
		"WO": 1,
		"RW": 2,
	}
)

func (x MountPerm) Enum() *MountPerm {
	p := new(MountPerm)
	*p = x
	return p
}

func (x MountPerm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MountPerm) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_titus_base_proto_enumTypes[2].Descriptor()
}

func (MountPerm) Type() protoreflect.EnumType {
	return &file_netflix_titus_titus_base_proto_enumTypes[2]
}

func (x MountPerm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MountPerm.Descriptor instead.
func (MountPerm) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{2}
}

type Day int32

const (
	Day_Monday    Day = 0
	Day_Tuesday   Day = 1
	Day_Wednesday Day = 2
	Day_Thursday  Day = 3
	Day_Friday    Day = 4
	Day_Saturday  Day = 5
	Day_Sunday    Day = 6
)

// Enum value maps for Day.
var (
	Day_name = map[int32]string{
		0: "Monday",
		1: "Tuesday",
		2: "Wednesday",
		3: "Thursday",
		4: "Friday",
		5: "Saturday",
		6: "Sunday",
	}
	Day_value = map[string]int32{
		"Monday":    0,
		"Tuesday":   1,
		"Wednesday": 2,
		"Thursday":  3,
		"Friday":    4,
		"Saturday":  5,
		"Sunday":    6,
	}
)

func (x Day) Enum() *Day {
	p := new(Day)
	*p = x
	return p
}

func (x Day) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Day) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_titus_base_proto_enumTypes[3].Descriptor()
}

func (Day) Type() protoreflect.EnumType {
	return &file_netflix_titus_titus_base_proto_enumTypes[3]
}

func (x Day) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Day.Descriptor instead.
func (Day) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{3}
}

type CallMetadata_CallerType int32

const (
	CallMetadata_Unknown     CallMetadata_CallerType = 0
	CallMetadata_Application CallMetadata_CallerType = 1
	CallMetadata_User        CallMetadata_CallerType = 2
)

// Enum value maps for CallMetadata_CallerType.
var (
	CallMetadata_CallerType_name = map[int32]string{
		0: "Unknown",
		1: "Application",
		2: "User",
	}
	CallMetadata_CallerType_value = map[string]int32{
		"Unknown":     0,
		"Application": 1,
		"User":        2,
	}
)

func (x CallMetadata_CallerType) Enum() *CallMetadata_CallerType {
	p := new(CallMetadata_CallerType)
	*p = x
	return p
}

func (x CallMetadata_CallerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallMetadata_CallerType) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_titus_base_proto_enumTypes[4].Descriptor()
}

func (CallMetadata_CallerType) Type() protoreflect.EnumType {
	return &file_netflix_titus_titus_base_proto_enumTypes[4]
}

func (x CallMetadata_CallerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallMetadata_CallerType.Descriptor instead.
func (CallMetadata_CallerType) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{0, 0}
}

/// Call metadata (caller's identity, call path).
type CallMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) The original caller identifier. Depending on the user identity (a user or an application), the format
	// of the id may be different. For example a user's id could be their email address, and application's id its name.
	//  (Deprecated) Use 'caller' field instead.
	//
	// Deprecated: Do not use.
	CallerId string `protobuf:"bytes,1,opt,name=callerId,proto3" json:"callerId,omitempty"`
	/// The first item in the list is the original caller, followed by a sequence of intermediaries via which the
	//  original call was relayed.
	Callers []*CallMetadata_Caller `protobuf:"bytes,5,rep,name=callers,proto3" json:"callers,omitempty"`
	/// (Optional) The reason why a call was made.
	CallReason string `protobuf:"bytes,2,opt,name=callReason,proto3" json:"callReason,omitempty"`
	/// (Optional) The list of intermediaries via which a call was relayed.
	//  (Deprecated) Use 'caller' field instead.
	//
	// Deprecated: Do not use.
	CallPath []string `protobuf:"bytes,3,rep,name=callPath,proto3" json:"callPath,omitempty"`
	/// (Optional) If set to true, a diagnostic information is provided if a request fails.
	Debug bool `protobuf:"varint,4,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *CallMetadata) Reset() {
	*x = CallMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallMetadata) ProtoMessage() {}

func (x *CallMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallMetadata.ProtoReflect.Descriptor instead.
func (*CallMetadata) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Do not use.
func (x *CallMetadata) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

func (x *CallMetadata) GetCallers() []*CallMetadata_Caller {
	if x != nil {
		return x.Callers
	}
	return nil
}

func (x *CallMetadata) GetCallReason() string {
	if x != nil {
		return x.CallReason
	}
	return ""
}

// Deprecated: Do not use.
func (x *CallMetadata) GetCallPath() []string {
	if x != nil {
		return x.CallPath
	}
	return nil
}

func (x *CallMetadata) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

/// An entity representing single page of a collection. Prefer using cursor-based pagination, pageNumber is being retired.
//  For the first page, leave both pageNumber and cursor empty.
type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Optional) Requested page number, starting from 0 (defaults to 0 if not specified).
	//  (Deprecated) Use cursor-based pagination instead.
	//
	// Deprecated: Do not use.
	PageNumber int32 `protobuf:"varint,1,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
	/// (Required) Requested page size (if not specified, default size is operation specific).
	PageSize int32 `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	/// (Optional) The position in the collection from which the next page should be returned. If the cursor value is set, it is
	// always used, irrespective of the page number set.
	Cursor string `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Do not use.
func (x *Page) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *Page) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *Page) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

/// An entity representing pagination information returned to a client iterating over its elements.
// It includes current page that the client requested, and the total collection size.
// As not always pageCount * pageSize == itemCount, the item count is included as well.
type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Requested page details.
	CurrentPage *Page `protobuf:"bytes,1,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	/// Are there any more items to return? Use the cursor to fetch the next page when required.
	HasMore bool `protobuf:"varint,2,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	/// (Deprecated) Use cursor-based pagination instead. Total number of pages.
	//
	// Deprecated: Do not use.
	TotalPages int32 `protobuf:"varint,3,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
	/// Total number of items.
	TotalItems int32 `protobuf:"varint,4,opt,name=totalItems,proto3" json:"totalItems,omitempty"`
	/// The last retrieved item's position in the collection. The cursor value can be sent on a subsequent request to
	// get the next page of items. Using cursors, instead of page numbers, will guarantee that all items are
	// retrieved with a potential of items being duplicated.
	Cursor string `protobuf:"bytes,5,opt,name=cursor,proto3" json:"cursor,omitempty"`
	/// Position of the cursor relative to totalItems. It can be used to determine what pageNumber would overlap with a
	// cursor, or to provide an idea of progress when walking all pages. Valid values are [0, totalItems-1].
	CursorPosition int32 `protobuf:"varint,6,opt,name=cursorPosition,proto3" json:"cursorPosition,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{2}
}

func (x *Pagination) GetCurrentPage() *Page {
	if x != nil {
		return x.CurrentPage
	}
	return nil
}

func (x *Pagination) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

// Deprecated: Do not use.
func (x *Pagination) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *Pagination) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

func (x *Pagination) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *Pagination) GetCursorPosition() int32 {
	if x != nil {
		return x.CursorPosition
	}
	return 0
}

/// Retry polices.
type RetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Retry policy.
	//
	// Types that are assignable to Policy:
	//	*RetryPolicy_Immediate_
	//	*RetryPolicy_Delayed_
	//	*RetryPolicy_ExponentialBackOff_
	Policy isRetryPolicy_Policy `protobuf_oneof:"Policy"`
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{3}
}

func (m *RetryPolicy) GetPolicy() isRetryPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *RetryPolicy) GetImmediate() *RetryPolicy_Immediate {
	if x, ok := x.GetPolicy().(*RetryPolicy_Immediate_); ok {
		return x.Immediate
	}
	return nil
}

func (x *RetryPolicy) GetDelayed() *RetryPolicy_Delayed {
	if x, ok := x.GetPolicy().(*RetryPolicy_Delayed_); ok {
		return x.Delayed
	}
	return nil
}

func (x *RetryPolicy) GetExponentialBackOff() *RetryPolicy_ExponentialBackOff {
	if x, ok := x.GetPolicy().(*RetryPolicy_ExponentialBackOff_); ok {
		return x.ExponentialBackOff
	}
	return nil
}

type isRetryPolicy_Policy interface {
	isRetryPolicy_Policy()
}

type RetryPolicy_Immediate_ struct {
	Immediate *RetryPolicy_Immediate `protobuf:"bytes,1,opt,name=immediate,proto3,oneof"`
}

type RetryPolicy_Delayed_ struct {
	Delayed *RetryPolicy_Delayed `protobuf:"bytes,2,opt,name=delayed,proto3,oneof"`
}

type RetryPolicy_ExponentialBackOff_ struct {
	ExponentialBackOff *RetryPolicy_ExponentialBackOff `protobuf:"bytes,3,opt,name=exponentialBackOff,proto3,oneof"`
}

func (*RetryPolicy_Immediate_) isRetryPolicy_Policy() {}

func (*RetryPolicy_Delayed_) isRetryPolicy_Policy() {}

func (*RetryPolicy_ExponentialBackOff_) isRetryPolicy_Policy() {}

/// Token bucket policies
type TokenBucketPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capacity              uint64 `protobuf:"varint,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	InitialNumberOfTokens uint64 `protobuf:"varint,2,opt,name=initialNumberOfTokens,proto3" json:"initialNumberOfTokens,omitempty"`
	// Types that are assignable to RefillStrategy:
	//	*TokenBucketPolicy_FixedIntervalRefillStrategy_
	RefillStrategy isTokenBucketPolicy_RefillStrategy `protobuf_oneof:"RefillStrategy"`
}

func (x *TokenBucketPolicy) Reset() {
	*x = TokenBucketPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBucketPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBucketPolicy) ProtoMessage() {}

func (x *TokenBucketPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBucketPolicy.ProtoReflect.Descriptor instead.
func (*TokenBucketPolicy) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{4}
}

func (x *TokenBucketPolicy) GetCapacity() uint64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *TokenBucketPolicy) GetInitialNumberOfTokens() uint64 {
	if x != nil {
		return x.InitialNumberOfTokens
	}
	return 0
}

func (m *TokenBucketPolicy) GetRefillStrategy() isTokenBucketPolicy_RefillStrategy {
	if m != nil {
		return m.RefillStrategy
	}
	return nil
}

func (x *TokenBucketPolicy) GetFixedIntervalRefillStrategy() *TokenBucketPolicy_FixedIntervalRefillStrategy {
	if x, ok := x.GetRefillStrategy().(*TokenBucketPolicy_FixedIntervalRefillStrategy_); ok {
		return x.FixedIntervalRefillStrategy
	}
	return nil
}

type isTokenBucketPolicy_RefillStrategy interface {
	isTokenBucketPolicy_RefillStrategy()
}

type TokenBucketPolicy_FixedIntervalRefillStrategy_ struct {
	FixedIntervalRefillStrategy *TokenBucketPolicy_FixedIntervalRefillStrategy `protobuf:"bytes,3,opt,name=fixedIntervalRefillStrategy,proto3,oneof"`
}

func (*TokenBucketPolicy_FixedIntervalRefillStrategy_) isTokenBucketPolicy_RefillStrategy() {}

/// A reference to an entity in the Titus hierarchy.
type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reference:
	//	*Reference_System_
	//	*Reference_Tier
	//	*Reference_CapacityGroup
	//	*Reference_JobId
	//	*Reference_TaskId
	Reference isReference_Reference `protobuf_oneof:"Reference"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{5}
}

func (m *Reference) GetReference() isReference_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (x *Reference) GetSystem() *Reference_System {
	if x, ok := x.GetReference().(*Reference_System_); ok {
		return x.System
	}
	return nil
}

func (x *Reference) GetTier() Tier {
	if x, ok := x.GetReference().(*Reference_Tier); ok {
		return x.Tier
	}
	return Tier_Flex
}

func (x *Reference) GetCapacityGroup() string {
	if x, ok := x.GetReference().(*Reference_CapacityGroup); ok {
		return x.CapacityGroup
	}
	return ""
}

func (x *Reference) GetJobId() string {
	if x, ok := x.GetReference().(*Reference_JobId); ok {
		return x.JobId
	}
	return ""
}

func (x *Reference) GetTaskId() string {
	if x, ok := x.GetReference().(*Reference_TaskId); ok {
		return x.TaskId
	}
	return ""
}

type isReference_Reference interface {
	isReference_Reference()
}

type Reference_System_ struct {
	/// System level.
	System *Reference_System `protobuf:"bytes,1,opt,name=system,proto3,oneof"`
}

type Reference_Tier struct {
	/// Tier level
	Tier Tier `protobuf:"varint,2,opt,name=tier,proto3,enum=com.netflix.titus.Tier,oneof"`
}

type Reference_CapacityGroup struct {
	/// A capacity group level, with the capacity group name as a value.
	CapacityGroup string `protobuf:"bytes,3,opt,name=capacityGroup,proto3,oneof"`
}

type Reference_JobId struct {
	/// Job id.
	JobId string `protobuf:"bytes,4,opt,name=jobId,proto3,oneof"`
}

type Reference_TaskId struct {
	/// Task id.
	TaskId string `protobuf:"bytes,5,opt,name=taskId,proto3,oneof"`
}

func (*Reference_System_) isReference_Reference() {}

func (*Reference_Tier) isReference_Reference() {}

func (*Reference_CapacityGroup) isReference_Reference() {}

func (*Reference_JobId) isReference_Reference() {}

func (*Reference_TaskId) isReference_Reference() {}

/// Instance resource dimensions
type ResourceDimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu         uint32 `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Gpu         uint32 `protobuf:"varint,2,opt,name=gpu,proto3" json:"gpu,omitempty"`
	MemoryMB    uint32 `protobuf:"varint,3,opt,name=memoryMB,proto3" json:"memoryMB,omitempty"`
	DiskMB      uint32 `protobuf:"varint,4,opt,name=diskMB,proto3" json:"diskMB,omitempty"`
	NetworkMbps uint32 `protobuf:"varint,5,opt,name=networkMbps,proto3" json:"networkMbps,omitempty"`
}

func (x *ResourceDimension) Reset() {
	*x = ResourceDimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceDimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceDimension) ProtoMessage() {}

func (x *ResourceDimension) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceDimension.ProtoReflect.Descriptor instead.
func (*ResourceDimension) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceDimension) GetCpu() uint32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ResourceDimension) GetGpu() uint32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *ResourceDimension) GetMemoryMB() uint32 {
	if x != nil {
		return x.MemoryMB
	}
	return 0
}

func (x *ResourceDimension) GetDiskMB() uint32 {
	if x != nil {
		return x.DiskMB
	}
	return 0
}

func (x *ResourceDimension) GetNetworkMbps() uint32 {
	if x != nil {
		return x.NetworkMbps
	}
	return 0
}

/// Time window descriptor.
type TimeWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Included days.
	Days []Day `protobuf:"varint,1,rep,packed,name=days,proto3,enum=com.netflix.titus.Day" json:"days,omitempty"`
	/// (Optional) Included hour ranges. If not set, defaults to 0-24.
	HourlyTimeWindows []*TimeWindow_HourlyTimeWindow `protobuf:"bytes,2,rep,name=hourlyTimeWindows,proto3" json:"hourlyTimeWindows,omitempty"`
	/// (Optional) If not set, UTC time zone is set as a default.
	TimeZone string `protobuf:"bytes,3,opt,name=timeZone,proto3" json:"timeZone,omitempty"`
}

func (x *TimeWindow) Reset() {
	*x = TimeWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeWindow) ProtoMessage() {}

func (x *TimeWindow) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeWindow.ProtoReflect.Descriptor instead.
func (*TimeWindow) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{7}
}

func (x *TimeWindow) GetDays() []Day {
	if x != nil {
		return x.Days
	}
	return nil
}

func (x *TimeWindow) GetHourlyTimeWindows() []*TimeWindow_HourlyTimeWindow {
	if x != nil {
		return x.HourlyTimeWindows
	}
	return nil
}

func (x *TimeWindow) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

/// A provider for container health
type ContainerHealthProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) The name of the provider.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	/// (Optional) Attributes to be used by the provider.
	Attributes map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ContainerHealthProvider) Reset() {
	*x = ContainerHealthProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerHealthProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerHealthProvider) ProtoMessage() {}

func (x *ContainerHealthProvider) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerHealthProvider.ProtoReflect.Descriptor instead.
func (*ContainerHealthProvider) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{8}
}

func (x *ContainerHealthProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContainerHealthProvider) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

/// The location within the VPC where the address exists.
type AddressLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Region the address exists in.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	/// (Required) Availability zone the address exists in.
	AvailabilityZone string `protobuf:"bytes,2,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	/// (Required) Subnet the address exists in.
	SubnetId string `protobuf:"bytes,3,opt,name=subnetId,proto3" json:"subnetId,omitempty"`
}

func (x *AddressLocation) Reset() {
	*x = AddressLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressLocation) ProtoMessage() {}

func (x *AddressLocation) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressLocation.ProtoReflect.Descriptor instead.
func (*AddressLocation) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{9}
}

func (x *AddressLocation) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AddressLocation) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *AddressLocation) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

/// An IP address allocation from the Titus VPC service.
type AddressAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) The location of the address within the VPC.
	AddressLocation *AddressLocation `protobuf:"bytes,1,opt,name=addressLocation,proto3" json:"addressLocation,omitempty"`
	/// (Required) A valid UUID4. It should be set during VPC service allocation, if unset, one will be set for you.
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	/// (Required) The VPC IP address. The address must be unset when requesting an allocation from the VPC service.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AddressAllocation) Reset() {
	*x = AddressAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressAllocation) ProtoMessage() {}

func (x *AddressAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressAllocation.ProtoReflect.Descriptor instead.
func (*AddressAllocation) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{10}
}

func (x *AddressAllocation) GetAddressLocation() *AddressLocation {
	if x != nil {
		return x.AddressLocation
	}
	return nil
}

func (x *AddressAllocation) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AddressAllocation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type StaticIPAddressIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) A list of valid UUIDs
	Uuids []string `protobuf:"bytes,1,rep,name=uuids,proto3" json:"uuids,omitempty"`
}

func (x *StaticIPAddressIDs) Reset() {
	*x = StaticIPAddressIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticIPAddressIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticIPAddressIDs) ProtoMessage() {}

func (x *StaticIPAddressIDs) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticIPAddressIDs.ProtoReflect.Descriptor instead.
func (*StaticIPAddressIDs) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{11}
}

func (x *StaticIPAddressIDs) GetUuids() []string {
	if x != nil {
		return x.Uuids
	}
	return nil
}

/// An IP address allocation signed by the Titus VPC service.
type SignedAddressAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) The IP address and metadata that was allocated.
	AddressAllocation *AddressAllocation `protobuf:"bytes,1,opt,name=addressAllocation,proto3" json:"addressAllocation,omitempty"`
	// This is an x509v3 signed version of the address allocation.
	//
	// Deprecated: Do not use.
	SignedAddressAllocation []byte `protobuf:"bytes,2,opt,name=signedAddressAllocation,proto3" json:"signedAddressAllocation,omitempty"`
	// authoritative publicKey is the key that came from the database
	AuthoritativePublicKey []byte `protobuf:"bytes,3,opt,name=authoritativePublicKey,proto3" json:"authoritativePublicKey,omitempty"`
	// the hostPublicKey is the ephemeral public key
	HostPublicKey []byte `protobuf:"bytes,4,opt,name=hostPublicKey,proto3" json:"hostPublicKey,omitempty"`
	// hostPublicKeySignature is the signature of the authoratative key signing the hostPublicKey
	HostPublicKeySignature []byte `protobuf:"bytes,5,opt,name=hostPublicKeySignature,proto3" json:"hostPublicKeySignature,omitempty"`
	// serialized version of the addressAllocation message
	Message []byte `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// the resultant signature
	MessageSignature []byte `protobuf:"bytes,7,opt,name=messageSignature,proto3" json:"messageSignature,omitempty"`
}

func (x *SignedAddressAllocation) Reset() {
	*x = SignedAddressAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedAddressAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedAddressAllocation) ProtoMessage() {}

func (x *SignedAddressAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedAddressAllocation.ProtoReflect.Descriptor instead.
func (*SignedAddressAllocation) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{12}
}

func (x *SignedAddressAllocation) GetAddressAllocation() *AddressAllocation {
	if x != nil {
		return x.AddressAllocation
	}
	return nil
}

// Deprecated: Do not use.
func (x *SignedAddressAllocation) GetSignedAddressAllocation() []byte {
	if x != nil {
		return x.SignedAddressAllocation
	}
	return nil
}

func (x *SignedAddressAllocation) GetAuthoritativePublicKey() []byte {
	if x != nil {
		return x.AuthoritativePublicKey
	}
	return nil
}

func (x *SignedAddressAllocation) GetHostPublicKey() []byte {
	if x != nil {
		return x.HostPublicKey
	}
	return nil
}

func (x *SignedAddressAllocation) GetHostPublicKeySignature() []byte {
	if x != nil {
		return x.HostPublicKeySignature
	}
	return nil
}

func (x *SignedAddressAllocation) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SignedAddressAllocation) GetMessageSignature() []byte {
	if x != nil {
		return x.MessageSignature
	}
	return nil
}

// Data record type independent metadata information.
type DataRecordMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of why new version of the data was created.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Identification of the person who changed the data.
	CallMetadata *CallMetadata `protobuf:"bytes,2,opt,name=callMetadata,proto3" json:"callMetadata,omitempty"`
	// Time of change.
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *DataRecordMetadata) Reset() {
	*x = DataRecordMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRecordMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRecordMetadata) ProtoMessage() {}

func (x *DataRecordMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRecordMetadata.ProtoReflect.Descriptor instead.
func (*DataRecordMetadata) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{13}
}

func (x *DataRecordMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DataRecordMetadata) GetCallMetadata() *CallMetadata {
	if x != nil {
		return x.CallMetadata
	}
	return nil
}

func (x *DataRecordMetadata) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type CallMetadata_Caller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) A caller identifier. Depending on the user identity (a user or an application), the format
	// of the id may be different. For example a user's id could be their email address, and application's id its name.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	/// (Optional) The caller type.
	Type CallMetadata_CallerType `protobuf:"varint,2,opt,name=type,proto3,enum=com.netflix.titus.CallMetadata_CallerType" json:"type,omitempty"`
	/// (Optional) Additional data associated with the caller. Key names starting with 'titus' are reserved for Titus.
	//  Predefined context keys:
	//  * 'titus.service.name' - name of the service that is invoked
	//  * 'titus.service.method' - nome of the method that is invoked
	//  * 'titus.transport.type' - transport type (HTTP/GRPC)
	//  * 'titus.transport.secure' - true for TLS, false for plain text
	Context map[string]string `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CallMetadata_Caller) Reset() {
	*x = CallMetadata_Caller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallMetadata_Caller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallMetadata_Caller) ProtoMessage() {}

func (x *CallMetadata_Caller) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallMetadata_Caller.ProtoReflect.Descriptor instead.
func (*CallMetadata_Caller) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CallMetadata_Caller) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CallMetadata_Caller) GetType() CallMetadata_CallerType {
	if x != nil {
		return x.Type
	}
	return CallMetadata_Unknown
}

func (x *CallMetadata_Caller) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

/// Re-run immediately.
type RetryPolicy_Immediate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Maximum number of retries.
	Retries uint32 `protobuf:"varint,1,opt,name=retries,proto3" json:"retries,omitempty"`
}

func (x *RetryPolicy_Immediate) Reset() {
	*x = RetryPolicy_Immediate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicy_Immediate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy_Immediate) ProtoMessage() {}

func (x *RetryPolicy_Immediate) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy_Immediate.ProtoReflect.Descriptor instead.
func (*RetryPolicy_Immediate) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{3, 0}
}

func (x *RetryPolicy_Immediate) GetRetries() uint32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

/// Re-run after a given delay.
type RetryPolicy_Delayed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Initial delay in milliseconds.
	InitialDelayMs uint64 `protobuf:"varint,1,opt,name=initialDelayMs,proto3" json:"initialDelayMs,omitempty"`
	/// Subsequent delays in milliseconds.
	DelayMs uint64 `protobuf:"varint,2,opt,name=delayMs,proto3" json:"delayMs,omitempty"`
	/// Maximum number of retries.
	Retries uint32 `protobuf:"varint,3,opt,name=retries,proto3" json:"retries,omitempty"`
}

func (x *RetryPolicy_Delayed) Reset() {
	*x = RetryPolicy_Delayed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicy_Delayed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy_Delayed) ProtoMessage() {}

func (x *RetryPolicy_Delayed) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy_Delayed.ProtoReflect.Descriptor instead.
func (*RetryPolicy_Delayed) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{3, 1}
}

func (x *RetryPolicy_Delayed) GetInitialDelayMs() uint64 {
	if x != nil {
		return x.InitialDelayMs
	}
	return 0
}

func (x *RetryPolicy_Delayed) GetDelayMs() uint64 {
	if x != nil {
		return x.DelayMs
	}
	return 0
}

func (x *RetryPolicy_Delayed) GetRetries() uint32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

/// Exponential back-off retry policy.
type RetryPolicy_ExponentialBackOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Initial delay in milliseconds.
	InitialDelayMs uint64 `protobuf:"varint,1,opt,name=initialDelayMs,proto3" json:"initialDelayMs,omitempty"`
	/// Upper bound on delay interval.
	MaxDelayIntervalMs uint64 `protobuf:"varint,2,opt,name=maxDelayIntervalMs,proto3" json:"maxDelayIntervalMs,omitempty"`
	/// Maximum number of retries.
	Retries uint32 `protobuf:"varint,3,opt,name=retries,proto3" json:"retries,omitempty"`
}

func (x *RetryPolicy_ExponentialBackOff) Reset() {
	*x = RetryPolicy_ExponentialBackOff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicy_ExponentialBackOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy_ExponentialBackOff) ProtoMessage() {}

func (x *RetryPolicy_ExponentialBackOff) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy_ExponentialBackOff.ProtoReflect.Descriptor instead.
func (*RetryPolicy_ExponentialBackOff) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{3, 2}
}

func (x *RetryPolicy_ExponentialBackOff) GetInitialDelayMs() uint64 {
	if x != nil {
		return x.InitialDelayMs
	}
	return 0
}

func (x *RetryPolicy_ExponentialBackOff) GetMaxDelayIntervalMs() uint64 {
	if x != nil {
		return x.MaxDelayIntervalMs
	}
	return 0
}

func (x *RetryPolicy_ExponentialBackOff) GetRetries() uint32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

type TokenBucketPolicy_FixedIntervalRefillStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefillRate uint64 `protobuf:"varint,3,opt,name=refillRate,proto3" json:"refillRate,omitempty"`
	IntervalMs uint64 `protobuf:"varint,4,opt,name=intervalMs,proto3" json:"intervalMs,omitempty"`
}

func (x *TokenBucketPolicy_FixedIntervalRefillStrategy) Reset() {
	*x = TokenBucketPolicy_FixedIntervalRefillStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBucketPolicy_FixedIntervalRefillStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBucketPolicy_FixedIntervalRefillStrategy) ProtoMessage() {}

func (x *TokenBucketPolicy_FixedIntervalRefillStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBucketPolicy_FixedIntervalRefillStrategy.ProtoReflect.Descriptor instead.
func (*TokenBucketPolicy_FixedIntervalRefillStrategy) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TokenBucketPolicy_FixedIntervalRefillStrategy) GetRefillRate() uint64 {
	if x != nil {
		return x.RefillRate
	}
	return 0
}

func (x *TokenBucketPolicy_FixedIntervalRefillStrategy) GetIntervalMs() uint64 {
	if x != nil {
		return x.IntervalMs
	}
	return 0
}

type Reference_System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Reference_System) Reset() {
	*x = Reference_System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference_System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference_System) ProtoMessage() {}

func (x *Reference_System) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference_System.ProtoReflect.Descriptor instead.
func (*Reference_System) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{5, 0}
}

type TimeWindow_HourlyTimeWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Starting hour.
	StartHour uint32 `protobuf:"varint,1,opt,name=startHour,proto3" json:"startHour,omitempty"`
	/// (Required) Ending hour.
	EndHour uint32 `protobuf:"varint,2,opt,name=endHour,proto3" json:"endHour,omitempty"`
}

func (x *TimeWindow_HourlyTimeWindow) Reset() {
	*x = TimeWindow_HourlyTimeWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_base_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeWindow_HourlyTimeWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeWindow_HourlyTimeWindow) ProtoMessage() {}

func (x *TimeWindow_HourlyTimeWindow) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_base_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeWindow_HourlyTimeWindow.ProtoReflect.Descriptor instead.
func (*TimeWindow_HourlyTimeWindow) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_base_proto_rawDescGZIP(), []int{7, 0}
}

func (x *TimeWindow_HourlyTimeWindow) GetStartHour() uint32 {
	if x != nil {
		return x.StartHour
	}
	return 0
}

func (x *TimeWindow_HourlyTimeWindow) GetEndHour() uint32 {
	if x != nil {
		return x.EndHour
	}
	return 0
}

var File_netflix_titus_titus_base_proto protoreflect.FileDescriptor

var file_netflix_titus_titus_base_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2f, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2f,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2,
	0x03, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x1a, 0xe3, 0x01, 0x0a, 0x06, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a,
	0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x10, 0x02, 0x22, 0x5e, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x22, 0xe5, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x04, 0x0a, 0x0b,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x09, 0x69,
	0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x49,
	0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
	0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x12, 0x65, 0x78, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x1a, 0x25,
	0x0a, 0x09, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x65, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x4d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x4d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x86, 0x01, 0x0a,
	0x12, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x63, 0x6b,
	0x4f, 0x66, 0x66, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6d,
	0x61, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0xdd, 0x02, 0x0a, 0x11, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48,
	0x00, 0x52, 0x1b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x5d,
	0x0a, 0x1b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22,
	0xea, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x04,
	0x74, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54,
	0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0d, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x1a, 0x08, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42,
	0x0b, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x8d, 0x01, 0x0a,
	0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4d, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4d, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x4d, 0x42, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x4d, 0x42, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x62, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x62, 0x70, 0x73, 0x22, 0xfe, 0x01, 0x0a,
	0x0a, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x2a, 0x0a, 0x04, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x61,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x68, 0x6f, 0x75, 0x72, 0x6c,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x52, 0x11, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x1a, 0x4a, 0x0a, 0x10, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x6f,
	0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48,
	0x6f, 0x75, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x22, 0xc8, 0x01,
	0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x71, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2a, 0x0a,
	0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x22, 0x87, 0x03, 0x0a, 0x17, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x17, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x17,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0c,
	0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a,
	0x1e, 0x0a, 0x04, 0x54, 0x69, 0x65, 0x72, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x6c, 0x65, 0x78, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x01, 0x2a,
	0x5c, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x69, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x04, 0x2a, 0x23, 0x0a,
	0x09, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x4f,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x57, 0x4f, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x57,
	0x10, 0x02, 0x2a, 0x61, 0x0a, 0x03, 0x44, 0x61, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x6f, 0x6e,
	0x64, 0x61, 0x79, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x75, 0x65, 0x73, 0x64, 0x61, 0x79,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x65, 0x64, 0x6e, 0x65, 0x73, 0x64, 0x61, 0x79, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x64, 0x61, 0x79, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x61, 0x74, 0x75, 0x72, 0x64, 0x61, 0x79, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x75, 0x6e,
	0x64, 0x61, 0x79, 0x10, 0x06, 0x42, 0x3f, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
	0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x42, 0x09, 0x54, 0x69, 0x74, 0x75, 0x73, 0x42,
	0x61, 0x73, 0x65, 0x50, 0x01, 0x5a, 0x0f, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2f, 0x74, 0x69, 0x74, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_netflix_titus_titus_base_proto_rawDescOnce sync.Once
	file_netflix_titus_titus_base_proto_rawDescData = file_netflix_titus_titus_base_proto_rawDesc
)

func file_netflix_titus_titus_base_proto_rawDescGZIP() []byte {
	file_netflix_titus_titus_base_proto_rawDescOnce.Do(func() {
		file_netflix_titus_titus_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_netflix_titus_titus_base_proto_rawDescData)
	})
	return file_netflix_titus_titus_base_proto_rawDescData
}

var file_netflix_titus_titus_base_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_netflix_titus_titus_base_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_netflix_titus_titus_base_proto_goTypes = []interface{}{
	(Tier)(0),                              // 0: com.netflix.titus.Tier
	(Level)(0),                             // 1: com.netflix.titus.Level
	(MountPerm)(0),                         // 2: com.netflix.titus.MountPerm
	(Day)(0),                               // 3: com.netflix.titus.Day
	(CallMetadata_CallerType)(0),           // 4: com.netflix.titus.CallMetadata.CallerType
	(*CallMetadata)(nil),                   // 5: com.netflix.titus.CallMetadata
	(*Page)(nil),                           // 6: com.netflix.titus.Page
	(*Pagination)(nil),                     // 7: com.netflix.titus.Pagination
	(*RetryPolicy)(nil),                    // 8: com.netflix.titus.RetryPolicy
	(*TokenBucketPolicy)(nil),              // 9: com.netflix.titus.TokenBucketPolicy
	(*Reference)(nil),                      // 10: com.netflix.titus.Reference
	(*ResourceDimension)(nil),              // 11: com.netflix.titus.ResourceDimension
	(*TimeWindow)(nil),                     // 12: com.netflix.titus.TimeWindow
	(*ContainerHealthProvider)(nil),        // 13: com.netflix.titus.ContainerHealthProvider
	(*AddressLocation)(nil),                // 14: com.netflix.titus.AddressLocation
	(*AddressAllocation)(nil),              // 15: com.netflix.titus.AddressAllocation
	(*StaticIPAddressIDs)(nil),             // 16: com.netflix.titus.StaticIPAddressIDs
	(*SignedAddressAllocation)(nil),        // 17: com.netflix.titus.SignedAddressAllocation
	(*DataRecordMetadata)(nil),             // 18: com.netflix.titus.DataRecordMetadata
	(*CallMetadata_Caller)(nil),            // 19: com.netflix.titus.CallMetadata.Caller
	nil,                                    // 20: com.netflix.titus.CallMetadata.Caller.ContextEntry
	(*RetryPolicy_Immediate)(nil),          // 21: com.netflix.titus.RetryPolicy.Immediate
	(*RetryPolicy_Delayed)(nil),            // 22: com.netflix.titus.RetryPolicy.Delayed
	(*RetryPolicy_ExponentialBackOff)(nil), // 23: com.netflix.titus.RetryPolicy.ExponentialBackOff
	(*TokenBucketPolicy_FixedIntervalRefillStrategy)(nil), // 24: com.netflix.titus.TokenBucketPolicy.FixedIntervalRefillStrategy
	(*Reference_System)(nil),                              // 25: com.netflix.titus.Reference.System
	(*TimeWindow_HourlyTimeWindow)(nil),                   // 26: com.netflix.titus.TimeWindow.HourlyTimeWindow
	nil,                                                   // 27: com.netflix.titus.ContainerHealthProvider.AttributesEntry
}
var file_netflix_titus_titus_base_proto_depIdxs = []int32{
	19, // 0: com.netflix.titus.CallMetadata.callers:type_name -> com.netflix.titus.CallMetadata.Caller
	6,  // 1: com.netflix.titus.Pagination.currentPage:type_name -> com.netflix.titus.Page
	21, // 2: com.netflix.titus.RetryPolicy.immediate:type_name -> com.netflix.titus.RetryPolicy.Immediate
	22, // 3: com.netflix.titus.RetryPolicy.delayed:type_name -> com.netflix.titus.RetryPolicy.Delayed
	23, // 4: com.netflix.titus.RetryPolicy.exponentialBackOff:type_name -> com.netflix.titus.RetryPolicy.ExponentialBackOff
	24, // 5: com.netflix.titus.TokenBucketPolicy.fixedIntervalRefillStrategy:type_name -> com.netflix.titus.TokenBucketPolicy.FixedIntervalRefillStrategy
	25, // 6: com.netflix.titus.Reference.system:type_name -> com.netflix.titus.Reference.System
	0,  // 7: com.netflix.titus.Reference.tier:type_name -> com.netflix.titus.Tier
	3,  // 8: com.netflix.titus.TimeWindow.days:type_name -> com.netflix.titus.Day
	26, // 9: com.netflix.titus.TimeWindow.hourlyTimeWindows:type_name -> com.netflix.titus.TimeWindow.HourlyTimeWindow
	27, // 10: com.netflix.titus.ContainerHealthProvider.attributes:type_name -> com.netflix.titus.ContainerHealthProvider.AttributesEntry
	14, // 11: com.netflix.titus.AddressAllocation.addressLocation:type_name -> com.netflix.titus.AddressLocation
	15, // 12: com.netflix.titus.SignedAddressAllocation.addressAllocation:type_name -> com.netflix.titus.AddressAllocation
	5,  // 13: com.netflix.titus.DataRecordMetadata.callMetadata:type_name -> com.netflix.titus.CallMetadata
	4,  // 14: com.netflix.titus.CallMetadata.Caller.type:type_name -> com.netflix.titus.CallMetadata.CallerType
	20, // 15: com.netflix.titus.CallMetadata.Caller.context:type_name -> com.netflix.titus.CallMetadata.Caller.ContextEntry
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_netflix_titus_titus_base_proto_init() }
func file_netflix_titus_titus_base_proto_init() {
	if File_netflix_titus_titus_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_netflix_titus_titus_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBucketPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceDimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerHealthProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticIPAddressIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedAddressAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRecordMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallMetadata_Caller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicy_Immediate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicy_Delayed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicy_ExponentialBackOff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBucketPolicy_FixedIntervalRefillStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference_System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_base_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeWindow_HourlyTimeWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_netflix_titus_titus_base_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*RetryPolicy_Immediate_)(nil),
		(*RetryPolicy_Delayed_)(nil),
		(*RetryPolicy_ExponentialBackOff_)(nil),
	}
	file_netflix_titus_titus_base_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*TokenBucketPolicy_FixedIntervalRefillStrategy_)(nil),
	}
	file_netflix_titus_titus_base_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Reference_System_)(nil),
		(*Reference_Tier)(nil),
		(*Reference_CapacityGroup)(nil),
		(*Reference_JobId)(nil),
		(*Reference_TaskId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_netflix_titus_titus_base_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_netflix_titus_titus_base_proto_goTypes,
		DependencyIndexes: file_netflix_titus_titus_base_proto_depIdxs,
		EnumInfos:         file_netflix_titus_titus_base_proto_enumTypes,
		MessageInfos:      file_netflix_titus_titus_base_proto_msgTypes,
	}.Build()
	File_netflix_titus_titus_base_proto = out.File
	file_netflix_titus_titus_base_proto_rawDesc = nil
	file_netflix_titus_titus_base_proto_goTypes = nil
	file_netflix_titus_titus_base_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: netflix/titus/agent.proto

package titus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignatureAlgorithm int32

const (
	SignatureAlgorithm_SHA256withRSAandMGF1 SignatureAlgorithm = 0
	SignatureAlgorithm_SHA384withRSAandMGF1 SignatureAlgorithm = 1
	SignatureAlgorithm_SHA512withRSAandMGF1 SignatureAlgorithm = 2
	SignatureAlgorithm_SHA256withECDSA      SignatureAlgorithm = 3
	SignatureAlgorithm_SHA384withECDSA      SignatureAlgorithm = 4
	SignatureAlgorithm_SHA512withECDSA      SignatureAlgorithm = 5
)

// Enum value maps for SignatureAlgorithm.
var (
	SignatureAlgorithm_name = map[int32]string{
		0: "SHA256withRSAandMGF1",
		1: "SHA384withRSAandMGF1",
		2: "SHA512withRSAandMGF1",
		3: "SHA256withECDSA",
		4: "SHA384withECDSA",
		5: "SHA512withECDSA",
	}
	SignatureAlgorithm_value = map[string]int32{
		"SHA256withRSAandMGF1": 0,
		"SHA384withRSAandMGF1": 1,
		"SHA512withRSAandMGF1": 2,
		"SHA256withECDSA":      3,
		"SHA384withECDSA":      4,
		"SHA512withECDSA":      5,
	}
)

func (x SignatureAlgorithm) Enum() *SignatureAlgorithm {
	p := new(SignatureAlgorithm)
	*p = x
	return p
}

func (x SignatureAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_agent_proto_enumTypes[0].Descriptor()
}

func (SignatureAlgorithm) Type() protoreflect.EnumType {
	return &file_netflix_titus_agent_proto_enumTypes[0]
}

func (x SignatureAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SignatureAlgorithm) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SignatureAlgorithm(num)
	return nil
}

// Deprecated: Use SignatureAlgorithm.Descriptor instead.
func (SignatureAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{0}
}

type TaskInfo_Status int32

const (
	TaskInfo_RUNNING TaskInfo_Status = 0
	TaskInfo_FAILED  TaskInfo_Status = 1
	TaskInfo_STOPPED TaskInfo_Status = 2
)

// Enum value maps for TaskInfo_Status.
var (
	TaskInfo_Status_name = map[int32]string{
		0: "RUNNING",
		1: "FAILED",
		2: "STOPPED",
	}
	TaskInfo_Status_value = map[string]int32{
		"RUNNING": 0,
		"FAILED":  1,
		"STOPPED": 2,
	}
)

func (x TaskInfo_Status) Enum() *TaskInfo_Status {
	p := new(TaskInfo_Status)
	*p = x
	return p
}

func (x TaskInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_agent_proto_enumTypes[1].Descriptor()
}

func (TaskInfo_Status) Type() protoreflect.EnumType {
	return &file_netflix_titus_agent_proto_enumTypes[1]
}

func (x TaskInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TaskInfo_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TaskInfo_Status(num)
	return nil
}

// Deprecated: Use TaskInfo_Status.Descriptor instead.
func (TaskInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{3, 0}
}

type ContainerInfo_SnapshotPolicy int32

const (
	ContainerInfo_NEVER        ContainerInfo_SnapshotPolicy = 0
	ContainerInfo_ERROR_ONLY   ContainerInfo_SnapshotPolicy = 1
	ContainerInfo_SUCCESS_ONLY ContainerInfo_SnapshotPolicy = 2
	ContainerInfo_ALWAYS       ContainerInfo_SnapshotPolicy = 3
)

// Enum value maps for ContainerInfo_SnapshotPolicy.
var (
	ContainerInfo_SnapshotPolicy_name = map[int32]string{
		0: "NEVER",
		1: "ERROR_ONLY",
		2: "SUCCESS_ONLY",
		3: "ALWAYS",
	}
	ContainerInfo_SnapshotPolicy_value = map[string]int32{
		"NEVER":        0,
		"ERROR_ONLY":   1,
		"SUCCESS_ONLY": 2,
		"ALWAYS":       3,
	}
)

func (x ContainerInfo_SnapshotPolicy) Enum() *ContainerInfo_SnapshotPolicy {
	p := new(ContainerInfo_SnapshotPolicy)
	*p = x
	return p
}

func (x ContainerInfo_SnapshotPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerInfo_SnapshotPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_agent_proto_enumTypes[2].Descriptor()
}

func (ContainerInfo_SnapshotPolicy) Type() protoreflect.EnumType {
	return &file_netflix_titus_agent_proto_enumTypes[2]
}

func (x ContainerInfo_SnapshotPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerInfo_SnapshotPolicy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerInfo_SnapshotPolicy(num)
	return nil
}

// Deprecated: Use ContainerInfo_SnapshotPolicy.Descriptor instead.
func (ContainerInfo_SnapshotPolicy) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{5, 0}
}

// Borrowed from Kubernetes
type ContainerInfo_ImagePullPolicy int32

const (
	// Always pull the tag / digest
	ContainerInfo_Always ContainerInfo_ImagePullPolicy = 0
	// Only pull if we don't have an image with that given tag / digest (guarantees freshness, as it requires digest)
	ContainerInfo_IfNotPresent ContainerInfo_ImagePullPolicy = 1
	// Only pull if we don't have an image with that given tag
	ContainerInfo_IfLabelPresent ContainerInfo_ImagePullPolicy = 2
)

// Enum value maps for ContainerInfo_ImagePullPolicy.
var (
	ContainerInfo_ImagePullPolicy_name = map[int32]string{
		0: "Always",
		1: "IfNotPresent",
		2: "IfLabelPresent",
	}
	ContainerInfo_ImagePullPolicy_value = map[string]int32{
		"Always":         0,
		"IfNotPresent":   1,
		"IfLabelPresent": 2,
	}
)

func (x ContainerInfo_ImagePullPolicy) Enum() *ContainerInfo_ImagePullPolicy {
	p := new(ContainerInfo_ImagePullPolicy)
	*p = x
	return p
}

func (x ContainerInfo_ImagePullPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerInfo_ImagePullPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_agent_proto_enumTypes[3].Descriptor()
}

func (ContainerInfo_ImagePullPolicy) Type() protoreflect.EnumType {
	return &file_netflix_titus_agent_proto_enumTypes[3]
}

func (x ContainerInfo_ImagePullPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerInfo_ImagePullPolicy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerInfo_ImagePullPolicy(num)
	return nil
}

// Deprecated: Use ContainerInfo_ImagePullPolicy.Descriptor instead.
func (ContainerInfo_ImagePullPolicy) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{5, 1}
}

type ContainerInfo_EfsConfigInfo_MountPerms int32

const (
	ContainerInfo_EfsConfigInfo_RW ContainerInfo_EfsConfigInfo_MountPerms = 1
	ContainerInfo_EfsConfigInfo_RO ContainerInfo_EfsConfigInfo_MountPerms = 2
	ContainerInfo_EfsConfigInfo_WO ContainerInfo_EfsConfigInfo_MountPerms = 3
)

// Enum value maps for ContainerInfo_EfsConfigInfo_MountPerms.
var (
	ContainerInfo_EfsConfigInfo_MountPerms_name = map[int32]string{
		1: "RW",
		2: "RO",
		3: "WO",
	}
	ContainerInfo_EfsConfigInfo_MountPerms_value = map[string]int32{
		"RW": 1,
		"RO": 2,
		"WO": 3,
	}
)

func (x ContainerInfo_EfsConfigInfo_MountPerms) Enum() *ContainerInfo_EfsConfigInfo_MountPerms {
	p := new(ContainerInfo_EfsConfigInfo_MountPerms)
	*p = x
	return p
}

func (x ContainerInfo_EfsConfigInfo_MountPerms) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerInfo_EfsConfigInfo_MountPerms) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_agent_proto_enumTypes[4].Descriptor()
}

func (ContainerInfo_EfsConfigInfo_MountPerms) Type() protoreflect.EnumType {
	return &file_netflix_titus_agent_proto_enumTypes[4]
}

func (x ContainerInfo_EfsConfigInfo_MountPerms) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerInfo_EfsConfigInfo_MountPerms) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerInfo_EfsConfigInfo_MountPerms(num)
	return nil
}

// Deprecated: Use ContainerInfo_EfsConfigInfo_MountPerms.Descriptor instead.
func (ContainerInfo_EfsConfigInfo_MountPerms) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{5, 2, 0}
}

// Taken from include/uapi/linux/capability.h
// #define _LINUX_CAPABILITY_VERSION_3  0x20080522
type ContainerInfo_Capabilities_Capability int32

const (
	ContainerInfo_Capabilities_CHOWN            ContainerInfo_Capabilities_Capability = 0
	ContainerInfo_Capabilities_DAC_OVERRIDE     ContainerInfo_Capabilities_Capability = 1
	ContainerInfo_Capabilities_DAC_READ_SEARCH  ContainerInfo_Capabilities_Capability = 2
	ContainerInfo_Capabilities_FOWNER           ContainerInfo_Capabilities_Capability = 3
	ContainerInfo_Capabilities_FSETID           ContainerInfo_Capabilities_Capability = 4
	ContainerInfo_Capabilities_KILL             ContainerInfo_Capabilities_Capability = 5
	ContainerInfo_Capabilities_SETGID           ContainerInfo_Capabilities_Capability = 6
	ContainerInfo_Capabilities_SETUID           ContainerInfo_Capabilities_Capability = 7
	ContainerInfo_Capabilities_SETPCAP          ContainerInfo_Capabilities_Capability = 8
	ContainerInfo_Capabilities_LINUX_IMMUTABLE  ContainerInfo_Capabilities_Capability = 9
	ContainerInfo_Capabilities_NET_BIND_SERVICE ContainerInfo_Capabilities_Capability = 10
	ContainerInfo_Capabilities_NET_BROADCAST    ContainerInfo_Capabilities_Capability = 11
	ContainerInfo_Capabilities_NET_ADMIN        ContainerInfo_Capabilities_Capability = 12
	ContainerInfo_Capabilities_NET_RAW          ContainerInfo_Capabilities_Capability = 13
	ContainerInfo_Capabilities_IPC_LOCK         ContainerInfo_Capabilities_Capability = 14
	ContainerInfo_Capabilities_IPC_OWNER        ContainerInfo_Capabilities_Capability = 15
	ContainerInfo_Capabilities_SYS_MODULE       ContainerInfo_Capabilities_Capability = 16
	ContainerInfo_Capabilities_SYS_RAWIO        ContainerInfo_Capabilities_Capability = 17
	ContainerInfo_Capabilities_SYS_CHROOT       ContainerInfo_Capabilities_Capability = 18
	ContainerInfo_Capabilities_SYS_PTRACE       ContainerInfo_Capabilities_Capability = 19
	ContainerInfo_Capabilities_SYS_PACCT        ContainerInfo_Capabilities_Capability = 20
	ContainerInfo_Capabilities_SYS_ADMIN        ContainerInfo_Capabilities_Capability = 21
	ContainerInfo_Capabilities_SYS_BOOT         ContainerInfo_Capabilities_Capability = 22
	ContainerInfo_Capabilities_SYS_NICE         ContainerInfo_Capabilities_Capability = 23
	ContainerInfo_Capabilities_SYS_RESOURCE     ContainerInfo_Capabilities_Capability = 24
	ContainerInfo_Capabilities_SYS_TIME         ContainerInfo_Capabilities_Capability = 25
	ContainerInfo_Capabilities_SYS_TTY_CONFIG   ContainerInfo_Capabilities_Capability = 26
	ContainerInfo_Capabilities_MKNOD            ContainerInfo_Capabilities_Capability = 27
	ContainerInfo_Capabilities_LEASE            ContainerInfo_Capabilities_Capability = 28
	ContainerInfo_Capabilities_AUDIT_WRITE      ContainerInfo_Capabilities_Capability = 29
	ContainerInfo_Capabilities_AUDIT_CONTROL    ContainerInfo_Capabilities_Capability = 30
	ContainerInfo_Capabilities_SETFCAP          ContainerInfo_Capabilities_Capability = 31
	ContainerInfo_Capabilities_MAC_OVERRIDE     ContainerInfo_Capabilities_Capability = 32
	ContainerInfo_Capabilities_MAC_ADMIN        ContainerInfo_Capabilities_Capability = 33
	ContainerInfo_Capabilities_SYSLOG           ContainerInfo_Capabilities_Capability = 34
	ContainerInfo_Capabilities_WAKE_ALARM       ContainerInfo_Capabilities_Capability = 35
	ContainerInfo_Capabilities_BLOCK_SUSPEND    ContainerInfo_Capabilities_Capability = 36
	ContainerInfo_Capabilities_AUDIT_READ       ContainerInfo_Capabilities_Capability = 37
)

// Enum value maps for ContainerInfo_Capabilities_Capability.
var (
	ContainerInfo_Capabilities_Capability_name = map[int32]string{
		0:  "CHOWN",
		1:  "DAC_OVERRIDE",
		2:  "DAC_READ_SEARCH",
		3:  "FOWNER",
		4:  "FSETID",
		5:  "KILL",
		6:  "SETGID",
		7:  "SETUID",
		8:  "SETPCAP",
		9:  "LINUX_IMMUTABLE",
		10: "NET_BIND_SERVICE",
		11: "NET_BROADCAST",
		12: "NET_ADMIN",
		13: "NET_RAW",
		14: "IPC_LOCK",
		15: "IPC_OWNER",
		16: "SYS_MODULE",
		17: "SYS_RAWIO",
		18: "SYS_CHROOT",
		19: "SYS_PTRACE",
		20: "SYS_PACCT",
		21: "SYS_ADMIN",
		22: "SYS_BOOT",
		23: "SYS_NICE",
		24: "SYS_RESOURCE",
		25: "SYS_TIME",
		26: "SYS_TTY_CONFIG",
		27: "MKNOD",
		28: "LEASE",
		29: "AUDIT_WRITE",
		30: "AUDIT_CONTROL",
		31: "SETFCAP",
		32: "MAC_OVERRIDE",
		33: "MAC_ADMIN",
		34: "SYSLOG",
		35: "WAKE_ALARM",
		36: "BLOCK_SUSPEND",
		37: "AUDIT_READ",
	}
	ContainerInfo_Capabilities_Capability_value = map[string]int32{
		"CHOWN":            0,
		"DAC_OVERRIDE":     1,
		"DAC_READ_SEARCH":  2,
		"FOWNER":           3,
		"FSETID":           4,
		"KILL":             5,
		"SETGID":           6,
		"SETUID":           7,
		"SETPCAP":          8,
		"LINUX_IMMUTABLE":  9,
		"NET_BIND_SERVICE": 10,
		"NET_BROADCAST":    11,
		"NET_ADMIN":        12,
		"NET_RAW":          13,
		"IPC_LOCK":         14,
		"IPC_OWNER":        15,
		"SYS_MODULE":       16,
		"SYS_RAWIO":        17,
		"SYS_CHROOT":       18,
		"SYS_PTRACE":       19,
		"SYS_PACCT":        20,
		"SYS_ADMIN":        21,
		"SYS_BOOT":         22,
		"SYS_NICE":         23,
		"SYS_RESOURCE":     24,
		"SYS_TIME":         25,
		"SYS_TTY_CONFIG":   26,
		"MKNOD":            27,
		"LEASE":            28,
		"AUDIT_WRITE":      29,
		"AUDIT_CONTROL":    30,
		"SETFCAP":          31,
		"MAC_OVERRIDE":     32,
		"MAC_ADMIN":        33,
		"SYSLOG":           34,
		"WAKE_ALARM":       35,
		"BLOCK_SUSPEND":    36,
		"AUDIT_READ":       37,
	}
)

func (x ContainerInfo_Capabilities_Capability) Enum() *ContainerInfo_Capabilities_Capability {
	p := new(ContainerInfo_Capabilities_Capability)
	*p = x
	return p
}

func (x ContainerInfo_Capabilities_Capability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerInfo_Capabilities_Capability) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_agent_proto_enumTypes[5].Descriptor()
}

func (ContainerInfo_Capabilities_Capability) Type() protoreflect.EnumType {
	return &file_netflix_titus_agent_proto_enumTypes[5]
}

func (x ContainerInfo_Capabilities_Capability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerInfo_Capabilities_Capability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerInfo_Capabilities_Capability(num)
	return nil
}

// Deprecated: Use ContainerInfo_Capabilities_Capability.Descriptor instead.
func (ContainerInfo_Capabilities_Capability) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{5, 3, 0}
}

type TaskStatusData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *int64 `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`
}

func (x *TaskStatusData) Reset() {
	*x = TaskStatusData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatusData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusData) ProtoMessage() {}

func (x *TaskStatusData) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusData.ProtoReflect.Descriptor instead.
func (*TaskStatusData) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{0}
}

func (x *TaskStatusData) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type StateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	State     *string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Message   *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Timestamp *string `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (x *StateUpdate) Reset() {
	*x = StateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateUpdate) ProtoMessage() {}

func (x *StateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateUpdate.ProtoReflect.Descriptor instead.
func (*StateUpdate) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{1}
}

func (x *StateUpdate) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *StateUpdate) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *StateUpdate) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *StateUpdate) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

type StateUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateUpdate []*StateUpdate `protobuf:"bytes,1,rep,name=stateUpdate" json:"stateUpdate,omitempty"`
}

func (x *StateUpdates) Reset() {
	*x = StateUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateUpdates) ProtoMessage() {}

func (x *StateUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateUpdates.ProtoReflect.Descriptor instead.
func (*StateUpdates) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{2}
}

func (x *StateUpdates) GetStateUpdate() []*StateUpdate {
	if x != nil {
		return x.StateUpdate
	}
	return nil
}

type TaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId         *string                         `protobuf:"bytes,1,opt,name=containerId" json:"containerId,omitempty"`
	TaskId              *string                         `protobuf:"bytes,2,opt,name=taskId" json:"taskId,omitempty"`
	HostName            *string                         `protobuf:"bytes,3,opt,name=hostName" json:"hostName,omitempty"`
	SlaveId             *string                         `protobuf:"bytes,4,opt,name=slaveId" json:"slaveId,omitempty"`
	Status              *TaskInfo_Status                `protobuf:"varint,5,opt,name=status,enum=messages.TaskInfo_Status" json:"status,omitempty"`
	Message             *string                         `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	EnvironmentVariable []*TaskInfo_EnvironmentVariable `protobuf:"bytes,7,rep,name=environmentVariable" json:"environmentVariable,omitempty"`
}

func (x *TaskInfo) Reset() {
	*x = TaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo) ProtoMessage() {}

func (x *TaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo.ProtoReflect.Descriptor instead.
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{3}
}

func (x *TaskInfo) GetContainerId() string {
	if x != nil && x.ContainerId != nil {
		return *x.ContainerId
	}
	return ""
}

func (x *TaskInfo) GetTaskId() string {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return ""
}

func (x *TaskInfo) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *TaskInfo) GetSlaveId() string {
	if x != nil && x.SlaveId != nil {
		return *x.SlaveId
	}
	return ""
}

func (x *TaskInfo) GetStatus() TaskInfo_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return TaskInfo_RUNNING
}

func (x *TaskInfo) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *TaskInfo) GetEnvironmentVariable() []*TaskInfo_EnvironmentVariable {
	if x != nil {
		return x.EnvironmentVariable
	}
	return nil
}

// Agent-only structure: stores container info for a currently running container
type RunningContainerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Container hostname (not necessarily the same as task ID)
	HostName *string `protobuf:"bytes,1,opt,name=hostName" json:"hostName,omitempty"`
	// Container task ID
	TaskId *string `protobuf:"bytes,2,opt,name=taskId" json:"taskId,omitempty"`
	// Container launch timestamp, in Unix epoch seconds
	LaunchTimeUnixSec *uint64 `protobuf:"varint,3,opt,name=launchTimeUnixSec" json:"launchTimeUnixSec,omitempty"`
}

func (x *RunningContainerInfo) Reset() {
	*x = RunningContainerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunningContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunningContainerInfo) ProtoMessage() {}

func (x *RunningContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunningContainerInfo.ProtoReflect.Descriptor instead.
func (*RunningContainerInfo) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{4}
}

func (x *RunningContainerInfo) GetHostName() string {
	if x != nil && x.HostName != nil {
		return *x.HostName
	}
	return ""
}

func (x *RunningContainerInfo) GetTaskId() string {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return ""
}

func (x *RunningContainerInfo) GetLaunchTimeUnixSec() uint64 {
	if x != nil && x.LaunchTimeUnixSec != nil {
		return *x.LaunchTimeUnixSec
	}
	return 0
}

type ContainerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName *string `protobuf:"bytes,1,opt,name=imageName" json:"imageName,omitempty"`
	Command   *string `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"` // deprecated. replaced by entrypointCmd.
	// Deprecated: Do not use.
	ContainerPorts *string `protobuf:"bytes,3,opt,name=containerPorts" json:"containerPorts,omitempty"`
	Version        *string `protobuf:"bytes,4,opt,name=version,def=latest" json:"version,omitempty"`
	// deprecated: use userProvidedEnv and titusProvidedEnv instead
	//
	// Deprecated: Do not use.
	EnvironmentVariable []*ContainerInfo_EnvironmentVariable `protobuf:"bytes,5,rep,name=environmentVariable" json:"environmentVariable,omitempty"`
	JobId               *string                              `protobuf:"bytes,6,opt,name=jobId" json:"jobId,omitempty"`
	LogUploadRegexp     *string                              `protobuf:"bytes,7,opt,name=logUploadRegexp" json:"logUploadRegexp,omitempty"`
	// Deprecated: Do not use.
	MaxHealthFailures *uint32 `protobuf:"varint,8,opt,name=maxHealthFailures" json:"maxHealthFailures,omitempty"`
	// Deprecated: Do not use.
	HealthCheckCmd []string `protobuf:"bytes,9,rep,name=healthCheckCmd" json:"healthCheckCmd,omitempty"`
	// Deprecated: Do not use.
	SnapshotPolicy *ContainerInfo_SnapshotPolicy `protobuf:"varint,10,opt,name=snapshotPolicy,enum=messages.ContainerInfo_SnapshotPolicy" json:"snapshotPolicy,omitempty"`
	// deprecated: Use process instead
	//
	// Deprecated: Do not use.
	EntrypointCmd []string `protobuf:"bytes,11,rep,name=entrypointCmd" json:"entrypointCmd,omitempty"`
	// deprecated: Use process instead
	//
	// Deprecated: Do not use.
	EntrypointStr     *string                          `protobuf:"bytes,13,opt,name=entrypointStr" json:"entrypointStr,omitempty"`
	AppName           *string                          `protobuf:"bytes,14,opt,name=appName" json:"appName,omitempty"`
	JobGroupStack     *string                          `protobuf:"bytes,15,opt,name=jobGroupStack" json:"jobGroupStack,omitempty"`
	JobGroupDetail    *string                          `protobuf:"bytes,16,opt,name=jobGroupDetail" json:"jobGroupDetail,omitempty"`
	IamProfile        *string                          `protobuf:"bytes,17,opt,name=iamProfile" json:"iamProfile,omitempty"`
	NetworkConfigInfo *ContainerInfo_NetworkConfigInfo `protobuf:"bytes,18,opt,name=networkConfigInfo" json:"networkConfigInfo,omitempty"`
	JobGroupSequence  *string                          `protobuf:"bytes,19,opt,name=jobGroupSequence" json:"jobGroupSequence,omitempty"`
	// TODO(Sargun): Remove, and use the Mesos resource info instead
	NumGpus          *uint32                        `protobuf:"varint,20,opt,name=numGpus" json:"numGpus,omitempty"`
	EfsConfigInfo    []*ContainerInfo_EfsConfigInfo `protobuf:"bytes,21,rep,name=efsConfigInfo" json:"efsConfigInfo,omitempty"`
	Capabilities     *ContainerInfo_Capabilities    `protobuf:"bytes,22,opt,name=capabilities" json:"capabilities,omitempty"`
	MetatronCreds    *ContainerInfo_MetatronCreds   `protobuf:"bytes,23,opt,name=metatronCreds" json:"metatronCreds,omitempty"`
	UserProvidedEnv  map[string]string              `protobuf:"bytes,24,rep,name=userProvidedEnv" json:"userProvidedEnv,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TitusProvidedEnv map[string]string              `protobuf:"bytes,25,rep,name=titusProvidedEnv" json:"titusProvidedEnv,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// imageDigest has precedence over version
	ImageDigest          *string `protobuf:"bytes,26,opt,name=imageDigest" json:"imageDigest,omitempty"`
	AllowNetworkBursting *bool   `protobuf:"varint,27,opt,name=allowNetworkBursting" json:"allowNetworkBursting,omitempty"`
	// Number of seconds to wait before killing the container
	// otherwise, it will use the dockerd default
	KillWaitSeconds *uint32 `protobuf:"varint,28,opt,name=killWaitSeconds" json:"killWaitSeconds,omitempty"`
	// If the engine that is using this agent supports the
	// killinitiated state, this should be set to true.
	// That way, when this container is killed, as well as
	// when it is launched, the launchguard will be ignored.
	IgnoreLaunchGuard *bool `protobuf:"varint,29,opt,name=ignoreLaunchGuard" json:"ignoreLaunchGuard,omitempty"`
	// Should we allow this container to run privileged enough
	// to run internal container runtimes?
	AllowNestedContainers *bool `protobuf:"varint,30,opt,name=allowNestedContainers" json:"allowNestedContainers,omitempty"`
	// The image name with the registry
	FullyQualifiedImage *string `protobuf:"bytes,31,opt,name=fullyQualifiedImage" json:"fullyQualifiedImage,omitempty"`
	// Should this container be allowed to excceed its CPU cap?
	AllowCpuBursting *bool `protobuf:"varint,32,opt,name=allowCpuBursting" json:"allowCpuBursting,omitempty"`
	// Should this be tagged sched_batch? Does it prefer bigger chunks
	// of CPU, less frequently?
	Batch          *bool                          `protobuf:"varint,33,opt,name=batch" json:"batch,omitempty"`
	S3LogLocations []*ContainerInfo_S3LogLocation `protobuf:"bytes,34,rep,name=s3LogLocations" json:"s3LogLocations,omitempty"`
	// This influences the value of oom_score_adj for the PID 1 (tini) of the container
	//
	// The value of /proc/<pid>/oom_score_adj is added to the badness score before it
	// is used to determine which task to kill.  Acceptable values range from -1000
	// (OOM_SCORE_ADJ_MIN) to +1000 (OOM_SCORE_ADJ_MAX).  This allows userspace to
	// polarize the preference for oom killing either by always preferring a certain
	// task or completely disabling it.  The lowest possible value, -1000, is
	// equivalent to disabling oom killing entirely for that task since it will always
	// report a badness score of 0.
	//
	// If this value is unset, it will be set to +1000 as default.
	OomScoreAdj *int32 `protobuf:"varint,35,opt,name=oomScoreAdj" json:"oomScoreAdj,omitempty"`
	// If omitted, Always is the default
	ImagePullPolicy *ContainerInfo_ImagePullPolicy `protobuf:"varint,36,opt,name=imagePullPolicy,enum=messages.ContainerInfo_ImagePullPolicy" json:"imagePullPolicy,omitempty"`
	// passthrough attributes are an arbitrary set of key / value pairs that are passed from API to executor
	PassthroughAttributes map[string]string `protobuf:"bytes,37,rep,name=passthroughAttributes" json:"passthroughAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Process to be executed inside the container
	Process *ContainerInfo_Process `protobuf:"bytes,38,opt,name=process" json:"process,omitempty"`
	// Used internally by the agent to store information about a running container
	RunState *RunningContainerInfo `protobuf:"bytes,39,opt,name=runState" json:"runState,omitempty"`
	/// (Optional) Amount of shared memory to allocate (must be <= memoryMB)
	ShmSizeMB *uint32 `protobuf:"varint,40,opt,name=shmSizeMB" json:"shmSizeMB,omitempty"`
	/// (Optional) IP address allocation for the task
	SignedAddressAllocation *SignedAddressAllocation `protobuf:"bytes,41,opt,name=signedAddressAllocation" json:"signedAddressAllocation,omitempty"`
	/// Timestamp in epoch millis of when the task's job was Accepted
	JobAcceptedTimestampMs *uint64 `protobuf:"varint,42,opt,name=jobAcceptedTimestampMs" json:"jobAcceptedTimestampMs,omitempty"`
}

// Default values for ContainerInfo fields.
const (
	Default_ContainerInfo_Version = string("latest")
)

func (x *ContainerInfo) Reset() {
	*x = ContainerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo) ProtoMessage() {}

func (x *ContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo.ProtoReflect.Descriptor instead.
func (*ContainerInfo) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{5}
}

func (x *ContainerInfo) GetImageName() string {
	if x != nil && x.ImageName != nil {
		return *x.ImageName
	}
	return ""
}

func (x *ContainerInfo) GetCommand() string {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ""
}

// Deprecated: Do not use.
func (x *ContainerInfo) GetContainerPorts() string {
	if x != nil && x.ContainerPorts != nil {
		return *x.ContainerPorts
	}
	return ""
}

func (x *ContainerInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_ContainerInfo_Version
}

// Deprecated: Do not use.
func (x *ContainerInfo) GetEnvironmentVariable() []*ContainerInfo_EnvironmentVariable {
	if x != nil {
		return x.EnvironmentVariable
	}
	return nil
}

func (x *ContainerInfo) GetJobId() string {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return ""
}

func (x *ContainerInfo) GetLogUploadRegexp() string {
	if x != nil && x.LogUploadRegexp != nil {
		return *x.LogUploadRegexp
	}
	return ""
}

// Deprecated: Do not use.
func (x *ContainerInfo) GetMaxHealthFailures() uint32 {
	if x != nil && x.MaxHealthFailures != nil {
		return *x.MaxHealthFailures
	}
	return 0
}

// Deprecated: Do not use.
func (x *ContainerInfo) GetHealthCheckCmd() []string {
	if x != nil {
		return x.HealthCheckCmd
	}
	return nil
}

// Deprecated: Do not use.
func (x *ContainerInfo) GetSnapshotPolicy() ContainerInfo_SnapshotPolicy {
	if x != nil && x.SnapshotPolicy != nil {
		return *x.SnapshotPolicy
	}
	return ContainerInfo_NEVER
}

// Deprecated: Do not use.
func (x *ContainerInfo) GetEntrypointCmd() []string {
	if x != nil {
		return x.EntrypointCmd
	}
	return nil
}

// Deprecated: Do not use.
func (x *ContainerInfo) GetEntrypointStr() string {
	if x != nil && x.EntrypointStr != nil {
		return *x.EntrypointStr
	}
	return ""
}

func (x *ContainerInfo) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *ContainerInfo) GetJobGroupStack() string {
	if x != nil && x.JobGroupStack != nil {
		return *x.JobGroupStack
	}
	return ""
}

func (x *ContainerInfo) GetJobGroupDetail() string {
	if x != nil && x.JobGroupDetail != nil {
		return *x.JobGroupDetail
	}
	return ""
}

func (x *ContainerInfo) GetIamProfile() string {
	if x != nil && x.IamProfile != nil {
		return *x.IamProfile
	}
	return ""
}

func (x *ContainerInfo) GetNetworkConfigInfo() *ContainerInfo_NetworkConfigInfo {
	if x != nil {
		return x.NetworkConfigInfo
	}
	return nil
}

func (x *ContainerInfo) GetJobGroupSequence() string {
	if x != nil && x.JobGroupSequence != nil {
		return *x.JobGroupSequence
	}
	return ""
}

func (x *ContainerInfo) GetNumGpus() uint32 {
	if x != nil && x.NumGpus != nil {
		return *x.NumGpus
	}
	return 0
}

func (x *ContainerInfo) GetEfsConfigInfo() []*ContainerInfo_EfsConfigInfo {
	if x != nil {
		return x.EfsConfigInfo
	}
	return nil
}

func (x *ContainerInfo) GetCapabilities() *ContainerInfo_Capabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *ContainerInfo) GetMetatronCreds() *ContainerInfo_MetatronCreds {
	if x != nil {
		return x.MetatronCreds
	}
	return nil
}

func (x *ContainerInfo) GetUserProvidedEnv() map[string]string {
	if x != nil {
		return x.UserProvidedEnv
	}
	return nil
}

func (x *ContainerInfo) GetTitusProvidedEnv() map[string]string {
	if x != nil {
		return x.TitusProvidedEnv
	}
	return nil
}

func (x *ContainerInfo) GetImageDigest() string {
	if x != nil && x.ImageDigest != nil {
		return *x.ImageDigest
	}
	return ""
}

func (x *ContainerInfo) GetAllowNetworkBursting() bool {
	if x != nil && x.AllowNetworkBursting != nil {
		return *x.AllowNetworkBursting
	}
	return false
}

func (x *ContainerInfo) GetKillWaitSeconds() uint32 {
	if x != nil && x.KillWaitSeconds != nil {
		return *x.KillWaitSeconds
	}
	return 0
}

func (x *ContainerInfo) GetIgnoreLaunchGuard() bool {
	if x != nil && x.IgnoreLaunchGuard != nil {
		return *x.IgnoreLaunchGuard
	}
	return false
}

func (x *ContainerInfo) GetAllowNestedContainers() bool {
	if x != nil && x.AllowNestedContainers != nil {
		return *x.AllowNestedContainers
	}
	return false
}

func (x *ContainerInfo) GetFullyQualifiedImage() string {
	if x != nil && x.FullyQualifiedImage != nil {
		return *x.FullyQualifiedImage
	}
	return ""
}

func (x *ContainerInfo) GetAllowCpuBursting() bool {
	if x != nil && x.AllowCpuBursting != nil {
		return *x.AllowCpuBursting
	}
	return false
}

func (x *ContainerInfo) GetBatch() bool {
	if x != nil && x.Batch != nil {
		return *x.Batch
	}
	return false
}

func (x *ContainerInfo) GetS3LogLocations() []*ContainerInfo_S3LogLocation {
	if x != nil {
		return x.S3LogLocations
	}
	return nil
}

func (x *ContainerInfo) GetOomScoreAdj() int32 {
	if x != nil && x.OomScoreAdj != nil {
		return *x.OomScoreAdj
	}
	return 0
}

func (x *ContainerInfo) GetImagePullPolicy() ContainerInfo_ImagePullPolicy {
	if x != nil && x.ImagePullPolicy != nil {
		return *x.ImagePullPolicy
	}
	return ContainerInfo_Always
}

func (x *ContainerInfo) GetPassthroughAttributes() map[string]string {
	if x != nil {
		return x.PassthroughAttributes
	}
	return nil
}

func (x *ContainerInfo) GetProcess() *ContainerInfo_Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ContainerInfo) GetRunState() *RunningContainerInfo {
	if x != nil {
		return x.RunState
	}
	return nil
}

func (x *ContainerInfo) GetShmSizeMB() uint32 {
	if x != nil && x.ShmSizeMB != nil {
		return *x.ShmSizeMB
	}
	return 0
}

func (x *ContainerInfo) GetSignedAddressAllocation() *SignedAddressAllocation {
	if x != nil {
		return x.SignedAddressAllocation
	}
	return nil
}

func (x *ContainerInfo) GetJobAcceptedTimestampMs() uint64 {
	if x != nil && x.JobAcceptedTimestampMs != nil {
		return *x.JobAcceptedTimestampMs
	}
	return 0
}

// For the identity client to query the metadata server to confirm the
// currently running task's identity
type TaskIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Current state of the task
	Task *TaskInfo `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
	// (Required) Container details, including:
	//  - app name, stack, detail
	//  - image name, digest, label
	//  - environment variables
	//  - command, entrypoint
	//  - metadata string and signature from caller
	Container *ContainerInfo `protobuf:"bytes,2,opt,name=container" json:"container,omitempty"`
	// (Required) Timestamp, in Unix epoch seconds, when request was made.
	UnixTimestampSec *uint64 `protobuf:"varint,3,opt,name=unixTimestampSec" json:"unixTimestampSec,omitempty"`
	// (Required) IP address of container
	Ipv4Address *string `protobuf:"bytes,4,opt,name=ipv4Address" json:"ipv4Address,omitempty"`
	// (Optional) IPv6 address of container
	Ipv6Address *string `protobuf:"bytes,5,opt,name=ipv6Address" json:"ipv6Address,omitempty"`
}

func (x *TaskIdentity) Reset() {
	*x = TaskIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIdentity) ProtoMessage() {}

func (x *TaskIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIdentity.ProtoReflect.Descriptor instead.
func (*TaskIdentity) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{6}
}

func (x *TaskIdentity) GetTask() *TaskInfo {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskIdentity) GetContainer() *ContainerInfo {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *TaskIdentity) GetUnixTimestampSec() uint64 {
	if x != nil && x.UnixTimestampSec != nil {
		return *x.UnixTimestampSec
	}
	return 0
}

func (x *TaskIdentity) GetIpv4Address() string {
	if x != nil && x.Ipv4Address != nil {
		return *x.Ipv4Address
	}
	return ""
}

func (x *TaskIdentity) GetIpv6Address() string {
	if x != nil && x.Ipv6Address != nil {
		return *x.Ipv6Address
	}
	return ""
}

type CertificateSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Raw signature produced from signing input bytes using the
	// private key of the titus agent’s certificate.
	Signature []byte `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	// (Required) Signature algorithm used (e.g. SHA512withRSAandMGF1)
	Algorithm *SignatureAlgorithm `protobuf:"varint,2,opt,name=algorithm,enum=messages.SignatureAlgorithm" json:"algorithm,omitempty"`
	// (Required) The agent’s public certificate in DER form, followed by its trust chain.
	CertChain [][]byte `protobuf:"bytes,3,rep,name=certChain" json:"certChain,omitempty"`
}

func (x *CertificateSignature) Reset() {
	*x = CertificateSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateSignature) ProtoMessage() {}

func (x *CertificateSignature) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateSignature.ProtoReflect.Descriptor instead.
func (*CertificateSignature) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{7}
}

func (x *CertificateSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CertificateSignature) GetAlgorithm() SignatureAlgorithm {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return SignatureAlgorithm_SHA256withRSAandMGF1
}

func (x *CertificateSignature) GetCertChain() [][]byte {
	if x != nil {
		return x.CertChain
	}
	return nil
}

// Version of CertificateSignature that encodes all byte[]s as human-readable strings
type CertificateStringSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Base64 signature produced from signing input bytes using the
	// private key of the titus agent’s certificate.
	Signature *string `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	// (Required) Signature algorithm used (e.g. SHA512withRSAandMGF1)
	Algorithm *SignatureAlgorithm `protobuf:"varint,2,opt,name=algorithm,enum=messages.SignatureAlgorithm" json:"algorithm,omitempty"`
	// (Required) The agent’s public certificate in DER form, followed by its trust chain.
	CertChain []string `protobuf:"bytes,3,rep,name=certChain" json:"certChain,omitempty"`
}

func (x *CertificateStringSignature) Reset() {
	*x = CertificateStringSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateStringSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateStringSignature) ProtoMessage() {}

func (x *CertificateStringSignature) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateStringSignature.ProtoReflect.Descriptor instead.
func (*CertificateStringSignature) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{8}
}

func (x *CertificateStringSignature) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *CertificateStringSignature) GetAlgorithm() SignatureAlgorithm {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return SignatureAlgorithm_SHA256withRSAandMGF1
}

func (x *CertificateStringSignature) GetCertChain() []string {
	if x != nil {
		return x.CertChain
	}
	return nil
}

type TaskIdentityDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Serialized form of a TaskIdentity protobuf.
	Identity []byte `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	// (Required) Signature produced by signing identity bytes.
	Signature *CertificateSignature `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (x *TaskIdentityDocument) Reset() {
	*x = TaskIdentityDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIdentityDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIdentityDocument) ProtoMessage() {}

func (x *TaskIdentityDocument) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIdentityDocument.ProtoReflect.Descriptor instead.
func (*TaskIdentityDocument) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{9}
}

func (x *TaskIdentityDocument) GetIdentity() []byte {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *TaskIdentityDocument) GetSignature() *CertificateSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Version of TaskIdentityDocument that encodes all byte[]s as human-readable strings
type TaskIdentityStringDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Task Identity
	Identity *TaskIdentity `protobuf:"bytes,1,opt,name=identity" json:"identity,omitempty"`
	// (Required) Signature produced by signing identity bytes.
	Signature *CertificateStringSignature `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
}

func (x *TaskIdentityStringDocument) Reset() {
	*x = TaskIdentityStringDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIdentityStringDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIdentityStringDocument) ProtoMessage() {}

func (x *TaskIdentityStringDocument) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIdentityStringDocument.ProtoReflect.Descriptor instead.
func (*TaskIdentityStringDocument) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{10}
}

func (x *TaskIdentityStringDocument) GetIdentity() *TaskIdentity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *TaskIdentityStringDocument) GetSignature() *CertificateStringSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type TaskInfo_EnvironmentVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *TaskInfo_EnvironmentVariable) Reset() {
	*x = TaskInfo_EnvironmentVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfo_EnvironmentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo_EnvironmentVariable) ProtoMessage() {}

func (x *TaskInfo_EnvironmentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo_EnvironmentVariable.ProtoReflect.Descriptor instead.
func (*TaskInfo_EnvironmentVariable) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TaskInfo_EnvironmentVariable) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TaskInfo_EnvironmentVariable) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// deprecated: use userProvidedEnv and titusProvidedEnv instead
type ContainerInfo_EnvironmentVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *ContainerInfo_EnvironmentVariable) Reset() {
	*x = ContainerInfo_EnvironmentVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo_EnvironmentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo_EnvironmentVariable) ProtoMessage() {}

func (x *ContainerInfo_EnvironmentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo_EnvironmentVariable.ProtoReflect.Descriptor instead.
func (*ContainerInfo_EnvironmentVariable) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ContainerInfo_EnvironmentVariable) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ContainerInfo_EnvironmentVariable) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type ContainerInfo_NetworkConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deprecated: use eniLabel instead
	//
	// Deprecated: Do not use.
	EniLablel *string `protobuf:"bytes,1,req,name=eniLablel" json:"eniLablel,omitempty"`
	// this should be required, but it was added later (typo fix) and is optional for backwards compatibility
	EniLabel           *string  `protobuf:"bytes,5,opt,name=eniLabel" json:"eniLabel,omitempty"`
	SecurityGroups     []string `protobuf:"bytes,3,rep,name=securityGroups" json:"securityGroups,omitempty"`
	BandwidthLimitMbps *uint32  `protobuf:"varint,4,opt,name=bandwidthLimitMbps" json:"bandwidthLimitMbps,omitempty"` // In Mbps
}

func (x *ContainerInfo_NetworkConfigInfo) Reset() {
	*x = ContainerInfo_NetworkConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo_NetworkConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo_NetworkConfigInfo) ProtoMessage() {}

func (x *ContainerInfo_NetworkConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo_NetworkConfigInfo.ProtoReflect.Descriptor instead.
func (*ContainerInfo_NetworkConfigInfo) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{5, 1}
}

// Deprecated: Do not use.
func (x *ContainerInfo_NetworkConfigInfo) GetEniLablel() string {
	if x != nil && x.EniLablel != nil {
		return *x.EniLablel
	}
	return ""
}

func (x *ContainerInfo_NetworkConfigInfo) GetEniLabel() string {
	if x != nil && x.EniLabel != nil {
		return *x.EniLabel
	}
	return ""
}

func (x *ContainerInfo_NetworkConfigInfo) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *ContainerInfo_NetworkConfigInfo) GetBandwidthLimitMbps() uint32 {
	if x != nil && x.BandwidthLimitMbps != nil {
		return *x.BandwidthLimitMbps
	}
	return 0
}

type ContainerInfo_EfsConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EfsFsId               *string                                 `protobuf:"bytes,1,req,name=efsFsId" json:"efsFsId,omitempty"`
	MountPoint            *string                                 `protobuf:"bytes,2,req,name=mountPoint" json:"mountPoint,omitempty"`
	MntPerms              *ContainerInfo_EfsConfigInfo_MountPerms `protobuf:"varint,3,opt,name=mntPerms,enum=messages.ContainerInfo_EfsConfigInfo_MountPerms" json:"mntPerms,omitempty"` // Defaults to first enum value
	EfsFsRelativeMntPoint *string                                 `protobuf:"bytes,4,opt,name=efsFsRelativeMntPoint" json:"efsFsRelativeMntPoint,omitempty"`
}

func (x *ContainerInfo_EfsConfigInfo) Reset() {
	*x = ContainerInfo_EfsConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo_EfsConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo_EfsConfigInfo) ProtoMessage() {}

func (x *ContainerInfo_EfsConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo_EfsConfigInfo.ProtoReflect.Descriptor instead.
func (*ContainerInfo_EfsConfigInfo) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{5, 2}
}

func (x *ContainerInfo_EfsConfigInfo) GetEfsFsId() string {
	if x != nil && x.EfsFsId != nil {
		return *x.EfsFsId
	}
	return ""
}

func (x *ContainerInfo_EfsConfigInfo) GetMountPoint() string {
	if x != nil && x.MountPoint != nil {
		return *x.MountPoint
	}
	return ""
}

func (x *ContainerInfo_EfsConfigInfo) GetMntPerms() ContainerInfo_EfsConfigInfo_MountPerms {
	if x != nil && x.MntPerms != nil {
		return *x.MntPerms
	}
	return ContainerInfo_EfsConfigInfo_RW
}

func (x *ContainerInfo_EfsConfigInfo) GetEfsFsRelativeMntPoint() string {
	if x != nil && x.EfsFsRelativeMntPoint != nil {
		return *x.EfsFsRelativeMntPoint
	}
	return ""
}

type ContainerInfo_Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Add  []ContainerInfo_Capabilities_Capability `protobuf:"varint,1,rep,name=add,enum=messages.ContainerInfo_Capabilities_Capability" json:"add,omitempty"`
	Drop []ContainerInfo_Capabilities_Capability `protobuf:"varint,2,rep,name=drop,enum=messages.ContainerInfo_Capabilities_Capability" json:"drop,omitempty"`
}

func (x *ContainerInfo_Capabilities) Reset() {
	*x = ContainerInfo_Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo_Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo_Capabilities) ProtoMessage() {}

func (x *ContainerInfo_Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo_Capabilities.ProtoReflect.Descriptor instead.
func (*ContainerInfo_Capabilities) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{5, 3}
}

func (x *ContainerInfo_Capabilities) GetAdd() []ContainerInfo_Capabilities_Capability {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *ContainerInfo_Capabilities) GetDrop() []ContainerInfo_Capabilities_Capability {
	if x != nil {
		return x.Drop
	}
	return nil
}

type ContainerInfo_MetatronCreds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppMetadata *string `protobuf:"bytes,1,req,name=appMetadata" json:"appMetadata,omitempty"` // An encoded description of the task's job metadata
	MetadataSig *string `protobuf:"bytes,2,req,name=metadataSig" json:"metadataSig,omitempty"` // An encoded description of the metadata signature
}

func (x *ContainerInfo_MetatronCreds) Reset() {
	*x = ContainerInfo_MetatronCreds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo_MetatronCreds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo_MetatronCreds) ProtoMessage() {}

func (x *ContainerInfo_MetatronCreds) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo_MetatronCreds.ProtoReflect.Descriptor instead.
func (*ContainerInfo_MetatronCreds) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{5, 4}
}

func (x *ContainerInfo_MetatronCreds) GetAppMetadata() string {
	if x != nil && x.AppMetadata != nil {
		return *x.AppMetadata
	}
	return ""
}

func (x *ContainerInfo_MetatronCreds) GetMetadataSig() string {
	if x != nil && x.MetadataSig != nil {
		return *x.MetadataSig
	}
	return ""
}

// The s3 log location used when uploading logs
type ContainerInfo_S3LogLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket *string `protobuf:"bytes,1,req,name=bucket" json:"bucket,omitempty"` // The bucket to use for all uploads
	Prefix *string `protobuf:"bytes,2,req,name=prefix" json:"prefix,omitempty"` // The prefix to use for all object keys. e.g. foo/bar
}

func (x *ContainerInfo_S3LogLocation) Reset() {
	*x = ContainerInfo_S3LogLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo_S3LogLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo_S3LogLocation) ProtoMessage() {}

func (x *ContainerInfo_S3LogLocation) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo_S3LogLocation.ProtoReflect.Descriptor instead.
func (*ContainerInfo_S3LogLocation) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{5, 7}
}

func (x *ContainerInfo_S3LogLocation) GetBucket() string {
	if x != nil && x.Bucket != nil {
		return *x.Bucket
	}
	return ""
}

func (x *ContainerInfo_S3LogLocation) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

// entrypoint and command follow Docker semantics, and can be used to override what is baked into the Docker image:
// https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact
//
// Both CMD and ENTRYPOINT baked into the image can be explicitly cleared with a single empty value (i.e.: `[""]`).
type ContainerInfo_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// when set, will override ENTRYPOINT baked into the image, and cause CMD from the image to be ignored
	Entrypoint []string `protobuf:"bytes,1,rep,name=entrypoint" json:"entrypoint,omitempty"`
	// when set, will override CMD baked into the image
	Command []string `protobuf:"bytes,2,rep,name=command" json:"command,omitempty"`
}

func (x *ContainerInfo_Process) Reset() {
	*x = ContainerInfo_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_agent_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo_Process) ProtoMessage() {}

func (x *ContainerInfo_Process) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_agent_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo_Process.ProtoReflect.Descriptor instead.
func (*ContainerInfo_Process) Descriptor() ([]byte, []int) {
	return file_netflix_titus_agent_proto_rawDescGZIP(), []int{5, 9}
}

func (x *ContainerInfo_Process) GetEntrypoint() []string {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *ContainerInfo_Process) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

var File_netflix_titus_agent_proto protoreflect.FileDescriptor

var file_netflix_titus_agent_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2f, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x1e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2f, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2f, 0x74, 0x69, 0x74, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x6b, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x47, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x92, 0x03, 0x0a, 0x08,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x13, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x1a,
	0x3f, 0x0a, 0x13, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x2e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02,
	0x22, 0x78, 0x0a, 0x14, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x63, 0x22, 0xc2, 0x1f, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x13, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x13, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c,
	0x6f, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x30, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6d, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6d, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6d, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6d,
	0x64, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a, 0x6f,
	0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x6a,
	0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10,
	0x6a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x47,
	0x70, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x47, 0x70,
	0x75, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x65, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x45, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0d, 0x65, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x48, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x65, 0x74,
	0x61, 0x74, 0x72, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x74, 0x72,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x73, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x12, 0x59,
	0x0a, 0x10, 0x74, 0x69, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x45,
	0x6e, 0x76, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x54, 0x69, 0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x45,
	0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x74, 0x69, 0x74, 0x75, 0x73, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x75, 0x72, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x75, 0x72, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x28, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x57, 0x61,
	0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x47, 0x75, 0x61, 0x72, 0x64, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x47, 0x75, 0x61, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x75, 0x6c, 0x6c,
	0x79, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x70, 0x75, 0x42, 0x75, 0x72, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x43, 0x70, 0x75, 0x42, 0x75, 0x72, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x33, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x33, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x73, 0x33, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41,
	0x64, 0x6a, 0x12, 0x51, 0x0a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x68, 0x0a, 0x15, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61,
	0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x39, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x75,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x75,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6d, 0x53, 0x69, 0x7a,
	0x65, 0x4d, 0x42, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x68, 0x6d, 0x53, 0x69,
	0x7a, 0x65, 0x4d, 0x42, 0x12, 0x64, 0x0a, 0x17, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x17, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x6a, 0x6f,
	0x62, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4d, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6a, 0x6f, 0x62, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x73, 0x1a, 0x3f, 0x0a, 0x13, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xa9, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x6e, 0x69,
	0x4c, 0x61, 0x62, 0x6c, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x09, 0x65, 0x6e, 0x69, 0x4c, 0x61, 0x62, 0x6c, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x69, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x69, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4d, 0x62, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x62, 0x70, 0x73, 0x1a,
	0xf3, 0x01, 0x0a, 0x0d, 0x45, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x66, 0x73, 0x46, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x66, 0x73, 0x46, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x6d,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x52,
	0x08, 0x6d, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x66, 0x73,
	0x46, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6e, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x66, 0x73, 0x46, 0x73, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0x24, 0x0a, 0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x06, 0x0a,
	0x02, 0x52, 0x57, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x4f, 0x10, 0x02, 0x12, 0x06, 0x0a,
	0x02, 0x57, 0x4f, 0x10, 0x03, 0x1a, 0xe9, 0x05, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x72, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x22, 0xd0,
	0x04, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x48, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x41, 0x43, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x41,
	0x43, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x53, 0x45, 0x54, 0x49, 0x44, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49, 0x4c, 0x4c, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x54, 0x47, 0x49, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x45, 0x54, 0x55, 0x49, 0x44, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x54,
	0x50, 0x43, 0x41, 0x50, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f,
	0x49, 0x4d, 0x4d, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x4e,
	0x45, 0x54, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x54, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41,
	0x53, 0x54, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x0d,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x50, 0x43, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x0e, 0x12, 0x0d,
	0x0a, 0x09, 0x49, 0x50, 0x43, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x10, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x59, 0x53, 0x5f, 0x52, 0x41, 0x57, 0x49, 0x4f, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x59, 0x53, 0x5f, 0x43, 0x48, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x59, 0x53, 0x5f, 0x50, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x59, 0x53, 0x5f, 0x50, 0x41, 0x43, 0x43, 0x54, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x59, 0x53, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x59,
	0x53, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x16, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x59, 0x53, 0x5f,
	0x4e, 0x49, 0x43, 0x45, 0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x18, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x59, 0x53, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x19, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x53, 0x5f, 0x54, 0x54,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x1a, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4b,
	0x4e, 0x4f, 0x44, 0x10, 0x1b, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x1c,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10,
	0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x10, 0x1e, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x54, 0x46, 0x43, 0x41, 0x50, 0x10,
	0x1f, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44,
	0x45, 0x10, 0x20, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x10, 0x21, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x10, 0x22, 0x12, 0x0e,
	0x0a, 0x0a, 0x57, 0x41, 0x4b, 0x45, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x10, 0x23, 0x12, 0x11,
	0x0a, 0x0d, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10,
	0x24, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10,
	0x25, 0x1a, 0x53, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x69, 0x67, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x69, 0x67, 0x1a, 0x42, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x54, 0x69,
	0x74, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x45, 0x6e, 0x76, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x0d, 0x53, 0x33, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x1a, 0x48, 0x0a, 0x1a, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0x49, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x03, 0x22, 0x43, 0x0a, 0x0f, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x66, 0x4e,
	0x6f, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x66, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x22,
	0xdd, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x26, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x8e, 0x01, 0x0a, 0x14, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x22, 0x94, 0x01, 0x0a, 0x1a, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65,
	0x72, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x70, 0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x1a, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2a, 0xa1, 0x01, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x48, 0x41, 0x32, 0x35,
	0x36, 0x77, 0x69, 0x74, 0x68, 0x52, 0x53, 0x41, 0x61, 0x6e, 0x64, 0x4d, 0x47, 0x46, 0x31, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x77, 0x69, 0x74, 0x68, 0x52,
	0x53, 0x41, 0x61, 0x6e, 0x64, 0x4d, 0x47, 0x46, 0x31, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x48, 0x41, 0x35, 0x31, 0x32, 0x77, 0x69, 0x74, 0x68, 0x52, 0x53, 0x41, 0x61, 0x6e, 0x64, 0x4d,
	0x47, 0x46, 0x31, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x77,
	0x69, 0x74, 0x68, 0x45, 0x43, 0x44, 0x53, 0x41, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x48,
	0x41, 0x33, 0x38, 0x34, 0x77, 0x69, 0x74, 0x68, 0x45, 0x43, 0x44, 0x53, 0x41, 0x10, 0x04, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x77, 0x69, 0x74, 0x68, 0x45, 0x43, 0x44,
	0x53, 0x41, 0x10, 0x05, 0x42, 0x30, 0x0a, 0x1a, 0x69, 0x6f, 0x2e, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x42, 0x0b, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a,
	0x05, 0x74, 0x69, 0x74, 0x75, 0x73,
}

var (
	file_netflix_titus_agent_proto_rawDescOnce sync.Once
	file_netflix_titus_agent_proto_rawDescData = file_netflix_titus_agent_proto_rawDesc
)

func file_netflix_titus_agent_proto_rawDescGZIP() []byte {
	file_netflix_titus_agent_proto_rawDescOnce.Do(func() {
		file_netflix_titus_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_netflix_titus_agent_proto_rawDescData)
	})
	return file_netflix_titus_agent_proto_rawDescData
}

var file_netflix_titus_agent_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_netflix_titus_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_netflix_titus_agent_proto_goTypes = []interface{}{
	(SignatureAlgorithm)(0),                     // 0: messages.SignatureAlgorithm
	(TaskInfo_Status)(0),                        // 1: messages.TaskInfo.Status
	(ContainerInfo_SnapshotPolicy)(0),           // 2: messages.ContainerInfo.SnapshotPolicy
	(ContainerInfo_ImagePullPolicy)(0),          // 3: messages.ContainerInfo.ImagePullPolicy
	(ContainerInfo_EfsConfigInfo_MountPerms)(0), // 4: messages.ContainerInfo.EfsConfigInfo.MountPerms
	(ContainerInfo_Capabilities_Capability)(0),  // 5: messages.ContainerInfo.Capabilities.Capability
	(*TaskStatusData)(nil),                      // 6: messages.TaskStatusData
	(*StateUpdate)(nil),                         // 7: messages.StateUpdate
	(*StateUpdates)(nil),                        // 8: messages.StateUpdates
	(*TaskInfo)(nil),                            // 9: messages.TaskInfo
	(*RunningContainerInfo)(nil),                // 10: messages.RunningContainerInfo
	(*ContainerInfo)(nil),                       // 11: messages.ContainerInfo
	(*TaskIdentity)(nil),                        // 12: messages.TaskIdentity
	(*CertificateSignature)(nil),                // 13: messages.CertificateSignature
	(*CertificateStringSignature)(nil),          // 14: messages.CertificateStringSignature
	(*TaskIdentityDocument)(nil),                // 15: messages.TaskIdentityDocument
	(*TaskIdentityStringDocument)(nil),          // 16: messages.TaskIdentityStringDocument
	(*TaskInfo_EnvironmentVariable)(nil),        // 17: messages.TaskInfo.EnvironmentVariable
	(*ContainerInfo_EnvironmentVariable)(nil),   // 18: messages.ContainerInfo.EnvironmentVariable
	(*ContainerInfo_NetworkConfigInfo)(nil),     // 19: messages.ContainerInfo.NetworkConfigInfo
	(*ContainerInfo_EfsConfigInfo)(nil),         // 20: messages.ContainerInfo.EfsConfigInfo
	(*ContainerInfo_Capabilities)(nil),          // 21: messages.ContainerInfo.Capabilities
	(*ContainerInfo_MetatronCreds)(nil),         // 22: messages.ContainerInfo.MetatronCreds
	nil,                                         // 23: messages.ContainerInfo.UserProvidedEnvEntry
	nil,                                         // 24: messages.ContainerInfo.TitusProvidedEnvEntry
	(*ContainerInfo_S3LogLocation)(nil),         // 25: messages.ContainerInfo.S3LogLocation
	nil,                                         // 26: messages.ContainerInfo.PassthroughAttributesEntry
	(*ContainerInfo_Process)(nil),               // 27: messages.ContainerInfo.Process
	(*SignedAddressAllocation)(nil),             // 28: com.netflix.titus.SignedAddressAllocation
}
var file_netflix_titus_agent_proto_depIdxs = []int32{
	7,  // 0: messages.StateUpdates.stateUpdate:type_name -> messages.StateUpdate
	1,  // 1: messages.TaskInfo.status:type_name -> messages.TaskInfo.Status
	17, // 2: messages.TaskInfo.environmentVariable:type_name -> messages.TaskInfo.EnvironmentVariable
	18, // 3: messages.ContainerInfo.environmentVariable:type_name -> messages.ContainerInfo.EnvironmentVariable
	2,  // 4: messages.ContainerInfo.snapshotPolicy:type_name -> messages.ContainerInfo.SnapshotPolicy
	19, // 5: messages.ContainerInfo.networkConfigInfo:type_name -> messages.ContainerInfo.NetworkConfigInfo
	20, // 6: messages.ContainerInfo.efsConfigInfo:type_name -> messages.ContainerInfo.EfsConfigInfo
	21, // 7: messages.ContainerInfo.capabilities:type_name -> messages.ContainerInfo.Capabilities
	22, // 8: messages.ContainerInfo.metatronCreds:type_name -> messages.ContainerInfo.MetatronCreds
	23, // 9: messages.ContainerInfo.userProvidedEnv:type_name -> messages.ContainerInfo.UserProvidedEnvEntry
	24, // 10: messages.ContainerInfo.titusProvidedEnv:type_name -> messages.ContainerInfo.TitusProvidedEnvEntry
	25, // 11: messages.ContainerInfo.s3LogLocations:type_name -> messages.ContainerInfo.S3LogLocation
	3,  // 12: messages.ContainerInfo.imagePullPolicy:type_name -> messages.ContainerInfo.ImagePullPolicy
	26, // 13: messages.ContainerInfo.passthroughAttributes:type_name -> messages.ContainerInfo.PassthroughAttributesEntry
	27, // 14: messages.ContainerInfo.process:type_name -> messages.ContainerInfo.Process
	10, // 15: messages.ContainerInfo.runState:type_name -> messages.RunningContainerInfo
	28, // 16: messages.ContainerInfo.signedAddressAllocation:type_name -> com.netflix.titus.SignedAddressAllocation
	9,  // 17: messages.TaskIdentity.task:type_name -> messages.TaskInfo
	11, // 18: messages.TaskIdentity.container:type_name -> messages.ContainerInfo
	0,  // 19: messages.CertificateSignature.algorithm:type_name -> messages.SignatureAlgorithm
	0,  // 20: messages.CertificateStringSignature.algorithm:type_name -> messages.SignatureAlgorithm
	13, // 21: messages.TaskIdentityDocument.signature:type_name -> messages.CertificateSignature
	12, // 22: messages.TaskIdentityStringDocument.identity:type_name -> messages.TaskIdentity
	14, // 23: messages.TaskIdentityStringDocument.signature:type_name -> messages.CertificateStringSignature
	4,  // 24: messages.ContainerInfo.EfsConfigInfo.mntPerms:type_name -> messages.ContainerInfo.EfsConfigInfo.MountPerms
	5,  // 25: messages.ContainerInfo.Capabilities.add:type_name -> messages.ContainerInfo.Capabilities.Capability
	5,  // 26: messages.ContainerInfo.Capabilities.drop:type_name -> messages.ContainerInfo.Capabilities.Capability
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_netflix_titus_agent_proto_init() }
func file_netflix_titus_agent_proto_init() {
	if File_netflix_titus_agent_proto != nil {
		return
	}
	file_netflix_titus_titus_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_netflix_titus_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatusData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunningContainerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateStringSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIdentityDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIdentityStringDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfo_EnvironmentVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo_EnvironmentVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo_NetworkConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo_EfsConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo_Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo_MetatronCreds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo_S3LogLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_agent_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_netflix_titus_agent_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_netflix_titus_agent_proto_goTypes,
		DependencyIndexes: file_netflix_titus_agent_proto_depIdxs,
		EnumInfos:         file_netflix_titus_agent_proto_enumTypes,
		MessageInfos:      file_netflix_titus_agent_proto_msgTypes,
	}.Build()
	File_netflix_titus_agent_proto = out.File
	file_netflix_titus_agent_proto_rawDesc = nil
	file_netflix_titus_agent_proto_goTypes = nil
	file_netflix_titus_agent_proto_depIdxs = nil
}

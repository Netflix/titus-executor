// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: netflix/titus/agent.proto

/*
	Package titus is a generated protocol buffer package.

	It is generated from these files:
		netflix/titus/agent.proto

	It has these top-level messages:
		TaskStatusData
		StateUpdate
		StateUpdates
		TaskInfo
		ContainerInfo
*/
package titus

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TaskInfo_Status int32

const (
	TaskInfo_RUNNING TaskInfo_Status = 0
	TaskInfo_FAILED  TaskInfo_Status = 1
	TaskInfo_STOPPED TaskInfo_Status = 2
)

var TaskInfo_Status_name = map[int32]string{
	0: "RUNNING",
	1: "FAILED",
	2: "STOPPED",
}
var TaskInfo_Status_value = map[string]int32{
	"RUNNING": 0,
	"FAILED":  1,
	"STOPPED": 2,
}

func (x TaskInfo_Status) Enum() *TaskInfo_Status {
	p := new(TaskInfo_Status)
	*p = x
	return p
}
func (x TaskInfo_Status) String() string {
	return proto.EnumName(TaskInfo_Status_name, int32(x))
}
func (x *TaskInfo_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TaskInfo_Status_value, data, "TaskInfo_Status")
	if err != nil {
		return err
	}
	*x = TaskInfo_Status(value)
	return nil
}
func (TaskInfo_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorAgent, []int{3, 0} }

type ContainerInfo_SnapshotPolicy int32

const (
	ContainerInfo_NEVER        ContainerInfo_SnapshotPolicy = 0
	ContainerInfo_ERROR_ONLY   ContainerInfo_SnapshotPolicy = 1
	ContainerInfo_SUCCESS_ONLY ContainerInfo_SnapshotPolicy = 2
	ContainerInfo_ALWAYS       ContainerInfo_SnapshotPolicy = 3
)

var ContainerInfo_SnapshotPolicy_name = map[int32]string{
	0: "NEVER",
	1: "ERROR_ONLY",
	2: "SUCCESS_ONLY",
	3: "ALWAYS",
}
var ContainerInfo_SnapshotPolicy_value = map[string]int32{
	"NEVER":        0,
	"ERROR_ONLY":   1,
	"SUCCESS_ONLY": 2,
	"ALWAYS":       3,
}

func (x ContainerInfo_SnapshotPolicy) Enum() *ContainerInfo_SnapshotPolicy {
	p := new(ContainerInfo_SnapshotPolicy)
	*p = x
	return p
}
func (x ContainerInfo_SnapshotPolicy) String() string {
	return proto.EnumName(ContainerInfo_SnapshotPolicy_name, int32(x))
}
func (x *ContainerInfo_SnapshotPolicy) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContainerInfo_SnapshotPolicy_value, data, "ContainerInfo_SnapshotPolicy")
	if err != nil {
		return err
	}
	*x = ContainerInfo_SnapshotPolicy(value)
	return nil
}
func (ContainerInfo_SnapshotPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAgent, []int{4, 0}
}

type ContainerInfo_EfsConfigInfo_MountPerms int32

const (
	ContainerInfo_EfsConfigInfo_RW ContainerInfo_EfsConfigInfo_MountPerms = 1
	ContainerInfo_EfsConfigInfo_RO ContainerInfo_EfsConfigInfo_MountPerms = 2
	ContainerInfo_EfsConfigInfo_WO ContainerInfo_EfsConfigInfo_MountPerms = 3
)

var ContainerInfo_EfsConfigInfo_MountPerms_name = map[int32]string{
	1: "RW",
	2: "RO",
	3: "WO",
}
var ContainerInfo_EfsConfigInfo_MountPerms_value = map[string]int32{
	"RW": 1,
	"RO": 2,
	"WO": 3,
}

func (x ContainerInfo_EfsConfigInfo_MountPerms) Enum() *ContainerInfo_EfsConfigInfo_MountPerms {
	p := new(ContainerInfo_EfsConfigInfo_MountPerms)
	*p = x
	return p
}
func (x ContainerInfo_EfsConfigInfo_MountPerms) String() string {
	return proto.EnumName(ContainerInfo_EfsConfigInfo_MountPerms_name, int32(x))
}
func (x *ContainerInfo_EfsConfigInfo_MountPerms) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContainerInfo_EfsConfigInfo_MountPerms_value, data, "ContainerInfo_EfsConfigInfo_MountPerms")
	if err != nil {
		return err
	}
	*x = ContainerInfo_EfsConfigInfo_MountPerms(value)
	return nil
}
func (ContainerInfo_EfsConfigInfo_MountPerms) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAgent, []int{4, 2, 0}
}

// Taken from include/uapi/linux/capability.h
// #define _LINUX_CAPABILITY_VERSION_3  0x20080522
type ContainerInfo_Capabilities_Capability int32

const (
	ContainerInfo_Capabilities_CHOWN            ContainerInfo_Capabilities_Capability = 0
	ContainerInfo_Capabilities_DAC_OVERRIDE     ContainerInfo_Capabilities_Capability = 1
	ContainerInfo_Capabilities_DAC_READ_SEARCH  ContainerInfo_Capabilities_Capability = 2
	ContainerInfo_Capabilities_FOWNER           ContainerInfo_Capabilities_Capability = 3
	ContainerInfo_Capabilities_FSETID           ContainerInfo_Capabilities_Capability = 4
	ContainerInfo_Capabilities_KILL             ContainerInfo_Capabilities_Capability = 5
	ContainerInfo_Capabilities_SETGID           ContainerInfo_Capabilities_Capability = 6
	ContainerInfo_Capabilities_SETUID           ContainerInfo_Capabilities_Capability = 7
	ContainerInfo_Capabilities_SETPCAP          ContainerInfo_Capabilities_Capability = 8
	ContainerInfo_Capabilities_LINUX_IMMUTABLE  ContainerInfo_Capabilities_Capability = 9
	ContainerInfo_Capabilities_NET_BIND_SERVICE ContainerInfo_Capabilities_Capability = 10
	ContainerInfo_Capabilities_NET_BROADCAST    ContainerInfo_Capabilities_Capability = 11
	ContainerInfo_Capabilities_NET_ADMIN        ContainerInfo_Capabilities_Capability = 12
	ContainerInfo_Capabilities_NET_RAW          ContainerInfo_Capabilities_Capability = 13
	ContainerInfo_Capabilities_IPC_LOCK         ContainerInfo_Capabilities_Capability = 14
	ContainerInfo_Capabilities_IPC_OWNER        ContainerInfo_Capabilities_Capability = 15
	ContainerInfo_Capabilities_SYS_MODULE       ContainerInfo_Capabilities_Capability = 16
	ContainerInfo_Capabilities_SYS_RAWIO        ContainerInfo_Capabilities_Capability = 17
	ContainerInfo_Capabilities_SYS_CHROOT       ContainerInfo_Capabilities_Capability = 18
	ContainerInfo_Capabilities_SYS_PTRACE       ContainerInfo_Capabilities_Capability = 19
	ContainerInfo_Capabilities_SYS_PACCT        ContainerInfo_Capabilities_Capability = 20
	ContainerInfo_Capabilities_SYS_ADMIN        ContainerInfo_Capabilities_Capability = 21
	ContainerInfo_Capabilities_SYS_BOOT         ContainerInfo_Capabilities_Capability = 22
	ContainerInfo_Capabilities_SYS_NICE         ContainerInfo_Capabilities_Capability = 23
	ContainerInfo_Capabilities_SYS_RESOURCE     ContainerInfo_Capabilities_Capability = 24
	ContainerInfo_Capabilities_SYS_TIME         ContainerInfo_Capabilities_Capability = 25
	ContainerInfo_Capabilities_SYS_TTY_CONFIG   ContainerInfo_Capabilities_Capability = 26
	ContainerInfo_Capabilities_MKNOD            ContainerInfo_Capabilities_Capability = 27
	ContainerInfo_Capabilities_LEASE            ContainerInfo_Capabilities_Capability = 28
	ContainerInfo_Capabilities_AUDIT_WRITE      ContainerInfo_Capabilities_Capability = 29
	ContainerInfo_Capabilities_AUDIT_CONTROL    ContainerInfo_Capabilities_Capability = 30
	ContainerInfo_Capabilities_SETFCAP          ContainerInfo_Capabilities_Capability = 31
	ContainerInfo_Capabilities_MAC_OVERRIDE     ContainerInfo_Capabilities_Capability = 32
	ContainerInfo_Capabilities_MAC_ADMIN        ContainerInfo_Capabilities_Capability = 33
	ContainerInfo_Capabilities_SYSLOG           ContainerInfo_Capabilities_Capability = 34
	ContainerInfo_Capabilities_WAKE_ALARM       ContainerInfo_Capabilities_Capability = 35
	ContainerInfo_Capabilities_BLOCK_SUSPEND    ContainerInfo_Capabilities_Capability = 36
	ContainerInfo_Capabilities_AUDIT_READ       ContainerInfo_Capabilities_Capability = 37
)

var ContainerInfo_Capabilities_Capability_name = map[int32]string{
	0:  "CHOWN",
	1:  "DAC_OVERRIDE",
	2:  "DAC_READ_SEARCH",
	3:  "FOWNER",
	4:  "FSETID",
	5:  "KILL",
	6:  "SETGID",
	7:  "SETUID",
	8:  "SETPCAP",
	9:  "LINUX_IMMUTABLE",
	10: "NET_BIND_SERVICE",
	11: "NET_BROADCAST",
	12: "NET_ADMIN",
	13: "NET_RAW",
	14: "IPC_LOCK",
	15: "IPC_OWNER",
	16: "SYS_MODULE",
	17: "SYS_RAWIO",
	18: "SYS_CHROOT",
	19: "SYS_PTRACE",
	20: "SYS_PACCT",
	21: "SYS_ADMIN",
	22: "SYS_BOOT",
	23: "SYS_NICE",
	24: "SYS_RESOURCE",
	25: "SYS_TIME",
	26: "SYS_TTY_CONFIG",
	27: "MKNOD",
	28: "LEASE",
	29: "AUDIT_WRITE",
	30: "AUDIT_CONTROL",
	31: "SETFCAP",
	32: "MAC_OVERRIDE",
	33: "MAC_ADMIN",
	34: "SYSLOG",
	35: "WAKE_ALARM",
	36: "BLOCK_SUSPEND",
	37: "AUDIT_READ",
}
var ContainerInfo_Capabilities_Capability_value = map[string]int32{
	"CHOWN":            0,
	"DAC_OVERRIDE":     1,
	"DAC_READ_SEARCH":  2,
	"FOWNER":           3,
	"FSETID":           4,
	"KILL":             5,
	"SETGID":           6,
	"SETUID":           7,
	"SETPCAP":          8,
	"LINUX_IMMUTABLE":  9,
	"NET_BIND_SERVICE": 10,
	"NET_BROADCAST":    11,
	"NET_ADMIN":        12,
	"NET_RAW":          13,
	"IPC_LOCK":         14,
	"IPC_OWNER":        15,
	"SYS_MODULE":       16,
	"SYS_RAWIO":        17,
	"SYS_CHROOT":       18,
	"SYS_PTRACE":       19,
	"SYS_PACCT":        20,
	"SYS_ADMIN":        21,
	"SYS_BOOT":         22,
	"SYS_NICE":         23,
	"SYS_RESOURCE":     24,
	"SYS_TIME":         25,
	"SYS_TTY_CONFIG":   26,
	"MKNOD":            27,
	"LEASE":            28,
	"AUDIT_WRITE":      29,
	"AUDIT_CONTROL":    30,
	"SETFCAP":          31,
	"MAC_OVERRIDE":     32,
	"MAC_ADMIN":        33,
	"SYSLOG":           34,
	"WAKE_ALARM":       35,
	"BLOCK_SUSPEND":    36,
	"AUDIT_READ":       37,
}

func (x ContainerInfo_Capabilities_Capability) Enum() *ContainerInfo_Capabilities_Capability {
	p := new(ContainerInfo_Capabilities_Capability)
	*p = x
	return p
}
func (x ContainerInfo_Capabilities_Capability) String() string {
	return proto.EnumName(ContainerInfo_Capabilities_Capability_name, int32(x))
}
func (x *ContainerInfo_Capabilities_Capability) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ContainerInfo_Capabilities_Capability_value, data, "ContainerInfo_Capabilities_Capability")
	if err != nil {
		return err
	}
	*x = ContainerInfo_Capabilities_Capability(value)
	return nil
}
func (ContainerInfo_Capabilities_Capability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorAgent, []int{4, 3, 0}
}

type TaskStatusData struct {
	Timestamp        *int64 `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TaskStatusData) Reset()                    { *m = TaskStatusData{} }
func (m *TaskStatusData) String() string            { return proto.CompactTextString(m) }
func (*TaskStatusData) ProtoMessage()               {}
func (*TaskStatusData) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{0} }

func (m *TaskStatusData) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type StateUpdate struct {
	Id               *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	State            *string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Message          *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Timestamp        *string `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StateUpdate) Reset()                    { *m = StateUpdate{} }
func (m *StateUpdate) String() string            { return proto.CompactTextString(m) }
func (*StateUpdate) ProtoMessage()               {}
func (*StateUpdate) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{1} }

func (m *StateUpdate) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *StateUpdate) GetState() string {
	if m != nil && m.State != nil {
		return *m.State
	}
	return ""
}

func (m *StateUpdate) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *StateUpdate) GetTimestamp() string {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return ""
}

type StateUpdates struct {
	StateUpdate      []*StateUpdate `protobuf:"bytes,1,rep,name=stateUpdate" json:"stateUpdate,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *StateUpdates) Reset()                    { *m = StateUpdates{} }
func (m *StateUpdates) String() string            { return proto.CompactTextString(m) }
func (*StateUpdates) ProtoMessage()               {}
func (*StateUpdates) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{2} }

func (m *StateUpdates) GetStateUpdate() []*StateUpdate {
	if m != nil {
		return m.StateUpdate
	}
	return nil
}

type TaskInfo struct {
	ContainerId         *string                         `protobuf:"bytes,1,opt,name=containerId" json:"containerId,omitempty"`
	TaskId              *string                         `protobuf:"bytes,2,opt,name=taskId" json:"taskId,omitempty"`
	HostName            *string                         `protobuf:"bytes,3,opt,name=hostName" json:"hostName,omitempty"`
	SlaveId             *string                         `protobuf:"bytes,4,opt,name=slaveId" json:"slaveId,omitempty"`
	Status              *TaskInfo_Status                `protobuf:"varint,5,opt,name=status,enum=messages.TaskInfo_Status" json:"status,omitempty"`
	Message             *string                         `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	EnvironmentVariable []*TaskInfo_EnvironmentVariable `protobuf:"bytes,7,rep,name=environmentVariable" json:"environmentVariable,omitempty"`
	XXX_unrecognized    []byte                          `json:"-"`
}

func (m *TaskInfo) Reset()                    { *m = TaskInfo{} }
func (m *TaskInfo) String() string            { return proto.CompactTextString(m) }
func (*TaskInfo) ProtoMessage()               {}
func (*TaskInfo) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{3} }

func (m *TaskInfo) GetContainerId() string {
	if m != nil && m.ContainerId != nil {
		return *m.ContainerId
	}
	return ""
}

func (m *TaskInfo) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *TaskInfo) GetHostName() string {
	if m != nil && m.HostName != nil {
		return *m.HostName
	}
	return ""
}

func (m *TaskInfo) GetSlaveId() string {
	if m != nil && m.SlaveId != nil {
		return *m.SlaveId
	}
	return ""
}

func (m *TaskInfo) GetStatus() TaskInfo_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return TaskInfo_RUNNING
}

func (m *TaskInfo) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *TaskInfo) GetEnvironmentVariable() []*TaskInfo_EnvironmentVariable {
	if m != nil {
		return m.EnvironmentVariable
	}
	return nil
}

type TaskInfo_EnvironmentVariable struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TaskInfo_EnvironmentVariable) Reset()         { *m = TaskInfo_EnvironmentVariable{} }
func (m *TaskInfo_EnvironmentVariable) String() string { return proto.CompactTextString(m) }
func (*TaskInfo_EnvironmentVariable) ProtoMessage()    {}
func (*TaskInfo_EnvironmentVariable) Descriptor() ([]byte, []int) {
	return fileDescriptorAgent, []int{3, 0}
}

func (m *TaskInfo_EnvironmentVariable) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TaskInfo_EnvironmentVariable) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type ContainerInfo struct {
	ImageName      *string `protobuf:"bytes,1,opt,name=imageName" json:"imageName,omitempty"`
	Command        *string `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	ContainerPorts *string `protobuf:"bytes,3,opt,name=containerPorts" json:"containerPorts,omitempty"`
	Version        *string `protobuf:"bytes,4,opt,name=version,def=latest" json:"version,omitempty"`
	// deprecated: use userProvidedEnv and titusProvidedEnv instead
	EnvironmentVariable []*ContainerInfo_EnvironmentVariable `protobuf:"bytes,5,rep,name=environmentVariable" json:"environmentVariable,omitempty"`
	JobId               *string                              `protobuf:"bytes,6,opt,name=jobId" json:"jobId,omitempty"`
	LogUploadRegexp     *string                              `protobuf:"bytes,7,opt,name=logUploadRegexp" json:"logUploadRegexp,omitempty"`
	MaxHealthFailures   *uint32                              `protobuf:"varint,8,opt,name=maxHealthFailures" json:"maxHealthFailures,omitempty"`
	HealthCheckCmd      []string                             `protobuf:"bytes,9,rep,name=healthCheckCmd" json:"healthCheckCmd,omitempty"`
	SnapshotPolicy      *ContainerInfo_SnapshotPolicy        `protobuf:"varint,10,opt,name=snapshotPolicy,enum=messages.ContainerInfo_SnapshotPolicy" json:"snapshotPolicy,omitempty"`
	EntrypointCmd       []string                             `protobuf:"bytes,11,rep,name=entrypointCmd" json:"entrypointCmd,omitempty"`
	AllocateIpAddress   *bool                                `protobuf:"varint,12,opt,name=allocateIpAddress,def=0" json:"allocateIpAddress,omitempty"`
	EntrypointStr       *string                              `protobuf:"bytes,13,opt,name=entrypointStr" json:"entrypointStr,omitempty"`
	AppName             *string                              `protobuf:"bytes,14,opt,name=appName" json:"appName,omitempty"`
	JobGroupStack       *string                              `protobuf:"bytes,15,opt,name=jobGroupStack" json:"jobGroupStack,omitempty"`
	JobGroupDetail      *string                              `protobuf:"bytes,16,opt,name=jobGroupDetail" json:"jobGroupDetail,omitempty"`
	IamProfile          *string                              `protobuf:"bytes,17,opt,name=iamProfile" json:"iamProfile,omitempty"`
	NetworkConfigInfo   *ContainerInfo_NetworkConfigInfo     `protobuf:"bytes,18,opt,name=networkConfigInfo" json:"networkConfigInfo,omitempty"`
	JobGroupSequence    *string                              `protobuf:"bytes,19,opt,name=jobGroupSequence" json:"jobGroupSequence,omitempty"`
	NumGpus             *uint32                              `protobuf:"varint,20,opt,name=numGpus" json:"numGpus,omitempty"`
	EfsConfigInfo       []*ContainerInfo_EfsConfigInfo       `protobuf:"bytes,21,rep,name=efsConfigInfo" json:"efsConfigInfo,omitempty"`
	Capabilities        *ContainerInfo_Capabilities          `protobuf:"bytes,22,opt,name=capabilities" json:"capabilities,omitempty"`
	MetatronCreds       *ContainerInfo_MetatronCreds         `protobuf:"bytes,23,opt,name=metatronCreds" json:"metatronCreds,omitempty"`
	UserProvidedEnv     map[string]string                    `protobuf:"bytes,24,rep,name=userProvidedEnv" json:"userProvidedEnv,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TitusProvidedEnv    map[string]string                    `protobuf:"bytes,25,rep,name=titusProvidedEnv" json:"titusProvidedEnv,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// imageDigest has precedence over version
	ImageDigest      *string `protobuf:"bytes,26,opt,name=imageDigest" json:"imageDigest,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainerInfo) Reset()                    { *m = ContainerInfo{} }
func (m *ContainerInfo) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo) ProtoMessage()               {}
func (*ContainerInfo) Descriptor() ([]byte, []int) { return fileDescriptorAgent, []int{4} }

const Default_ContainerInfo_Version string = "latest"
const Default_ContainerInfo_AllocateIpAddress bool = false

func (m *ContainerInfo) GetImageName() string {
	if m != nil && m.ImageName != nil {
		return *m.ImageName
	}
	return ""
}

func (m *ContainerInfo) GetCommand() string {
	if m != nil && m.Command != nil {
		return *m.Command
	}
	return ""
}

func (m *ContainerInfo) GetContainerPorts() string {
	if m != nil && m.ContainerPorts != nil {
		return *m.ContainerPorts
	}
	return ""
}

func (m *ContainerInfo) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_ContainerInfo_Version
}

func (m *ContainerInfo) GetEnvironmentVariable() []*ContainerInfo_EnvironmentVariable {
	if m != nil {
		return m.EnvironmentVariable
	}
	return nil
}

func (m *ContainerInfo) GetJobId() string {
	if m != nil && m.JobId != nil {
		return *m.JobId
	}
	return ""
}

func (m *ContainerInfo) GetLogUploadRegexp() string {
	if m != nil && m.LogUploadRegexp != nil {
		return *m.LogUploadRegexp
	}
	return ""
}

func (m *ContainerInfo) GetMaxHealthFailures() uint32 {
	if m != nil && m.MaxHealthFailures != nil {
		return *m.MaxHealthFailures
	}
	return 0
}

func (m *ContainerInfo) GetHealthCheckCmd() []string {
	if m != nil {
		return m.HealthCheckCmd
	}
	return nil
}

func (m *ContainerInfo) GetSnapshotPolicy() ContainerInfo_SnapshotPolicy {
	if m != nil && m.SnapshotPolicy != nil {
		return *m.SnapshotPolicy
	}
	return ContainerInfo_NEVER
}

func (m *ContainerInfo) GetEntrypointCmd() []string {
	if m != nil {
		return m.EntrypointCmd
	}
	return nil
}

func (m *ContainerInfo) GetAllocateIpAddress() bool {
	if m != nil && m.AllocateIpAddress != nil {
		return *m.AllocateIpAddress
	}
	return Default_ContainerInfo_AllocateIpAddress
}

func (m *ContainerInfo) GetEntrypointStr() string {
	if m != nil && m.EntrypointStr != nil {
		return *m.EntrypointStr
	}
	return ""
}

func (m *ContainerInfo) GetAppName() string {
	if m != nil && m.AppName != nil {
		return *m.AppName
	}
	return ""
}

func (m *ContainerInfo) GetJobGroupStack() string {
	if m != nil && m.JobGroupStack != nil {
		return *m.JobGroupStack
	}
	return ""
}

func (m *ContainerInfo) GetJobGroupDetail() string {
	if m != nil && m.JobGroupDetail != nil {
		return *m.JobGroupDetail
	}
	return ""
}

func (m *ContainerInfo) GetIamProfile() string {
	if m != nil && m.IamProfile != nil {
		return *m.IamProfile
	}
	return ""
}

func (m *ContainerInfo) GetNetworkConfigInfo() *ContainerInfo_NetworkConfigInfo {
	if m != nil {
		return m.NetworkConfigInfo
	}
	return nil
}

func (m *ContainerInfo) GetJobGroupSequence() string {
	if m != nil && m.JobGroupSequence != nil {
		return *m.JobGroupSequence
	}
	return ""
}

func (m *ContainerInfo) GetNumGpus() uint32 {
	if m != nil && m.NumGpus != nil {
		return *m.NumGpus
	}
	return 0
}

func (m *ContainerInfo) GetEfsConfigInfo() []*ContainerInfo_EfsConfigInfo {
	if m != nil {
		return m.EfsConfigInfo
	}
	return nil
}

func (m *ContainerInfo) GetCapabilities() *ContainerInfo_Capabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *ContainerInfo) GetMetatronCreds() *ContainerInfo_MetatronCreds {
	if m != nil {
		return m.MetatronCreds
	}
	return nil
}

func (m *ContainerInfo) GetUserProvidedEnv() map[string]string {
	if m != nil {
		return m.UserProvidedEnv
	}
	return nil
}

func (m *ContainerInfo) GetTitusProvidedEnv() map[string]string {
	if m != nil {
		return m.TitusProvidedEnv
	}
	return nil
}

func (m *ContainerInfo) GetImageDigest() string {
	if m != nil && m.ImageDigest != nil {
		return *m.ImageDigest
	}
	return ""
}

// deprecated: use userProvidedEnv and titusProvidedEnv instead
type ContainerInfo_EnvironmentVariable struct {
	Name             *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainerInfo_EnvironmentVariable) Reset()         { *m = ContainerInfo_EnvironmentVariable{} }
func (m *ContainerInfo_EnvironmentVariable) String() string { return proto.CompactTextString(m) }
func (*ContainerInfo_EnvironmentVariable) ProtoMessage()    {}
func (*ContainerInfo_EnvironmentVariable) Descriptor() ([]byte, []int) {
	return fileDescriptorAgent, []int{4, 0}
}

func (m *ContainerInfo_EnvironmentVariable) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ContainerInfo_EnvironmentVariable) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

type ContainerInfo_NetworkConfigInfo struct {
	// deprecated: use eniLabel instead
	EniLablel *string `protobuf:"bytes,1,req,name=eniLablel" json:"eniLablel,omitempty"`
	// this should be required, but it was added later (typo fix) and is optional for backwards compatibility
	EniLabel           *string  `protobuf:"bytes,5,opt,name=eniLabel" json:"eniLabel,omitempty"`
	AllocateIpAddress  *bool    `protobuf:"varint,2,opt,name=allocateIpAddress,def=0" json:"allocateIpAddress,omitempty"`
	SecurityGroups     []string `protobuf:"bytes,3,rep,name=securityGroups" json:"securityGroups,omitempty"`
	BandwidthLimitMbps *uint32  `protobuf:"varint,4,opt,name=bandwidthLimitMbps" json:"bandwidthLimitMbps,omitempty"`
	XXX_unrecognized   []byte   `json:"-"`
}

func (m *ContainerInfo_NetworkConfigInfo) Reset()         { *m = ContainerInfo_NetworkConfigInfo{} }
func (m *ContainerInfo_NetworkConfigInfo) String() string { return proto.CompactTextString(m) }
func (*ContainerInfo_NetworkConfigInfo) ProtoMessage()    {}
func (*ContainerInfo_NetworkConfigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorAgent, []int{4, 1}
}

const Default_ContainerInfo_NetworkConfigInfo_AllocateIpAddress bool = false

func (m *ContainerInfo_NetworkConfigInfo) GetEniLablel() string {
	if m != nil && m.EniLablel != nil {
		return *m.EniLablel
	}
	return ""
}

func (m *ContainerInfo_NetworkConfigInfo) GetEniLabel() string {
	if m != nil && m.EniLabel != nil {
		return *m.EniLabel
	}
	return ""
}

func (m *ContainerInfo_NetworkConfigInfo) GetAllocateIpAddress() bool {
	if m != nil && m.AllocateIpAddress != nil {
		return *m.AllocateIpAddress
	}
	return Default_ContainerInfo_NetworkConfigInfo_AllocateIpAddress
}

func (m *ContainerInfo_NetworkConfigInfo) GetSecurityGroups() []string {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *ContainerInfo_NetworkConfigInfo) GetBandwidthLimitMbps() uint32 {
	if m != nil && m.BandwidthLimitMbps != nil {
		return *m.BandwidthLimitMbps
	}
	return 0
}

type ContainerInfo_EfsConfigInfo struct {
	EfsFsId               *string                                 `protobuf:"bytes,1,req,name=efsFsId" json:"efsFsId,omitempty"`
	MountPoint            *string                                 `protobuf:"bytes,2,req,name=mountPoint" json:"mountPoint,omitempty"`
	MntPerms              *ContainerInfo_EfsConfigInfo_MountPerms `protobuf:"varint,3,opt,name=mntPerms,enum=messages.ContainerInfo_EfsConfigInfo_MountPerms" json:"mntPerms,omitempty"`
	EfsFsRelativeMntPoint *string                                 `protobuf:"bytes,4,opt,name=efsFsRelativeMntPoint" json:"efsFsRelativeMntPoint,omitempty"`
	XXX_unrecognized      []byte                                  `json:"-"`
}

func (m *ContainerInfo_EfsConfigInfo) Reset()         { *m = ContainerInfo_EfsConfigInfo{} }
func (m *ContainerInfo_EfsConfigInfo) String() string { return proto.CompactTextString(m) }
func (*ContainerInfo_EfsConfigInfo) ProtoMessage()    {}
func (*ContainerInfo_EfsConfigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorAgent, []int{4, 2}
}

func (m *ContainerInfo_EfsConfigInfo) GetEfsFsId() string {
	if m != nil && m.EfsFsId != nil {
		return *m.EfsFsId
	}
	return ""
}

func (m *ContainerInfo_EfsConfigInfo) GetMountPoint() string {
	if m != nil && m.MountPoint != nil {
		return *m.MountPoint
	}
	return ""
}

func (m *ContainerInfo_EfsConfigInfo) GetMntPerms() ContainerInfo_EfsConfigInfo_MountPerms {
	if m != nil && m.MntPerms != nil {
		return *m.MntPerms
	}
	return ContainerInfo_EfsConfigInfo_RW
}

func (m *ContainerInfo_EfsConfigInfo) GetEfsFsRelativeMntPoint() string {
	if m != nil && m.EfsFsRelativeMntPoint != nil {
		return *m.EfsFsRelativeMntPoint
	}
	return ""
}

type ContainerInfo_Capabilities struct {
	Add              []ContainerInfo_Capabilities_Capability `protobuf:"varint,1,rep,name=add,enum=messages.ContainerInfo_Capabilities_Capability" json:"add,omitempty"`
	Drop             []ContainerInfo_Capabilities_Capability `protobuf:"varint,2,rep,name=drop,enum=messages.ContainerInfo_Capabilities_Capability" json:"drop,omitempty"`
	XXX_unrecognized []byte                                  `json:"-"`
}

func (m *ContainerInfo_Capabilities) Reset()         { *m = ContainerInfo_Capabilities{} }
func (m *ContainerInfo_Capabilities) String() string { return proto.CompactTextString(m) }
func (*ContainerInfo_Capabilities) ProtoMessage()    {}
func (*ContainerInfo_Capabilities) Descriptor() ([]byte, []int) {
	return fileDescriptorAgent, []int{4, 3}
}

func (m *ContainerInfo_Capabilities) GetAdd() []ContainerInfo_Capabilities_Capability {
	if m != nil {
		return m.Add
	}
	return nil
}

func (m *ContainerInfo_Capabilities) GetDrop() []ContainerInfo_Capabilities_Capability {
	if m != nil {
		return m.Drop
	}
	return nil
}

type ContainerInfo_MetatronCreds struct {
	AppMetadata      *string `protobuf:"bytes,1,req,name=appMetadata" json:"appMetadata,omitempty"`
	MetadataSig      *string `protobuf:"bytes,2,req,name=metadataSig" json:"metadataSig,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainerInfo_MetatronCreds) Reset()         { *m = ContainerInfo_MetatronCreds{} }
func (m *ContainerInfo_MetatronCreds) String() string { return proto.CompactTextString(m) }
func (*ContainerInfo_MetatronCreds) ProtoMessage()    {}
func (*ContainerInfo_MetatronCreds) Descriptor() ([]byte, []int) {
	return fileDescriptorAgent, []int{4, 4}
}

func (m *ContainerInfo_MetatronCreds) GetAppMetadata() string {
	if m != nil && m.AppMetadata != nil {
		return *m.AppMetadata
	}
	return ""
}

func (m *ContainerInfo_MetatronCreds) GetMetadataSig() string {
	if m != nil && m.MetadataSig != nil {
		return *m.MetadataSig
	}
	return ""
}

func init() {
	proto.RegisterType((*TaskStatusData)(nil), "messages.TaskStatusData")
	proto.RegisterType((*StateUpdate)(nil), "messages.StateUpdate")
	proto.RegisterType((*StateUpdates)(nil), "messages.StateUpdates")
	proto.RegisterType((*TaskInfo)(nil), "messages.TaskInfo")
	proto.RegisterType((*TaskInfo_EnvironmentVariable)(nil), "messages.TaskInfo.EnvironmentVariable")
	proto.RegisterType((*ContainerInfo)(nil), "messages.ContainerInfo")
	proto.RegisterType((*ContainerInfo_EnvironmentVariable)(nil), "messages.ContainerInfo.EnvironmentVariable")
	proto.RegisterType((*ContainerInfo_NetworkConfigInfo)(nil), "messages.ContainerInfo.NetworkConfigInfo")
	proto.RegisterType((*ContainerInfo_EfsConfigInfo)(nil), "messages.ContainerInfo.EfsConfigInfo")
	proto.RegisterType((*ContainerInfo_Capabilities)(nil), "messages.ContainerInfo.Capabilities")
	proto.RegisterType((*ContainerInfo_MetatronCreds)(nil), "messages.ContainerInfo.MetatronCreds")
	proto.RegisterEnum("messages.TaskInfo_Status", TaskInfo_Status_name, TaskInfo_Status_value)
	proto.RegisterEnum("messages.ContainerInfo_SnapshotPolicy", ContainerInfo_SnapshotPolicy_name, ContainerInfo_SnapshotPolicy_value)
	proto.RegisterEnum("messages.ContainerInfo_EfsConfigInfo_MountPerms", ContainerInfo_EfsConfigInfo_MountPerms_name, ContainerInfo_EfsConfigInfo_MountPerms_value)
	proto.RegisterEnum("messages.ContainerInfo_Capabilities_Capability", ContainerInfo_Capabilities_Capability_name, ContainerInfo_Capabilities_Capability_value)
}
func (m *TaskStatusData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskStatusData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("timestamp")
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAgent(dAtA, i, uint64(*m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StateUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.Id)))
		i += copy(dAtA[i:], *m.Id)
	}
	if m.State != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.State)))
		i += copy(dAtA[i:], *m.State)
	}
	if m.Message != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.Message)))
		i += copy(dAtA[i:], *m.Message)
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.Timestamp)))
		i += copy(dAtA[i:], *m.Timestamp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StateUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateUpdates) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StateUpdate) > 0 {
		for _, msg := range m.StateUpdate {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ContainerId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.ContainerId)))
		i += copy(dAtA[i:], *m.ContainerId)
	}
	if m.TaskId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.TaskId)))
		i += copy(dAtA[i:], *m.TaskId)
	}
	if m.HostName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.HostName)))
		i += copy(dAtA[i:], *m.HostName)
	}
	if m.SlaveId != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.SlaveId)))
		i += copy(dAtA[i:], *m.SlaveId)
	}
	if m.Status != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAgent(dAtA, i, uint64(*m.Status))
	}
	if m.Message != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.Message)))
		i += copy(dAtA[i:], *m.Message)
	}
	if len(m.EnvironmentVariable) > 0 {
		for _, msg := range m.EnvironmentVariable {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TaskInfo_EnvironmentVariable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskInfo_EnvironmentVariable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.Value)))
		i += copy(dAtA[i:], *m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContainerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ImageName != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.ImageName)))
		i += copy(dAtA[i:], *m.ImageName)
	}
	if m.Command != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.Command)))
		i += copy(dAtA[i:], *m.Command)
	}
	if m.ContainerPorts != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.ContainerPorts)))
		i += copy(dAtA[i:], *m.ContainerPorts)
	}
	if m.Version != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.Version)))
		i += copy(dAtA[i:], *m.Version)
	}
	if len(m.EnvironmentVariable) > 0 {
		for _, msg := range m.EnvironmentVariable {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.JobId != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.JobId)))
		i += copy(dAtA[i:], *m.JobId)
	}
	if m.LogUploadRegexp != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.LogUploadRegexp)))
		i += copy(dAtA[i:], *m.LogUploadRegexp)
	}
	if m.MaxHealthFailures != nil {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAgent(dAtA, i, uint64(*m.MaxHealthFailures))
	}
	if len(m.HealthCheckCmd) > 0 {
		for _, s := range m.HealthCheckCmd {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.SnapshotPolicy != nil {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAgent(dAtA, i, uint64(*m.SnapshotPolicy))
	}
	if len(m.EntrypointCmd) > 0 {
		for _, s := range m.EntrypointCmd {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.AllocateIpAddress != nil {
		dAtA[i] = 0x60
		i++
		if *m.AllocateIpAddress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EntrypointStr != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.EntrypointStr)))
		i += copy(dAtA[i:], *m.EntrypointStr)
	}
	if m.AppName != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.AppName)))
		i += copy(dAtA[i:], *m.AppName)
	}
	if m.JobGroupStack != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.JobGroupStack)))
		i += copy(dAtA[i:], *m.JobGroupStack)
	}
	if m.JobGroupDetail != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.JobGroupDetail)))
		i += copy(dAtA[i:], *m.JobGroupDetail)
	}
	if m.IamProfile != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.IamProfile)))
		i += copy(dAtA[i:], *m.IamProfile)
	}
	if m.NetworkConfigInfo != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAgent(dAtA, i, uint64(m.NetworkConfigInfo.Size()))
		n1, err := m.NetworkConfigInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.JobGroupSequence != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.JobGroupSequence)))
		i += copy(dAtA[i:], *m.JobGroupSequence)
	}
	if m.NumGpus != nil {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAgent(dAtA, i, uint64(*m.NumGpus))
	}
	if len(m.EfsConfigInfo) > 0 {
		for _, msg := range m.EfsConfigInfo {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintAgent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Capabilities != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAgent(dAtA, i, uint64(m.Capabilities.Size()))
		n2, err := m.Capabilities.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.MetatronCreds != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAgent(dAtA, i, uint64(m.MetatronCreds.Size()))
		n3, err := m.MetatronCreds.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.UserProvidedEnv) > 0 {
		for k, _ := range m.UserProvidedEnv {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x1
			i++
			v := m.UserProvidedEnv[k]
			mapSize := 1 + len(k) + sovAgent(uint64(len(k))) + 1 + len(v) + sovAgent(uint64(len(v)))
			i = encodeVarintAgent(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgent(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAgent(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.TitusProvidedEnv) > 0 {
		for k, _ := range m.TitusProvidedEnv {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x1
			i++
			v := m.TitusProvidedEnv[k]
			mapSize := 1 + len(k) + sovAgent(uint64(len(k))) + 1 + len(v) + sovAgent(uint64(len(v)))
			i = encodeVarintAgent(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgent(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAgent(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.ImageDigest != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.ImageDigest)))
		i += copy(dAtA[i:], *m.ImageDigest)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContainerInfo_EnvironmentVariable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerInfo_EnvironmentVariable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.Name)))
		i += copy(dAtA[i:], *m.Name)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.Value)))
		i += copy(dAtA[i:], *m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContainerInfo_NetworkConfigInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerInfo_NetworkConfigInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EniLablel == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("eniLablel")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.EniLablel)))
		i += copy(dAtA[i:], *m.EniLablel)
	}
	if m.AllocateIpAddress != nil {
		dAtA[i] = 0x10
		i++
		if *m.AllocateIpAddress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.BandwidthLimitMbps != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAgent(dAtA, i, uint64(*m.BandwidthLimitMbps))
	}
	if m.EniLabel != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.EniLabel)))
		i += copy(dAtA[i:], *m.EniLabel)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContainerInfo_EfsConfigInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerInfo_EfsConfigInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EfsFsId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("efsFsId")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.EfsFsId)))
		i += copy(dAtA[i:], *m.EfsFsId)
	}
	if m.MountPoint == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("mountPoint")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.MountPoint)))
		i += copy(dAtA[i:], *m.MountPoint)
	}
	if m.MntPerms != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAgent(dAtA, i, uint64(*m.MntPerms))
	}
	if m.EfsFsRelativeMntPoint != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.EfsFsRelativeMntPoint)))
		i += copy(dAtA[i:], *m.EfsFsRelativeMntPoint)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContainerInfo_Capabilities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerInfo_Capabilities) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Add) > 0 {
		for _, num := range m.Add {
			dAtA[i] = 0x8
			i++
			i = encodeVarintAgent(dAtA, i, uint64(num))
		}
	}
	if len(m.Drop) > 0 {
		for _, num := range m.Drop {
			dAtA[i] = 0x10
			i++
			i = encodeVarintAgent(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ContainerInfo_MetatronCreds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerInfo_MetatronCreds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppMetadata == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("appMetadata")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.AppMetadata)))
		i += copy(dAtA[i:], *m.AppMetadata)
	}
	if m.MetadataSig == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("metadataSig")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgent(dAtA, i, uint64(len(*m.MetadataSig)))
		i += copy(dAtA[i:], *m.MetadataSig)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAgent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskStatusData) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != nil {
		n += 1 + sovAgent(uint64(*m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateUpdate) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = len(*m.Id)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.State != nil {
		l = len(*m.State)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Timestamp != nil {
		l = len(*m.Timestamp)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StateUpdates) Size() (n int) {
	var l int
	_ = l
	if len(m.StateUpdate) > 0 {
		for _, e := range m.StateUpdate {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskInfo) Size() (n int) {
	var l int
	_ = l
	if m.ContainerId != nil {
		l = len(*m.ContainerId)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.TaskId != nil {
		l = len(*m.TaskId)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.HostName != nil {
		l = len(*m.HostName)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.SlaveId != nil {
		l = len(*m.SlaveId)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Status != nil {
		n += 1 + sovAgent(uint64(*m.Status))
	}
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.EnvironmentVariable) > 0 {
		for _, e := range m.EnvironmentVariable {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskInfo_EnvironmentVariable) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerInfo) Size() (n int) {
	var l int
	_ = l
	if m.ImageName != nil {
		l = len(*m.ImageName)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Command != nil {
		l = len(*m.Command)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.ContainerPorts != nil {
		l = len(*m.ContainerPorts)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Version != nil {
		l = len(*m.Version)
		n += 1 + l + sovAgent(uint64(l))
	}
	if len(m.EnvironmentVariable) > 0 {
		for _, e := range m.EnvironmentVariable {
			l = e.Size()
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.JobId != nil {
		l = len(*m.JobId)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.LogUploadRegexp != nil {
		l = len(*m.LogUploadRegexp)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.MaxHealthFailures != nil {
		n += 1 + sovAgent(uint64(*m.MaxHealthFailures))
	}
	if len(m.HealthCheckCmd) > 0 {
		for _, s := range m.HealthCheckCmd {
			l = len(s)
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.SnapshotPolicy != nil {
		n += 1 + sovAgent(uint64(*m.SnapshotPolicy))
	}
	if len(m.EntrypointCmd) > 0 {
		for _, s := range m.EntrypointCmd {
			l = len(s)
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.AllocateIpAddress != nil {
		n += 2
	}
	if m.EntrypointStr != nil {
		l = len(*m.EntrypointStr)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.AppName != nil {
		l = len(*m.AppName)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.JobGroupStack != nil {
		l = len(*m.JobGroupStack)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.JobGroupDetail != nil {
		l = len(*m.JobGroupDetail)
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.IamProfile != nil {
		l = len(*m.IamProfile)
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.NetworkConfigInfo != nil {
		l = m.NetworkConfigInfo.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.JobGroupSequence != nil {
		l = len(*m.JobGroupSequence)
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.NumGpus != nil {
		n += 2 + sovAgent(uint64(*m.NumGpus))
	}
	if len(m.EfsConfigInfo) > 0 {
		for _, e := range m.EfsConfigInfo {
			l = e.Size()
			n += 2 + l + sovAgent(uint64(l))
		}
	}
	if m.Capabilities != nil {
		l = m.Capabilities.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.MetatronCreds != nil {
		l = m.MetatronCreds.Size()
		n += 2 + l + sovAgent(uint64(l))
	}
	if len(m.UserProvidedEnv) > 0 {
		for k, v := range m.UserProvidedEnv {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAgent(uint64(len(k))) + 1 + len(v) + sovAgent(uint64(len(v)))
			n += mapEntrySize + 2 + sovAgent(uint64(mapEntrySize))
		}
	}
	if len(m.TitusProvidedEnv) > 0 {
		for k, v := range m.TitusProvidedEnv {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAgent(uint64(len(k))) + 1 + len(v) + sovAgent(uint64(len(v)))
			n += mapEntrySize + 2 + sovAgent(uint64(mapEntrySize))
		}
	}
	if m.ImageDigest != nil {
		l = len(*m.ImageDigest)
		n += 2 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerInfo_EnvironmentVariable) Size() (n int) {
	var l int
	_ = l
	if m.Name != nil {
		l = len(*m.Name)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.Value != nil {
		l = len(*m.Value)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerInfo_NetworkConfigInfo) Size() (n int) {
	var l int
	_ = l
	if m.EniLablel != nil {
		l = len(*m.EniLablel)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.AllocateIpAddress != nil {
		n += 2
	}
	if len(m.SecurityGroups) > 0 {
		for _, s := range m.SecurityGroups {
			l = len(s)
			n += 1 + l + sovAgent(uint64(l))
		}
	}
	if m.BandwidthLimitMbps != nil {
		n += 1 + sovAgent(uint64(*m.BandwidthLimitMbps))
	}
	if m.EniLabel != nil {
		l = len(*m.EniLabel)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerInfo_EfsConfigInfo) Size() (n int) {
	var l int
	_ = l
	if m.EfsFsId != nil {
		l = len(*m.EfsFsId)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.MountPoint != nil {
		l = len(*m.MountPoint)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.MntPerms != nil {
		n += 1 + sovAgent(uint64(*m.MntPerms))
	}
	if m.EfsFsRelativeMntPoint != nil {
		l = len(*m.EfsFsRelativeMntPoint)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerInfo_Capabilities) Size() (n int) {
	var l int
	_ = l
	if len(m.Add) > 0 {
		for _, e := range m.Add {
			n += 1 + sovAgent(uint64(e))
		}
	}
	if len(m.Drop) > 0 {
		for _, e := range m.Drop {
			n += 1 + sovAgent(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContainerInfo_MetatronCreds) Size() (n int) {
	var l int
	_ = l
	if m.AppMetadata != nil {
		l = len(*m.AppMetadata)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.MetadataSig != nil {
		l = len(*m.MetadataSig)
		n += 1 + l + sovAgent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAgent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAgent(x uint64) (n int) {
	return sovAgent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskStatusData) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskStatusData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskStatusData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timestamp = &v
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("timestamp")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Id = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.State = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Timestamp = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StateUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateUpdate = append(m.StateUpdate, &StateUpdate{})
			if err := m.StateUpdate[len(m.StateUpdate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContainerId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.TaskId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.HostName = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.SlaveId = &s
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v TaskInfo_Status
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (TaskInfo_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentVariable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvironmentVariable = append(m.EnvironmentVariable, &TaskInfo_EnvironmentVariable{})
			if err := m.EnvironmentVariable[len(m.EnvironmentVariable)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskInfo_EnvironmentVariable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvironmentVariable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvironmentVariable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImageName = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Command = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerPorts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ContainerPorts = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Version = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnvironmentVariable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnvironmentVariable = append(m.EnvironmentVariable, &ContainerInfo_EnvironmentVariable{})
			if err := m.EnvironmentVariable[len(m.EnvironmentVariable)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JobId = &s
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogUploadRegexp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.LogUploadRegexp = &s
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHealthFailures", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxHealthFailures = &v
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthCheckCmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthCheckCmd = append(m.HealthCheckCmd, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotPolicy", wireType)
			}
			var v ContainerInfo_SnapshotPolicy
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ContainerInfo_SnapshotPolicy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SnapshotPolicy = &v
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntrypointCmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntrypointCmd = append(m.EntrypointCmd, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocateIpAddress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AllocateIpAddress = &b
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntrypointStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EntrypointStr = &s
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppName = &s
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobGroupStack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JobGroupStack = &s
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobGroupDetail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JobGroupDetail = &s
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IamProfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.IamProfile = &s
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkConfigInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkConfigInfo == nil {
				m.NetworkConfigInfo = &ContainerInfo_NetworkConfigInfo{}
			}
			if err := m.NetworkConfigInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobGroupSequence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.JobGroupSequence = &s
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumGpus", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumGpus = &v
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EfsConfigInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EfsConfigInfo = append(m.EfsConfigInfo, &ContainerInfo_EfsConfigInfo{})
			if err := m.EfsConfigInfo[len(m.EfsConfigInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capabilities == nil {
				m.Capabilities = &ContainerInfo_Capabilities{}
			}
			if err := m.Capabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetatronCreds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetatronCreds == nil {
				m.MetatronCreds = &ContainerInfo_MetatronCreds{}
			}
			if err := m.MetatronCreds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserProvidedEnv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserProvidedEnv == nil {
				m.UserProvidedEnv = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAgent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAgent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAgent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAgent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UserProvidedEnv[mapkey] = mapvalue
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitusProvidedEnv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TitusProvidedEnv == nil {
				m.TitusProvidedEnv = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAgent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAgent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAgent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAgent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TitusProvidedEnv[mapkey] = mapvalue
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageDigest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.ImageDigest = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerInfo_EnvironmentVariable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnvironmentVariable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnvironmentVariable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Name = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Value = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerInfo_NetworkConfigInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkConfigInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkConfigInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EniLablel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EniLablel = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocateIpAddress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.AllocateIpAddress = &b
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroups = append(m.SecurityGroups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthLimitMbps", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BandwidthLimitMbps = &v
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EniLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EniLabel = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("eniLablel")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerInfo_EfsConfigInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EfsConfigInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EfsConfigInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EfsFsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EfsFsId = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MountPoint = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MntPerms", wireType)
			}
			var v ContainerInfo_EfsConfigInfo_MountPerms
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (ContainerInfo_EfsConfigInfo_MountPerms(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MntPerms = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EfsFsRelativeMntPoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.EfsFsRelativeMntPoint = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("efsFsId")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("mountPoint")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerInfo_Capabilities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Capabilities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Capabilities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ContainerInfo_Capabilities_Capability
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ContainerInfo_Capabilities_Capability(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Add = append(m.Add, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ContainerInfo_Capabilities_Capability
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ContainerInfo_Capabilities_Capability(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Add = append(m.Add, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
		case 2:
			if wireType == 0 {
				var v ContainerInfo_Capabilities_Capability
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ContainerInfo_Capabilities_Capability(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Drop = append(m.Drop, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ContainerInfo_Capabilities_Capability
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ContainerInfo_Capabilities_Capability(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Drop = append(m.Drop, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Drop", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerInfo_MetatronCreds) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetatronCreds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetatronCreds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.AppMetadata = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataSig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MetadataSig = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipAgent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("appMetadata")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("metadataSig")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAgent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAgent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAgent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAgent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("netflix/titus/agent.proto", fileDescriptorAgent) }

var fileDescriptorAgent = []byte{
	// 1623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdd, 0x72, 0xe3, 0x48,
	0x15, 0x1e, 0xd9, 0xf9, 0xf3, 0x71, 0xec, 0x74, 0x3a, 0xc9, 0xac, 0xc6, 0x0c, 0xc1, 0x84, 0xd9,
	0xa9, 0x00, 0x8b, 0x07, 0x02, 0x55, 0x50, 0x53, 0x54, 0x51, 0x8a, 0xac, 0x24, 0xaa, 0xd8, 0x92,
	0xab, 0x25, 0xc7, 0x1b, 0x6e, 0x5c, 0x1d, 0xab, 0x93, 0x68, 0xa3, 0x1f, 0x23, 0xb5, 0xb3, 0x93,
	0xd7, 0xe0, 0xa9, 0xb8, 0xdc, 0x27, 0xa0, 0xa8, 0xb9, 0x82, 0x6b, 0x5e, 0x80, 0xea, 0x96, 0x15,
	0x4b, 0x89, 0x53, 0x2c, 0xec, 0x95, 0xfb, 0x7c, 0x7d, 0xfa, 0xfc, 0x7c, 0xe7, 0xf4, 0x69, 0x19,
	0xde, 0x44, 0x8c, 0x5f, 0x07, 0xfe, 0xa7, 0x0f, 0xdc, 0xe7, 0xb3, 0xf4, 0x03, 0xbd, 0x61, 0x11,
	0xef, 0x4c, 0x93, 0x98, 0xc7, 0x78, 0x23, 0x64, 0x69, 0x4a, 0x6f, 0x58, 0x7a, 0xd0, 0x81, 0xa6,
	0x4b, 0xd3, 0x3b, 0x87, 0x53, 0x3e, 0x4b, 0xbb, 0x94, 0x53, 0xfc, 0x16, 0x6a, 0xdc, 0x0f, 0x59,
	0xca, 0x69, 0x38, 0x55, 0x95, 0x76, 0xe5, 0xb0, 0x4a, 0x16, 0xc0, 0xc1, 0x1d, 0xd4, 0x85, 0x2e,
	0x1b, 0x4e, 0x3d, 0xca, 0x19, 0x6e, 0x42, 0xc5, 0xf7, 0x54, 0xa5, 0xad, 0x1c, 0xd6, 0x48, 0xc5,
	0xf7, 0xf0, 0x2e, 0xac, 0xa6, 0x62, 0x5b, 0xad, 0x48, 0x28, 0x13, 0xb0, 0x0a, 0xeb, 0x73, 0x87,
	0x6a, 0x55, 0xe2, 0xb9, 0x58, 0x76, 0xb6, 0x22, 0xf7, 0x0a, 0xce, 0x4e, 0x61, 0xb3, 0xe0, 0x2c,
	0xc5, 0xbf, 0x87, 0x7a, 0xba, 0x90, 0x55, 0xa5, 0x5d, 0x3d, 0xac, 0x1f, 0xed, 0x75, 0xf2, 0x64,
	0x3a, 0x05, 0x65, 0x52, 0xd4, 0x3c, 0xf8, 0x6b, 0x15, 0x36, 0x44, 0x9a, 0x66, 0x74, 0x1d, 0xe3,
	0x36, 0xd4, 0x27, 0x71, 0xc4, 0xa9, 0x1f, 0xb1, 0xc4, 0xcc, 0x83, 0x2f, 0x42, 0xf8, 0x35, 0xac,
	0x71, 0xa1, 0xed, 0xcd, 0xd3, 0x98, 0x4b, 0xb8, 0x05, 0x1b, 0xb7, 0x71, 0xca, 0x2d, 0x1a, 0xe6,
	0x89, 0x3c, 0xca, 0x22, 0xc7, 0x34, 0xa0, 0xf7, 0xcc, 0xf4, 0xe6, 0x79, 0xe4, 0x22, 0xfe, 0x0d,
	0xac, 0xa5, 0x92, 0x5e, 0x75, 0xb5, 0xad, 0x1c, 0x36, 0x8f, 0xde, 0x2c, 0x02, 0xce, 0x63, 0xea,
	0x64, 0xfc, 0x93, 0xb9, 0x62, 0x91, 0xb0, 0xb5, 0x32, 0x61, 0x5f, 0xc3, 0x0e, 0x8b, 0xee, 0xfd,
	0x24, 0x8e, 0x42, 0x16, 0xf1, 0x0b, 0x9a, 0xf8, 0xf4, 0x2a, 0x60, 0xea, 0xba, 0xa4, 0xe2, 0xfd,
	0x12, 0xcb, 0xc6, 0x73, 0x6d, 0xb2, 0xcc, 0x44, 0xeb, 0x4f, 0xb0, 0xb3, 0x44, 0x17, 0x63, 0x58,
	0x89, 0x44, 0xbe, 0x19, 0x4d, 0x72, 0x2d, 0xaa, 0x7c, 0x4f, 0x83, 0xd9, 0x63, 0x95, 0xa5, 0x70,
	0xd0, 0x81, 0xb5, 0x2c, 0x0d, 0x5c, 0x87, 0x75, 0x32, 0xb4, 0x2c, 0xd3, 0x3a, 0x45, 0xaf, 0x30,
	0xc0, 0xda, 0x89, 0x66, 0xf6, 0x8c, 0x2e, 0x52, 0xc4, 0x86, 0xe3, 0xda, 0x83, 0x81, 0xd1, 0x45,
	0x95, 0x83, 0x7f, 0xbe, 0x86, 0x86, 0xfe, 0xc8, 0xba, 0xa8, 0xcc, 0x5b, 0xa8, 0xf9, 0x21, 0xbd,
	0x61, 0xd6, 0xc2, 0xe1, 0x02, 0x10, 0xa4, 0x4c, 0xe2, 0x30, 0xa4, 0x51, 0x5e, 0x96, 0x5c, 0xc4,
	0xef, 0xa1, 0xf9, 0x58, 0xbe, 0x41, 0x9c, 0xf0, 0x74, 0x5e, 0x9d, 0x27, 0x28, 0x6e, 0xc3, 0xfa,
	0x3d, 0x4b, 0x52, 0x3f, 0x8e, 0xb2, 0x1a, 0x7d, 0x5c, 0x0b, 0x44, 0x5f, 0x71, 0x92, 0xc3, 0x98,
	0x2e, 0xa7, 0x77, 0x55, 0xd2, 0xfb, 0xcb, 0x05, 0xbd, 0xa5, 0xb8, 0x97, 0x71, 0x7c, 0x5c, 0x51,
	0x95, 0xa5, 0x3c, 0x0b, 0xf2, 0xbe, 0x89, 0xaf, 0x4c, 0x6f, 0x5e, 0xd9, 0x4c, 0xc0, 0x87, 0xb0,
	0x15, 0xc4, 0x37, 0xc3, 0x69, 0x10, 0x53, 0x8f, 0xb0, 0x1b, 0xf6, 0x69, 0xaa, 0xae, 0xcb, 0xfd,
	0xa7, 0x30, 0xfe, 0x0a, 0xb6, 0x43, 0xfa, 0xe9, 0x8c, 0xd1, 0x80, 0xdf, 0x9e, 0x50, 0x3f, 0x98,
	0x25, 0x2c, 0x55, 0x37, 0xda, 0xca, 0x61, 0x83, 0x3c, 0xdf, 0x10, 0xd4, 0xdc, 0x4a, 0x44, 0xbf,
	0x65, 0x93, 0x3b, 0x3d, 0xf4, 0xd4, 0x5a, 0xbb, 0x2a, 0xa8, 0x29, 0xa3, 0xd8, 0x82, 0x66, 0x1a,
	0xd1, 0x69, 0x7a, 0x1b, 0xf3, 0x41, 0x1c, 0xf8, 0x93, 0x07, 0x15, 0x64, 0xb3, 0xbe, 0x7f, 0x29,
	0x67, 0xa7, 0xa4, 0x4d, 0x9e, 0x9c, 0xc6, 0xef, 0xa0, 0xc1, 0x22, 0x9e, 0x3c, 0x4c, 0x63, 0x3f,
	0xe2, 0xc2, 0x6d, 0x5d, 0xba, 0x2d, 0x83, 0xf8, 0xb7, 0xb0, 0x4d, 0x83, 0x20, 0x9e, 0x50, 0xce,
	0xcc, 0xa9, 0xe6, 0x79, 0x09, 0x4b, 0x53, 0x75, 0xb3, 0xad, 0x1c, 0x6e, 0x7c, 0x5c, 0xbd, 0xa6,
	0x41, 0xca, 0xc8, 0xf3, 0xfd, 0xb2, 0x69, 0x87, 0x27, 0x6a, 0x43, 0x12, 0x55, 0x06, 0x45, 0xb7,
	0xd0, 0xe9, 0x54, 0x76, 0x52, 0x33, 0xeb, 0x96, 0xb9, 0x28, 0xce, 0x7f, 0x13, 0x5f, 0x9d, 0x26,
	0xf1, 0x6c, 0xea, 0x70, 0x3a, 0xb9, 0x53, 0xb7, 0xb2, 0xf3, 0x25, 0x50, 0x10, 0x97, 0x03, 0x5d,
	0xc6, 0xa9, 0x1f, 0xa8, 0x28, 0xeb, 0xa9, 0x32, 0x8a, 0xf7, 0x01, 0x7c, 0x1a, 0x0e, 0x92, 0xf8,
	0xda, 0x0f, 0x98, 0xba, 0x2d, 0x75, 0x0a, 0x08, 0x1e, 0xc1, 0x76, 0xc4, 0xf8, 0xb7, 0x71, 0x72,
	0xa7, 0xc7, 0xd1, 0xb5, 0x7f, 0x23, 0xc8, 0x53, 0x71, 0x5b, 0x39, 0xac, 0x1f, 0xfd, 0xfc, 0x25,
	0x6e, 0xad, 0xa7, 0x07, 0xc8, 0x73, 0x1b, 0xf8, 0x17, 0x80, 0x1e, 0x23, 0x66, 0x7f, 0x99, 0xb1,
	0x68, 0xc2, 0xd4, 0x1d, 0xe9, 0xfe, 0x19, 0x2e, 0xc8, 0x88, 0x66, 0xe1, 0xe9, 0x74, 0x96, 0xaa,
	0xbb, 0xb2, 0x53, 0x72, 0x11, 0x9f, 0x43, 0x83, 0x5d, 0xa7, 0x85, 0xd0, 0xf6, 0x64, 0xab, 0x7f,
	0xf9, 0x62, 0xab, 0x17, 0x95, 0x49, 0xf9, 0x2c, 0x3e, 0x83, 0xcd, 0x09, 0x9d, 0xd2, 0x2b, 0x3f,
	0xf0, 0xb9, 0xcf, 0x52, 0xf5, 0xb5, 0x4c, 0xf3, 0xdd, 0x4b, 0xb6, 0xf4, 0x82, 0x2e, 0x29, 0x9d,
	0x14, 0x61, 0x85, 0x8c, 0x53, 0x9e, 0xc4, 0x91, 0x9e, 0x30, 0x2f, 0x55, 0xbf, 0x90, 0xa6, 0x5e,
	0x0c, 0xab, 0x5f, 0x54, 0x26, 0xe5, 0xb3, 0xf8, 0x02, 0xb6, 0x66, 0x29, 0x4b, 0x06, 0x49, 0x7c,
	0xef, 0x7b, 0xcc, 0x33, 0xa2, 0x7b, 0x55, 0x95, 0x59, 0x7e, 0xf5, 0x92, 0xb9, 0x61, 0x59, 0xdd,
	0x10, 0x9d, 0x45, 0x9e, 0x1a, 0xc1, 0x97, 0x80, 0xe4, 0xd3, 0x5a, 0x34, 0xfc, 0x46, 0x1a, 0xfe,
	0xd5, 0x4b, 0x86, 0xdd, 0x27, 0xfa, 0x99, 0xe5, 0x67, 0x66, 0xc4, 0x1b, 0x25, 0x07, 0x5f, 0xd7,
	0xbf, 0x61, 0x29, 0x57, 0x5b, 0xd9, 0x1b, 0x55, 0x80, 0x7e, 0xf0, 0xb8, 0x6e, 0xfd, 0x5d, 0x81,
	0xed, 0x67, 0x8d, 0x86, 0xdb, 0x50, 0x63, 0x91, 0xdf, 0x13, 0xb6, 0x02, 0xf9, 0xfa, 0xd7, 0xe4,
	0x24, 0x5b, 0x80, 0xcb, 0xef, 0x6c, 0xe5, 0xbf, 0xdc, 0xd9, 0xf7, 0xd0, 0x4c, 0xd9, 0x64, 0x96,
	0xf8, 0xfc, 0x41, 0x76, 0xa6, 0x98, 0xd0, 0x72, 0x0c, 0x95, 0x51, 0xdc, 0x01, 0x7c, 0x45, 0x23,
	0xef, 0x5b, 0xdf, 0xe3, 0xb7, 0x3d, 0x3f, 0xf4, 0x79, 0xff, 0x6a, 0x9a, 0xca, 0x61, 0xdd, 0x20,
	0x4b, 0x76, 0xc4, 0x8b, 0x9c, 0x45, 0xc6, 0x02, 0xf9, 0xba, 0xd6, 0xc8, 0xa3, 0xdc, 0xfa, 0xb7,
	0x02, 0x8d, 0x52, 0xbb, 0x8a, 0x6b, 0xc0, 0xae, 0xd3, 0x93, 0x54, 0xbe, 0xfa, 0x15, 0x31, 0x13,
	0xe6, 0xa2, 0xb8, 0xc5, 0x61, 0x3c, 0x8b, 0xf8, 0x40, 0x8c, 0x0f, 0xb5, 0x22, 0x37, 0x0b, 0x08,
	0xee, 0xc1, 0x46, 0x18, 0xf1, 0x01, 0x4b, 0xc2, 0xec, 0x6d, 0x69, 0x1e, 0xfd, 0xfa, 0x7b, 0xdd,
	0x90, 0x4e, 0x5f, 0xda, 0x10, 0xe7, 0xc8, 0xa3, 0x05, 0xfc, 0x3b, 0xd8, 0x93, 0x8e, 0x09, 0x0b,
	0x28, 0xf7, 0xef, 0x59, 0x3f, 0x77, 0x9c, 0x7d, 0x39, 0x2c, 0xdf, 0x3c, 0x78, 0x07, 0xb0, 0xb0,
	0x86, 0xd7, 0xa0, 0x42, 0x46, 0x48, 0x91, 0xbf, 0x36, 0xaa, 0x88, 0xdf, 0x91, 0x8d, 0xaa, 0xad,
	0x7f, 0xad, 0xc2, 0x66, 0xf1, 0x62, 0x61, 0x0d, 0xaa, 0xd4, 0xf3, 0xe4, 0xc7, 0x52, 0xf3, 0xe8,
	0xc3, 0xf7, 0xb9, 0x8b, 0x0b, 0xe1, 0x81, 0x88, 0xb3, 0x58, 0x87, 0x15, 0x2f, 0x89, 0xa7, 0x6a,
	0xe5, 0xff, 0xb3, 0x21, 0x0f, 0x1f, 0x7c, 0xb7, 0x02, 0xb0, 0x00, 0x71, 0x0d, 0x56, 0xf5, 0x33,
	0x7b, 0x64, 0xa1, 0x57, 0x18, 0xc1, 0x66, 0x57, 0xd3, 0xc7, 0xf6, 0x85, 0x41, 0x88, 0xd9, 0x35,
	0x90, 0x82, 0x77, 0x60, 0x4b, 0x20, 0xc4, 0xd0, 0xba, 0x63, 0xc7, 0xd0, 0x88, 0x7e, 0x86, 0x2a,
	0xf2, 0x43, 0xc2, 0x1e, 0x59, 0x06, 0x41, 0x55, 0xb9, 0x76, 0x0c, 0xd7, 0xec, 0xa2, 0x15, 0xbc,
	0x01, 0x2b, 0xe7, 0x66, 0xaf, 0x87, 0x56, 0x05, 0xea, 0x18, 0xee, 0xa9, 0xd9, 0x45, 0x6b, 0xf3,
	0xf5, 0xd0, 0xec, 0xa2, 0x75, 0xf9, 0xd9, 0x61, 0xb8, 0x03, 0x5d, 0x1b, 0xa0, 0x0d, 0x61, 0xbb,
	0x67, 0x5a, 0xc3, 0xaf, 0xc7, 0x66, 0xbf, 0x3f, 0x74, 0xb5, 0xe3, 0x9e, 0x81, 0x6a, 0x78, 0x17,
	0x90, 0x65, 0xb8, 0xe3, 0x63, 0xd3, 0x12, 0x0e, 0xc9, 0x85, 0xa9, 0x1b, 0x08, 0xf0, 0x36, 0x34,
	0x24, 0x4a, 0x6c, 0xad, 0xab, 0x6b, 0x8e, 0x8b, 0xea, 0xb8, 0x01, 0x35, 0x01, 0x69, 0xdd, 0xbe,
	0x69, 0xa1, 0x4d, 0x61, 0x59, 0x88, 0x44, 0x1b, 0xa1, 0x06, 0xde, 0x84, 0x0d, 0x73, 0xa0, 0x8f,
	0x7b, 0xb6, 0x7e, 0x8e, 0x9a, 0x42, 0x53, 0x48, 0x59, 0xc4, 0x5b, 0xb8, 0x09, 0xe0, 0x5c, 0x3a,
	0xe3, 0xbe, 0xdd, 0x1d, 0xf6, 0x0c, 0x84, 0xc4, 0xb6, 0x90, 0x89, 0x36, 0x32, 0x6d, 0xb4, 0x9d,
	0x6f, 0xeb, 0x67, 0xc4, 0xb6, 0x5d, 0x84, 0x73, 0x79, 0xe0, 0x12, 0x4d, 0x37, 0xd0, 0x4e, 0xae,
	0x3e, 0xd0, 0x74, 0xdd, 0x45, 0xbb, 0xb9, 0x98, 0x85, 0xb1, 0x27, 0x3c, 0x0b, 0xf1, 0x58, 0x9c,
	0x7d, 0x9d, 0x4b, 0x96, 0x48, 0xe2, 0x0b, 0xc1, 0xae, 0x74, 0x64, 0x38, 0xf6, 0x90, 0xe8, 0x06,
	0x52, 0xf3, 0x7d, 0xd7, 0xec, 0x1b, 0xe8, 0x0d, 0xc6, 0xd0, 0x94, 0x92, 0x7b, 0x39, 0xd6, 0x6d,
	0xeb, 0xc4, 0x3c, 0x45, 0x2d, 0x51, 0x9c, 0xfe, 0xb9, 0x65, 0x77, 0xd1, 0x8f, 0xc4, 0xb2, 0x67,
	0x68, 0x8e, 0x81, 0xde, 0xe2, 0x2d, 0xa8, 0x6b, 0xc3, 0xae, 0xe9, 0x8e, 0x47, 0xc4, 0x74, 0x0d,
	0xf4, 0x63, 0xc1, 0x4f, 0x06, 0xe8, 0xb6, 0xe5, 0x12, 0xbb, 0x87, 0xf6, 0xe7, 0x54, 0x9f, 0x08,
	0xaa, 0x7f, 0x22, 0x5c, 0xf7, 0x8b, 0x85, 0x6d, 0x8b, 0xb8, 0x05, 0x92, 0xc5, 0xfd, 0x53, 0x59,
	0xa4, 0x4b, 0xa7, 0x67, 0x9f, 0xa2, 0x03, 0x91, 0xf1, 0x48, 0x3b, 0x37, 0xc6, 0x5a, 0x4f, 0x23,
	0x7d, 0xf4, 0x33, 0x61, 0xfc, 0x58, 0x50, 0x39, 0x76, 0x86, 0xce, 0xc0, 0xb0, 0xba, 0xe8, 0x9d,
	0x50, 0xc9, 0xfc, 0x89, 0xc6, 0x40, 0x5f, 0xb6, 0x1c, 0x68, 0x94, 0x06, 0xbf, 0x18, 0x9b, 0x74,
	0x3a, 0x15, 0x98, 0x47, 0x39, 0x9d, 0x5f, 0xf2, 0x22, 0x24, 0x34, 0xc2, 0xf9, 0xda, 0xf1, 0x6f,
	0xe6, 0x37, 0xbd, 0x08, 0xb5, 0x8e, 0x61, 0x77, 0xd9, 0xf8, 0xc7, 0x08, 0xaa, 0x77, 0xec, 0x61,
	0x3e, 0x58, 0xc5, 0x72, 0xf9, 0x5c, 0xfd, 0x58, 0xf9, 0x83, 0xd2, 0xd2, 0x61, 0x6f, 0xe9, 0xa4,
	0xff, 0x5f, 0x8c, 0x1c, 0x98, 0xd0, 0x2c, 0x7f, 0x64, 0x89, 0x5a, 0x58, 0xc6, 0x85, 0x41, 0xd0,
	0x2b, 0x41, 0x85, 0x41, 0x88, 0x4d, 0xc6, 0xb6, 0xd5, 0xbb, 0x44, 0x8a, 0xac, 0xf2, 0x50, 0xd7,
	0x0d, 0xc7, 0xc9, 0x10, 0x79, 0x5d, 0xb4, 0xde, 0x48, 0xbb, 0x74, 0x50, 0xf5, 0xf8, 0x8f, 0x7f,
	0xfb, 0xbc, 0xaf, 0x7c, 0xf7, 0x79, 0x5f, 0xf9, 0xc7, 0xe7, 0x7d, 0x05, 0x5a, 0x7e, 0xdc, 0xe1,
	0x3e, 0xa7, 0xd1, 0x75, 0x42, 0x43, 0x26, 0x1e, 0x80, 0xc7, 0x1b, 0x7d, 0x5c, 0x77, 0xc5, 0xc6,
	0x40, 0xfc, 0x4b, 0x4c, 0xff, 0xbc, 0x2a, 0xdf, 0xa5, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x62,
	0xc8, 0x99, 0x12, 0x49, 0x0e, 0x00, 0x00,
}

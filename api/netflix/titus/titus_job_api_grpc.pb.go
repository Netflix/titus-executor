// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package titus

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobManagementServiceClient is the client API for JobManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobManagementServiceClient interface {
	// Create a new job
	CreateJob(ctx context.Context, in *JobDescriptor, opts ...grpc.CallOption) (*JobId, error)
	// Modify the number of instances for a service job.
	UpdateJobCapacity(ctx context.Context, in *JobCapacityUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Modify job capacity for a service job. It allows you to specify only
	// values (min / max / desired) that need to be updated.
	UpdateJobCapacityWithOptionalAttributes(ctx context.Context, in *JobCapacityUpdateWithOptionalAttributes, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Mark a job as enabled or disabled. Disabled jobs are not auto-scaled.
	UpdateJobStatus(ctx context.Context, in *JobStatusUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update service job processes such as disable increase/decrease instance
	// count
	UpdateJobProcesses(ctx context.Context, in *JobProcessesUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update a job disruption budget.
	UpdateJobDisruptionBudget(ctx context.Context, in *JobDisruptionBudgetUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Return a collection of jobs matching the given criteria. The query result
	// is limited to the active data set. Finished jobs/tasks are not evaluated
	// when the query is executed.
	FindJobs(ctx context.Context, in *JobQuery, opts ...grpc.CallOption) (*JobQueryResult, error)
	// Return a job with given id.
	FindJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*Job, error)
	// On subscription, sends complete job (definition and active tasks). Next,
	// send distinct job definition
	// or task state chage notifications. The stream is closed by the server only
	// when the job is finished, which happens after the 'JobFinished'
	// notification is delivered.
	ObserveJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (JobManagementService_ObserveJobClient, error)
	// Equivalent to ObserveJob, applied to all active jobs. This stream never
	// completes.
	ObserveJobs(ctx context.Context, in *ObserveJobsQuery, opts ...grpc.CallOption) (JobManagementService_ObserveJobsClient, error)
	// `ObserveJobsWithKeepAlive` extends the `ObserveJobs` endpoint behavior by
	// supporting keep alive mechanism in the channel. This stream never
	// completes.
	ObserveJobsWithKeepAlive(ctx context.Context, opts ...grpc.CallOption) (JobManagementService_ObserveJobsWithKeepAliveClient, error)
	// Terminate all running tasks of a job, and than terminate the job.
	KillJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update the attributes of a job. This will either create new attributes or
	// replace existing ones with the same key.
	UpdateJobAttributes(ctx context.Context, in *JobAttributesUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete the attributes of a job.
	DeleteJobAttributes(ctx context.Context, in *JobAttributesDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get a task with the specified id.
	FindTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error)
	// Return a collection of tasks specified in the 'TaskQuery' request matching
	// the given criteria. The query result is limited to the active data set.
	// Finished jobs/tasks are not evaluated when the query is executed.
	FindTasks(ctx context.Context, in *TaskQuery, opts ...grpc.CallOption) (*TaskQueryResult, error)
	// Terminate a task with the given id. Depending on job type, the task might
	// be immediately restarted/replaced with a new one.
	KillTask(ctx context.Context, in *TaskKillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update the attributes of a task. This will either create new attributes or
	// replace existing ones with the same key.
	UpdateTaskAttributes(ctx context.Context, in *TaskAttributesUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete the attributes of a task.
	DeleteTaskAttributes(ctx context.Context, in *TaskAttributesDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Move a task from one service job to another. Source and destination jobs
	// must be service jobs, and compatible.
	// Jobs are compatible when their JobDescriptors are identical, ignoring the
	// following values:
	//
	// * owner
	// * applicationName
	// * jobGroupInfo (stack, details, sequence)
	// * disruptionBudget
	// * Any attributes not prefixed with `titus.` or `titusParameter.`
	// * Any container.attributes not prefixed with `titus.` or `titusParameter.`
	// * All information specific to service jobs (JobSpec): Capacity,
	// RetryPolicy, MigrationPolicy, etc
	MoveTask(ctx context.Context, in *TaskMoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type jobManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobManagementServiceClient(cc grpc.ClientConnInterface) JobManagementServiceClient {
	return &jobManagementServiceClient{cc}
}

func (c *jobManagementServiceClient) CreateJob(ctx context.Context, in *JobDescriptor, opts ...grpc.CallOption) (*JobId, error) {
	out := new(JobId)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateJobCapacity(ctx context.Context, in *JobCapacityUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateJobCapacity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateJobCapacityWithOptionalAttributes(ctx context.Context, in *JobCapacityUpdateWithOptionalAttributes, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateJobCapacityWithOptionalAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateJobStatus(ctx context.Context, in *JobStatusUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateJobProcesses(ctx context.Context, in *JobProcessesUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateJobProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateJobDisruptionBudget(ctx context.Context, in *JobDisruptionBudgetUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateJobDisruptionBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) FindJobs(ctx context.Context, in *JobQuery, opts ...grpc.CallOption) (*JobQueryResult, error) {
	out := new(JobQueryResult)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/FindJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) FindJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/FindJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) ObserveJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (JobManagementService_ObserveJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobManagementService_ServiceDesc.Streams[0], "/com.netflix.titus.JobManagementService/ObserveJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobManagementServiceObserveJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobManagementService_ObserveJobClient interface {
	Recv() (*JobChangeNotification, error)
	grpc.ClientStream
}

type jobManagementServiceObserveJobClient struct {
	grpc.ClientStream
}

func (x *jobManagementServiceObserveJobClient) Recv() (*JobChangeNotification, error) {
	m := new(JobChangeNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobManagementServiceClient) ObserveJobs(ctx context.Context, in *ObserveJobsQuery, opts ...grpc.CallOption) (JobManagementService_ObserveJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobManagementService_ServiceDesc.Streams[1], "/com.netflix.titus.JobManagementService/ObserveJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobManagementServiceObserveJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobManagementService_ObserveJobsClient interface {
	Recv() (*JobChangeNotification, error)
	grpc.ClientStream
}

type jobManagementServiceObserveJobsClient struct {
	grpc.ClientStream
}

func (x *jobManagementServiceObserveJobsClient) Recv() (*JobChangeNotification, error) {
	m := new(JobChangeNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobManagementServiceClient) ObserveJobsWithKeepAlive(ctx context.Context, opts ...grpc.CallOption) (JobManagementService_ObserveJobsWithKeepAliveClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobManagementService_ServiceDesc.Streams[2], "/com.netflix.titus.JobManagementService/ObserveJobsWithKeepAlive", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobManagementServiceObserveJobsWithKeepAliveClient{stream}
	return x, nil
}

type JobManagementService_ObserveJobsWithKeepAliveClient interface {
	Send(*ObserveJobsWithKeepAliveRequest) error
	Recv() (*JobChangeNotification, error)
	grpc.ClientStream
}

type jobManagementServiceObserveJobsWithKeepAliveClient struct {
	grpc.ClientStream
}

func (x *jobManagementServiceObserveJobsWithKeepAliveClient) Send(m *ObserveJobsWithKeepAliveRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jobManagementServiceObserveJobsWithKeepAliveClient) Recv() (*JobChangeNotification, error) {
	m := new(JobChangeNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobManagementServiceClient) KillJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/KillJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateJobAttributes(ctx context.Context, in *JobAttributesUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateJobAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) DeleteJobAttributes(ctx context.Context, in *JobAttributesDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/DeleteJobAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) FindTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/FindTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) FindTasks(ctx context.Context, in *TaskQuery, opts ...grpc.CallOption) (*TaskQueryResult, error) {
	out := new(TaskQueryResult)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/FindTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) KillTask(ctx context.Context, in *TaskKillRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/KillTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateTaskAttributes(ctx context.Context, in *TaskAttributesUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateTaskAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) DeleteTaskAttributes(ctx context.Context, in *TaskAttributesDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/DeleteTaskAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) MoveTask(ctx context.Context, in *TaskMoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/MoveTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobManagementServiceServer is the server API for JobManagementService service.
// All implementations must embed UnimplementedJobManagementServiceServer
// for forward compatibility
type JobManagementServiceServer interface {
	// Create a new job
	CreateJob(context.Context, *JobDescriptor) (*JobId, error)
	// Modify the number of instances for a service job.
	UpdateJobCapacity(context.Context, *JobCapacityUpdate) (*emptypb.Empty, error)
	// Modify job capacity for a service job. It allows you to specify only
	// values (min / max / desired) that need to be updated.
	UpdateJobCapacityWithOptionalAttributes(context.Context, *JobCapacityUpdateWithOptionalAttributes) (*emptypb.Empty, error)
	// Mark a job as enabled or disabled. Disabled jobs are not auto-scaled.
	UpdateJobStatus(context.Context, *JobStatusUpdate) (*emptypb.Empty, error)
	// Update service job processes such as disable increase/decrease instance
	// count
	UpdateJobProcesses(context.Context, *JobProcessesUpdate) (*emptypb.Empty, error)
	// Update a job disruption budget.
	UpdateJobDisruptionBudget(context.Context, *JobDisruptionBudgetUpdate) (*emptypb.Empty, error)
	// Return a collection of jobs matching the given criteria. The query result
	// is limited to the active data set. Finished jobs/tasks are not evaluated
	// when the query is executed.
	FindJobs(context.Context, *JobQuery) (*JobQueryResult, error)
	// Return a job with given id.
	FindJob(context.Context, *JobId) (*Job, error)
	// On subscription, sends complete job (definition and active tasks). Next,
	// send distinct job definition
	// or task state chage notifications. The stream is closed by the server only
	// when the job is finished, which happens after the 'JobFinished'
	// notification is delivered.
	ObserveJob(*JobId, JobManagementService_ObserveJobServer) error
	// Equivalent to ObserveJob, applied to all active jobs. This stream never
	// completes.
	ObserveJobs(*ObserveJobsQuery, JobManagementService_ObserveJobsServer) error
	// `ObserveJobsWithKeepAlive` extends the `ObserveJobs` endpoint behavior by
	// supporting keep alive mechanism in the channel. This stream never
	// completes.
	ObserveJobsWithKeepAlive(JobManagementService_ObserveJobsWithKeepAliveServer) error
	// Terminate all running tasks of a job, and than terminate the job.
	KillJob(context.Context, *JobId) (*emptypb.Empty, error)
	// Update the attributes of a job. This will either create new attributes or
	// replace existing ones with the same key.
	UpdateJobAttributes(context.Context, *JobAttributesUpdate) (*emptypb.Empty, error)
	// Delete the attributes of a job.
	DeleteJobAttributes(context.Context, *JobAttributesDeleteRequest) (*emptypb.Empty, error)
	// Get a task with the specified id.
	FindTask(context.Context, *TaskId) (*Task, error)
	// Return a collection of tasks specified in the 'TaskQuery' request matching
	// the given criteria. The query result is limited to the active data set.
	// Finished jobs/tasks are not evaluated when the query is executed.
	FindTasks(context.Context, *TaskQuery) (*TaskQueryResult, error)
	// Terminate a task with the given id. Depending on job type, the task might
	// be immediately restarted/replaced with a new one.
	KillTask(context.Context, *TaskKillRequest) (*emptypb.Empty, error)
	// Update the attributes of a task. This will either create new attributes or
	// replace existing ones with the same key.
	UpdateTaskAttributes(context.Context, *TaskAttributesUpdate) (*emptypb.Empty, error)
	// Delete the attributes of a task.
	DeleteTaskAttributes(context.Context, *TaskAttributesDeleteRequest) (*emptypb.Empty, error)
	// Move a task from one service job to another. Source and destination jobs
	// must be service jobs, and compatible.
	// Jobs are compatible when their JobDescriptors are identical, ignoring the
	// following values:
	//
	// * owner
	// * applicationName
	// * jobGroupInfo (stack, details, sequence)
	// * disruptionBudget
	// * Any attributes not prefixed with `titus.` or `titusParameter.`
	// * Any container.attributes not prefixed with `titus.` or `titusParameter.`
	// * All information specific to service jobs (JobSpec): Capacity,
	// RetryPolicy, MigrationPolicy, etc
	MoveTask(context.Context, *TaskMoveRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedJobManagementServiceServer()
}

// UnimplementedJobManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobManagementServiceServer struct {
}

func (UnimplementedJobManagementServiceServer) CreateJob(context.Context, *JobDescriptor) (*JobId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedJobManagementServiceServer) UpdateJobCapacity(context.Context, *JobCapacityUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobCapacity not implemented")
}
func (UnimplementedJobManagementServiceServer) UpdateJobCapacityWithOptionalAttributes(context.Context, *JobCapacityUpdateWithOptionalAttributes) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobCapacityWithOptionalAttributes not implemented")
}
func (UnimplementedJobManagementServiceServer) UpdateJobStatus(context.Context, *JobStatusUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobStatus not implemented")
}
func (UnimplementedJobManagementServiceServer) UpdateJobProcesses(context.Context, *JobProcessesUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobProcesses not implemented")
}
func (UnimplementedJobManagementServiceServer) UpdateJobDisruptionBudget(context.Context, *JobDisruptionBudgetUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobDisruptionBudget not implemented")
}
func (UnimplementedJobManagementServiceServer) FindJobs(context.Context, *JobQuery) (*JobQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindJobs not implemented")
}
func (UnimplementedJobManagementServiceServer) FindJob(context.Context, *JobId) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindJob not implemented")
}
func (UnimplementedJobManagementServiceServer) ObserveJob(*JobId, JobManagementService_ObserveJobServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveJob not implemented")
}
func (UnimplementedJobManagementServiceServer) ObserveJobs(*ObserveJobsQuery, JobManagementService_ObserveJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveJobs not implemented")
}
func (UnimplementedJobManagementServiceServer) ObserveJobsWithKeepAlive(JobManagementService_ObserveJobsWithKeepAliveServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveJobsWithKeepAlive not implemented")
}
func (UnimplementedJobManagementServiceServer) KillJob(context.Context, *JobId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillJob not implemented")
}
func (UnimplementedJobManagementServiceServer) UpdateJobAttributes(context.Context, *JobAttributesUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobAttributes not implemented")
}
func (UnimplementedJobManagementServiceServer) DeleteJobAttributes(context.Context, *JobAttributesDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobAttributes not implemented")
}
func (UnimplementedJobManagementServiceServer) FindTask(context.Context, *TaskId) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTask not implemented")
}
func (UnimplementedJobManagementServiceServer) FindTasks(context.Context, *TaskQuery) (*TaskQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTasks not implemented")
}
func (UnimplementedJobManagementServiceServer) KillTask(context.Context, *TaskKillRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillTask not implemented")
}
func (UnimplementedJobManagementServiceServer) UpdateTaskAttributes(context.Context, *TaskAttributesUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskAttributes not implemented")
}
func (UnimplementedJobManagementServiceServer) DeleteTaskAttributes(context.Context, *TaskAttributesDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskAttributes not implemented")
}
func (UnimplementedJobManagementServiceServer) MoveTask(context.Context, *TaskMoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveTask not implemented")
}
func (UnimplementedJobManagementServiceServer) mustEmbedUnimplementedJobManagementServiceServer() {}

// UnsafeJobManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobManagementServiceServer will
// result in compilation errors.
type UnsafeJobManagementServiceServer interface {
	mustEmbedUnimplementedJobManagementServiceServer()
}

func RegisterJobManagementServiceServer(s grpc.ServiceRegistrar, srv JobManagementServiceServer) {
	s.RegisterService(&JobManagementService_ServiceDesc, srv)
}

func _JobManagementService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).CreateJob(ctx, req.(*JobDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateJobCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCapacityUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateJobCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateJobCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateJobCapacity(ctx, req.(*JobCapacityUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateJobCapacityWithOptionalAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCapacityUpdateWithOptionalAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateJobCapacityWithOptionalAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateJobCapacityWithOptionalAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateJobCapacityWithOptionalAttributes(ctx, req.(*JobCapacityUpdateWithOptionalAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateJobStatus(ctx, req.(*JobStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateJobProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobProcessesUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateJobProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateJobProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateJobProcesses(ctx, req.(*JobProcessesUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateJobDisruptionBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDisruptionBudgetUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateJobDisruptionBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateJobDisruptionBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateJobDisruptionBudget(ctx, req.(*JobDisruptionBudgetUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_FindJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).FindJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/FindJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).FindJobs(ctx, req.(*JobQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_FindJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).FindJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/FindJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).FindJob(ctx, req.(*JobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_ObserveJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobManagementServiceServer).ObserveJob(m, &jobManagementServiceObserveJobServer{stream})
}

type JobManagementService_ObserveJobServer interface {
	Send(*JobChangeNotification) error
	grpc.ServerStream
}

type jobManagementServiceObserveJobServer struct {
	grpc.ServerStream
}

func (x *jobManagementServiceObserveJobServer) Send(m *JobChangeNotification) error {
	return x.ServerStream.SendMsg(m)
}

func _JobManagementService_ObserveJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveJobsQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobManagementServiceServer).ObserveJobs(m, &jobManagementServiceObserveJobsServer{stream})
}

type JobManagementService_ObserveJobsServer interface {
	Send(*JobChangeNotification) error
	grpc.ServerStream
}

type jobManagementServiceObserveJobsServer struct {
	grpc.ServerStream
}

func (x *jobManagementServiceObserveJobsServer) Send(m *JobChangeNotification) error {
	return x.ServerStream.SendMsg(m)
}

func _JobManagementService_ObserveJobsWithKeepAlive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobManagementServiceServer).ObserveJobsWithKeepAlive(&jobManagementServiceObserveJobsWithKeepAliveServer{stream})
}

type JobManagementService_ObserveJobsWithKeepAliveServer interface {
	Send(*JobChangeNotification) error
	Recv() (*ObserveJobsWithKeepAliveRequest, error)
	grpc.ServerStream
}

type jobManagementServiceObserveJobsWithKeepAliveServer struct {
	grpc.ServerStream
}

func (x *jobManagementServiceObserveJobsWithKeepAliveServer) Send(m *JobChangeNotification) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jobManagementServiceObserveJobsWithKeepAliveServer) Recv() (*ObserveJobsWithKeepAliveRequest, error) {
	m := new(ObserveJobsWithKeepAliveRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _JobManagementService_KillJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).KillJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/KillJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).KillJob(ctx, req.(*JobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateJobAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobAttributesUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateJobAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateJobAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateJobAttributes(ctx, req.(*JobAttributesUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_DeleteJobAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobAttributesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).DeleteJobAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/DeleteJobAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).DeleteJobAttributes(ctx, req.(*JobAttributesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_FindTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).FindTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/FindTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).FindTask(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_FindTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).FindTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/FindTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).FindTasks(ctx, req.(*TaskQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_KillTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskKillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).KillTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/KillTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).KillTask(ctx, req.(*TaskKillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateTaskAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAttributesUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateTaskAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateTaskAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateTaskAttributes(ctx, req.(*TaskAttributesUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_DeleteTaskAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAttributesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).DeleteTaskAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/DeleteTaskAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).DeleteTaskAttributes(ctx, req.(*TaskAttributesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_MoveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).MoveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/MoveTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).MoveTask(ctx, req.(*TaskMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobManagementService_ServiceDesc is the grpc.ServiceDesc for JobManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.netflix.titus.JobManagementService",
	HandlerType: (*JobManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _JobManagementService_CreateJob_Handler,
		},
		{
			MethodName: "UpdateJobCapacity",
			Handler:    _JobManagementService_UpdateJobCapacity_Handler,
		},
		{
			MethodName: "UpdateJobCapacityWithOptionalAttributes",
			Handler:    _JobManagementService_UpdateJobCapacityWithOptionalAttributes_Handler,
		},
		{
			MethodName: "UpdateJobStatus",
			Handler:    _JobManagementService_UpdateJobStatus_Handler,
		},
		{
			MethodName: "UpdateJobProcesses",
			Handler:    _JobManagementService_UpdateJobProcesses_Handler,
		},
		{
			MethodName: "UpdateJobDisruptionBudget",
			Handler:    _JobManagementService_UpdateJobDisruptionBudget_Handler,
		},
		{
			MethodName: "FindJobs",
			Handler:    _JobManagementService_FindJobs_Handler,
		},
		{
			MethodName: "FindJob",
			Handler:    _JobManagementService_FindJob_Handler,
		},
		{
			MethodName: "KillJob",
			Handler:    _JobManagementService_KillJob_Handler,
		},
		{
			MethodName: "UpdateJobAttributes",
			Handler:    _JobManagementService_UpdateJobAttributes_Handler,
		},
		{
			MethodName: "DeleteJobAttributes",
			Handler:    _JobManagementService_DeleteJobAttributes_Handler,
		},
		{
			MethodName: "FindTask",
			Handler:    _JobManagementService_FindTask_Handler,
		},
		{
			MethodName: "FindTasks",
			Handler:    _JobManagementService_FindTasks_Handler,
		},
		{
			MethodName: "KillTask",
			Handler:    _JobManagementService_KillTask_Handler,
		},
		{
			MethodName: "UpdateTaskAttributes",
			Handler:    _JobManagementService_UpdateTaskAttributes_Handler,
		},
		{
			MethodName: "DeleteTaskAttributes",
			Handler:    _JobManagementService_DeleteTaskAttributes_Handler,
		},
		{
			MethodName: "MoveTask",
			Handler:    _JobManagementService_MoveTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveJob",
			Handler:       _JobManagementService_ObserveJob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveJobs",
			Handler:       _JobManagementService_ObserveJobs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveJobsWithKeepAlive",
			Handler:       _JobManagementService_ObserveJobsWithKeepAlive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "netflix/titus/titus_job_api.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package titus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentManagementServiceClient is the client API for AgentManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentManagementServiceClient interface {
	/// Return all known Titus agent server groups.
	GetInstanceGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AgentInstanceGroups, error)
	/// Return an agent server group with the given id.
	GetInstanceGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentInstanceGroup, error)
	/// Return an agent instance with the given id.
	GetAgentInstance(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentInstance, error)
	/// Return all agents matching the provided query criteria.
	FindAgentInstances(ctx context.Context, in *AgentQuery, opts ...grpc.CallOption) (*AgentInstances, error)
	/// Update tier assignment of an agent instance group.
	UpdateInstanceGroupTier(ctx context.Context, in *TierUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	/// Change lifecycle state of an agent instance group.
	UpdateInstanceGroupLifecycleState(ctx context.Context, in *InstanceGroupLifecycleStateUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	/// Update the attributes of an instance group. This will either create new attributes or replacing existing ones with the same key.
	UpdateInstanceGroupAttributes(ctx context.Context, in *InstanceGroupAttributesUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	/// Delete the attributes of an instance group.
	DeleteInstanceGroupAttributes(ctx context.Context, in *DeleteInstanceGroupAttributesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	/// Update the attributes of an agent instance. This will either create new attributes or replacing existing ones with the same key.
	UpdateAgentInstanceAttributes(ctx context.Context, in *AgentInstanceAttributesUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	/// Delete the attributes of an agent instance.
	DeleteAgentInstanceAttributes(ctx context.Context, in *DeleteAgentInstanceAttributesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	/// Sends first current snapshot of the agent topology, and next an event for each topology change.
	ObserveAgents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AgentManagementService_ObserveAgentsClient, error)
}

type agentManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentManagementServiceClient(cc grpc.ClientConnInterface) AgentManagementServiceClient {
	return &agentManagementServiceClient{cc}
}

func (c *agentManagementServiceClient) GetInstanceGroups(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AgentInstanceGroups, error) {
	out := new(AgentInstanceGroups)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.AgentManagementService/GetInstanceGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagementServiceClient) GetInstanceGroup(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentInstanceGroup, error) {
	out := new(AgentInstanceGroup)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.AgentManagementService/GetInstanceGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagementServiceClient) GetAgentInstance(ctx context.Context, in *Id, opts ...grpc.CallOption) (*AgentInstance, error) {
	out := new(AgentInstance)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.AgentManagementService/GetAgentInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagementServiceClient) FindAgentInstances(ctx context.Context, in *AgentQuery, opts ...grpc.CallOption) (*AgentInstances, error) {
	out := new(AgentInstances)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.AgentManagementService/FindAgentInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagementServiceClient) UpdateInstanceGroupTier(ctx context.Context, in *TierUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.AgentManagementService/UpdateInstanceGroupTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagementServiceClient) UpdateInstanceGroupLifecycleState(ctx context.Context, in *InstanceGroupLifecycleStateUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.AgentManagementService/UpdateInstanceGroupLifecycleState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagementServiceClient) UpdateInstanceGroupAttributes(ctx context.Context, in *InstanceGroupAttributesUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.AgentManagementService/UpdateInstanceGroupAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagementServiceClient) DeleteInstanceGroupAttributes(ctx context.Context, in *DeleteInstanceGroupAttributesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.AgentManagementService/DeleteInstanceGroupAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagementServiceClient) UpdateAgentInstanceAttributes(ctx context.Context, in *AgentInstanceAttributesUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.AgentManagementService/UpdateAgentInstanceAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagementServiceClient) DeleteAgentInstanceAttributes(ctx context.Context, in *DeleteAgentInstanceAttributesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.AgentManagementService/DeleteAgentInstanceAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentManagementServiceClient) ObserveAgents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AgentManagementService_ObserveAgentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentManagementService_ServiceDesc.Streams[0], "/com.netflix.titus.AgentManagementService/ObserveAgents", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentManagementServiceObserveAgentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentManagementService_ObserveAgentsClient interface {
	Recv() (*AgentChangeEvent, error)
	grpc.ClientStream
}

type agentManagementServiceObserveAgentsClient struct {
	grpc.ClientStream
}

func (x *agentManagementServiceObserveAgentsClient) Recv() (*AgentChangeEvent, error) {
	m := new(AgentChangeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentManagementServiceServer is the server API for AgentManagementService service.
// All implementations must embed UnimplementedAgentManagementServiceServer
// for forward compatibility
type AgentManagementServiceServer interface {
	/// Return all known Titus agent server groups.
	GetInstanceGroups(context.Context, *emptypb.Empty) (*AgentInstanceGroups, error)
	/// Return an agent server group with the given id.
	GetInstanceGroup(context.Context, *Id) (*AgentInstanceGroup, error)
	/// Return an agent instance with the given id.
	GetAgentInstance(context.Context, *Id) (*AgentInstance, error)
	/// Return all agents matching the provided query criteria.
	FindAgentInstances(context.Context, *AgentQuery) (*AgentInstances, error)
	/// Update tier assignment of an agent instance group.
	UpdateInstanceGroupTier(context.Context, *TierUpdate) (*emptypb.Empty, error)
	/// Change lifecycle state of an agent instance group.
	UpdateInstanceGroupLifecycleState(context.Context, *InstanceGroupLifecycleStateUpdate) (*emptypb.Empty, error)
	/// Update the attributes of an instance group. This will either create new attributes or replacing existing ones with the same key.
	UpdateInstanceGroupAttributes(context.Context, *InstanceGroupAttributesUpdate) (*emptypb.Empty, error)
	/// Delete the attributes of an instance group.
	DeleteInstanceGroupAttributes(context.Context, *DeleteInstanceGroupAttributesRequest) (*emptypb.Empty, error)
	/// Update the attributes of an agent instance. This will either create new attributes or replacing existing ones with the same key.
	UpdateAgentInstanceAttributes(context.Context, *AgentInstanceAttributesUpdate) (*emptypb.Empty, error)
	/// Delete the attributes of an agent instance.
	DeleteAgentInstanceAttributes(context.Context, *DeleteAgentInstanceAttributesRequest) (*emptypb.Empty, error)
	/// Sends first current snapshot of the agent topology, and next an event for each topology change.
	ObserveAgents(*emptypb.Empty, AgentManagementService_ObserveAgentsServer) error
	mustEmbedUnimplementedAgentManagementServiceServer()
}

// UnimplementedAgentManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentManagementServiceServer struct {
}

func (UnimplementedAgentManagementServiceServer) GetInstanceGroups(context.Context, *emptypb.Empty) (*AgentInstanceGroups, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceGroups not implemented")
}
func (UnimplementedAgentManagementServiceServer) GetInstanceGroup(context.Context, *Id) (*AgentInstanceGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceGroup not implemented")
}
func (UnimplementedAgentManagementServiceServer) GetAgentInstance(context.Context, *Id) (*AgentInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentInstance not implemented")
}
func (UnimplementedAgentManagementServiceServer) FindAgentInstances(context.Context, *AgentQuery) (*AgentInstances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAgentInstances not implemented")
}
func (UnimplementedAgentManagementServiceServer) UpdateInstanceGroupTier(context.Context, *TierUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceGroupTier not implemented")
}
func (UnimplementedAgentManagementServiceServer) UpdateInstanceGroupLifecycleState(context.Context, *InstanceGroupLifecycleStateUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceGroupLifecycleState not implemented")
}
func (UnimplementedAgentManagementServiceServer) UpdateInstanceGroupAttributes(context.Context, *InstanceGroupAttributesUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceGroupAttributes not implemented")
}
func (UnimplementedAgentManagementServiceServer) DeleteInstanceGroupAttributes(context.Context, *DeleteInstanceGroupAttributesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstanceGroupAttributes not implemented")
}
func (UnimplementedAgentManagementServiceServer) UpdateAgentInstanceAttributes(context.Context, *AgentInstanceAttributesUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentInstanceAttributes not implemented")
}
func (UnimplementedAgentManagementServiceServer) DeleteAgentInstanceAttributes(context.Context, *DeleteAgentInstanceAttributesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgentInstanceAttributes not implemented")
}
func (UnimplementedAgentManagementServiceServer) ObserveAgents(*emptypb.Empty, AgentManagementService_ObserveAgentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveAgents not implemented")
}
func (UnimplementedAgentManagementServiceServer) mustEmbedUnimplementedAgentManagementServiceServer() {
}

// UnsafeAgentManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentManagementServiceServer will
// result in compilation errors.
type UnsafeAgentManagementServiceServer interface {
	mustEmbedUnimplementedAgentManagementServiceServer()
}

func RegisterAgentManagementServiceServer(s grpc.ServiceRegistrar, srv AgentManagementServiceServer) {
	s.RegisterService(&AgentManagementService_ServiceDesc, srv)
}

func _AgentManagementService_GetInstanceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagementServiceServer).GetInstanceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.AgentManagementService/GetInstanceGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagementServiceServer).GetInstanceGroups(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagementService_GetInstanceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagementServiceServer).GetInstanceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.AgentManagementService/GetInstanceGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagementServiceServer).GetInstanceGroup(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagementService_GetAgentInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagementServiceServer).GetAgentInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.AgentManagementService/GetAgentInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagementServiceServer).GetAgentInstance(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagementService_FindAgentInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagementServiceServer).FindAgentInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.AgentManagementService/FindAgentInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagementServiceServer).FindAgentInstances(ctx, req.(*AgentQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagementService_UpdateInstanceGroupTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TierUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagementServiceServer).UpdateInstanceGroupTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.AgentManagementService/UpdateInstanceGroupTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagementServiceServer).UpdateInstanceGroupTier(ctx, req.(*TierUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagementService_UpdateInstanceGroupLifecycleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceGroupLifecycleStateUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagementServiceServer).UpdateInstanceGroupLifecycleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.AgentManagementService/UpdateInstanceGroupLifecycleState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagementServiceServer).UpdateInstanceGroupLifecycleState(ctx, req.(*InstanceGroupLifecycleStateUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagementService_UpdateInstanceGroupAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceGroupAttributesUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagementServiceServer).UpdateInstanceGroupAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.AgentManagementService/UpdateInstanceGroupAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagementServiceServer).UpdateInstanceGroupAttributes(ctx, req.(*InstanceGroupAttributesUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagementService_DeleteInstanceGroupAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceGroupAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagementServiceServer).DeleteInstanceGroupAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.AgentManagementService/DeleteInstanceGroupAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagementServiceServer).DeleteInstanceGroupAttributes(ctx, req.(*DeleteInstanceGroupAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagementService_UpdateAgentInstanceAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInstanceAttributesUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagementServiceServer).UpdateAgentInstanceAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.AgentManagementService/UpdateAgentInstanceAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagementServiceServer).UpdateAgentInstanceAttributes(ctx, req.(*AgentInstanceAttributesUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagementService_DeleteAgentInstanceAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentInstanceAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentManagementServiceServer).DeleteAgentInstanceAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.AgentManagementService/DeleteAgentInstanceAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentManagementServiceServer).DeleteAgentInstanceAttributes(ctx, req.(*DeleteAgentInstanceAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentManagementService_ObserveAgents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentManagementServiceServer).ObserveAgents(m, &agentManagementServiceObserveAgentsServer{stream})
}

type AgentManagementService_ObserveAgentsServer interface {
	Send(*AgentChangeEvent) error
	grpc.ServerStream
}

type agentManagementServiceObserveAgentsServer struct {
	grpc.ServerStream
}

func (x *agentManagementServiceObserveAgentsServer) Send(m *AgentChangeEvent) error {
	return x.ServerStream.SendMsg(m)
}

// AgentManagementService_ServiceDesc is the grpc.ServiceDesc for AgentManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.netflix.titus.AgentManagementService",
	HandlerType: (*AgentManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInstanceGroups",
			Handler:    _AgentManagementService_GetInstanceGroups_Handler,
		},
		{
			MethodName: "GetInstanceGroup",
			Handler:    _AgentManagementService_GetInstanceGroup_Handler,
		},
		{
			MethodName: "GetAgentInstance",
			Handler:    _AgentManagementService_GetAgentInstance_Handler,
		},
		{
			MethodName: "FindAgentInstances",
			Handler:    _AgentManagementService_FindAgentInstances_Handler,
		},
		{
			MethodName: "UpdateInstanceGroupTier",
			Handler:    _AgentManagementService_UpdateInstanceGroupTier_Handler,
		},
		{
			MethodName: "UpdateInstanceGroupLifecycleState",
			Handler:    _AgentManagementService_UpdateInstanceGroupLifecycleState_Handler,
		},
		{
			MethodName: "UpdateInstanceGroupAttributes",
			Handler:    _AgentManagementService_UpdateInstanceGroupAttributes_Handler,
		},
		{
			MethodName: "DeleteInstanceGroupAttributes",
			Handler:    _AgentManagementService_DeleteInstanceGroupAttributes_Handler,
		},
		{
			MethodName: "UpdateAgentInstanceAttributes",
			Handler:    _AgentManagementService_UpdateAgentInstanceAttributes_Handler,
		},
		{
			MethodName: "DeleteAgentInstanceAttributes",
			Handler:    _AgentManagementService_DeleteAgentInstanceAttributes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveAgents",
			Handler:       _AgentManagementService_ObserveAgents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "netflix/titus/titus_agent_api.proto",
}

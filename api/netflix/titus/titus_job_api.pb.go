// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: netflix/titus/titus_job_api.proto

// Titus job management API specification.
//

package titus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkConfiguration_NetworkMode int32

const (
	// Unknown, the backend will have to chose a sane default base on other inputs
	NetworkConfiguration_UnknownNetworkMode NetworkConfiguration_NetworkMode = 0
	// IPv4 only means the task will not get an ipv6 address, and will only get a unique v4.
	NetworkConfiguration_Ipv4Only NetworkConfiguration_NetworkMode = 1
	// IPv6 And IPv4 (True Dual Stack), each task gets a unique v6 and v4 address.
	NetworkConfiguration_Ipv6AndIpv4 NetworkConfiguration_NetworkMode = 2
	// IPv6 and IPv4 Fallback uses the Titus IPv4 "transition mechanism" to give v4
	// connectivity transparently without providing every container their own IPv4 address.
	// From a spinnaker/task perspective, only an IPv6 address is allocated to the task.
	NetworkConfiguration_Ipv6AndIpv4Fallback NetworkConfiguration_NetworkMode = 3
	// IPv6 Only is for true believers, no IPv4 connectivity is provided.
	NetworkConfiguration_Ipv6Only NetworkConfiguration_NetworkMode = 4
)

// Enum value maps for NetworkConfiguration_NetworkMode.
var (
	NetworkConfiguration_NetworkMode_name = map[int32]string{
		0: "UnknownNetworkMode",
		1: "Ipv4Only",
		2: "Ipv6AndIpv4",
		3: "Ipv6AndIpv4Fallback",
		4: "Ipv6Only",
	}
	NetworkConfiguration_NetworkMode_value = map[string]int32{
		"UnknownNetworkMode":  0,
		"Ipv4Only":            1,
		"Ipv6AndIpv4":         2,
		"Ipv6AndIpv4Fallback": 3,
		"Ipv6Only":            4,
	}
)

func (x NetworkConfiguration_NetworkMode) Enum() *NetworkConfiguration_NetworkMode {
	p := new(NetworkConfiguration_NetworkMode)
	*p = x
	return p
}

func (x NetworkConfiguration_NetworkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkConfiguration_NetworkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_titus_job_api_proto_enumTypes[0].Descriptor()
}

func (NetworkConfiguration_NetworkMode) Type() protoreflect.EnumType {
	return &file_netflix_titus_titus_job_api_proto_enumTypes[0]
}

func (x NetworkConfiguration_NetworkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkConfiguration_NetworkMode.Descriptor instead.
func (NetworkConfiguration_NetworkMode) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{4, 0}
}

/// State information associated with a job.
type JobStatus_JobState int32

const (
	/// A job is persisted in Titus and is ready to be scheduled.
	JobStatus_Accepted JobStatus_JobState = 0
	/// A job still has running tasks that were requested to be terminated. No more tasks for this job are deployed.
	//  Job policy update operations are not allowed.
	JobStatus_KillInitiated JobStatus_JobState = 1
	/// A job has no running tasks, and new tasks cannot be created. Job policy update operations are not allowed.
	JobStatus_Finished JobStatus_JobState = 2
)

// Enum value maps for JobStatus_JobState.
var (
	JobStatus_JobState_name = map[int32]string{
		0: "Accepted",
		1: "KillInitiated",
		2: "Finished",
	}
	JobStatus_JobState_value = map[string]int32{
		"Accepted":      0,
		"KillInitiated": 1,
		"Finished":      2,
	}
)

func (x JobStatus_JobState) Enum() *JobStatus_JobState {
	p := new(JobStatus_JobState)
	*p = x
	return p
}

func (x JobStatus_JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus_JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_titus_job_api_proto_enumTypes[1].Descriptor()
}

func (JobStatus_JobState) Type() protoreflect.EnumType {
	return &file_netflix_titus_titus_job_api_proto_enumTypes[1]
}

func (x JobStatus_JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus_JobState.Descriptor instead.
func (JobStatus_JobState) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{16, 0}
}

/// State information associated with a task.
type TaskStatus_TaskState int32

const (
	/// A task was passed to the scheduler but has no resources allocated yet.
	TaskStatus_Accepted TaskStatus_TaskState = 0
	/// A task had resources allocated and was passed to Mesos.
	TaskStatus_Launched TaskStatus_TaskState = 1
	/// An executor provisioned resources for a task.
	TaskStatus_StartInitiated TaskStatus_TaskState = 2
	/// The container was started.
	TaskStatus_Started TaskStatus_TaskState = 3
	/// A user requested the task to be terminated. An executor is stopping the task and releasing its allocated resources.
	TaskStatus_KillInitiated TaskStatus_TaskState = 4
	/// No connectivity between Mesos and an agent running a task. The task's state cannot be determined until the connection
	//  is established again.
	TaskStatus_Disconnected TaskStatus_TaskState = 5
	/// A task completed or was forced by a user to be terminated. All resources previously assigned to this task are released.
	TaskStatus_Finished TaskStatus_TaskState = 6
)

// Enum value maps for TaskStatus_TaskState.
var (
	TaskStatus_TaskState_name = map[int32]string{
		0: "Accepted",
		1: "Launched",
		2: "StartInitiated",
		3: "Started",
		4: "KillInitiated",
		5: "Disconnected",
		6: "Finished",
	}
	TaskStatus_TaskState_value = map[string]int32{
		"Accepted":       0,
		"Launched":       1,
		"StartInitiated": 2,
		"Started":        3,
		"KillInitiated":  4,
		"Disconnected":   5,
		"Finished":       6,
	}
)

func (x TaskStatus_TaskState) Enum() *TaskStatus_TaskState {
	p := new(TaskStatus_TaskState)
	*p = x
	return p
}

func (x TaskStatus_TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus_TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_netflix_titus_titus_job_api_proto_enumTypes[2].Descriptor()
}

func (TaskStatus_TaskState) Type() protoreflect.EnumType {
	return &file_netflix_titus_titus_job_api_proto_enumTypes[2]
}

func (x TaskStatus_TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus_TaskState.Descriptor instead.
func (TaskStatus_TaskState) EnumDescriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{17, 0}
}

/// An owner of a job.
type Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) An owner's email address.
	TeamEmail string `protobuf:"bytes,1,opt,name=teamEmail,proto3" json:"teamEmail,omitempty"`
}

func (x *Owner) Reset() {
	*x = Owner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Owner) ProtoMessage() {}

func (x *Owner) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Owner.ProtoReflect.Descriptor instead.
func (*Owner) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{0}
}

func (x *Owner) GetTeamEmail() string {
	if x != nil {
		return x.TeamEmail
	}
	return ""
}

/// Additional information for building a supplementary job identifier, as the 'applicationName' can be shared by
// many jobs running at the same time in Titus. By setting 'JobGroupInfo', a user may create a job id that is guaranteed
// to be unique accross all currently running Titus jobs. The uniquness is checked if any of the attributes
// in this record is a non empty string. The full name is built as: '<application_name>-<stack>-<detail>-<sequence>.
type JobGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Optional) Any text. It is recommended (but not required), that the value does not include the '-' character.
	Stack string `protobuf:"bytes,1,opt,name=stack,proto3" json:"stack,omitempty"`
	/// (Optional) Any text. It is recommended (but not required), that the value does not include the '-' character.
	Detail string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	/// (Optional) Any text. It is recommended (but not required), that the value does not include the '-' character.
	Sequence string `protobuf:"bytes,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *JobGroupInfo) Reset() {
	*x = JobGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGroupInfo) ProtoMessage() {}

func (x *JobGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGroupInfo.ProtoReflect.Descriptor instead.
func (*JobGroupInfo) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{1}
}

func (x *JobGroupInfo) GetStack() string {
	if x != nil {
		return x.Stack
	}
	return ""
}

func (x *JobGroupInfo) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *JobGroupInfo) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

/// Task placement constraints. Currently supported constraint types are:
// * zoneBalance - distributes tasks of a job evenly among the availability zones
// * uniqueHost - runs each task of a job on a different agent
// * exclusiveHost - ensures that an agent is exclusively assigned to a given job
type Constraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Optional) A map of constraint name/values. If multiple constraints are given, all must be met (logical 'and').
	Constraints map[string]string `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Not supported yet.
	// (Optional) An expression combining multiple constraints. For example 'zoneBalance AND serverGroup == "mySG"'.
	// Avalilable operators: <, <=, ==, >, >=, in, like, AND, OR
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *Constraints) Reset() {
	*x = Constraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraints) ProtoMessage() {}

func (x *Constraints) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraints.ProtoReflect.Descriptor instead.
func (*Constraints) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{2}
}

func (x *Constraints) GetConstraints() map[string]string {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *Constraints) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

/// To reference an image, a user has to provide an image name and a version. A user may specify a version either with
// a tag value (for example 'latest') or a digest. When submitting a job, a user should provide either a tag or a digest value
// only (not both of them).
//
// For example, docker images can be referenced by {name=titus-examples, tag=latest}.
// A user could also choose to provide only the digest without a tag. In this case, the tag value would be empty.
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Image name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	/// (Required if digest not set) Image tag.
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	/// (Required if tag not set) Image digest.
	Digest string `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{3}
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Image) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

// Network settings for tasks launched by this job
type NetworkConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sets the overall network mode for all containers for a Task launched by this job
	NetworkMode NetworkConfiguration_NetworkMode `protobuf:"varint,1,opt,name=networkMode,proto3,enum=com.netflix.titus.NetworkConfiguration_NetworkMode" json:"networkMode,omitempty"`
}

func (x *NetworkConfiguration) Reset() {
	*x = NetworkConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConfiguration) ProtoMessage() {}

func (x *NetworkConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConfiguration.ProtoReflect.Descriptor instead.
func (*NetworkConfiguration) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkConfiguration) GetNetworkMode() NetworkConfiguration_NetworkMode {
	if x != nil {
		return x.NetworkMode
	}
	return NetworkConfiguration_UnknownNetworkMode
}

type ContainerResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Number of CPUs to allocate (must be always > 0, but the actual limit is configurable).
	Cpu float64 `protobuf:"fixed64,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	/// (Optional) Number of GPUs to allocate.
	Gpu uint32 `protobuf:"varint,2,opt,name=gpu,proto3" json:"gpu,omitempty"`
	/// (Required) Amount of memory to allocate (must be always > 0, but the actual limit is configurable).
	MemoryMB uint32 `protobuf:"varint,3,opt,name=memoryMB,proto3" json:"memoryMB,omitempty"`
	/// (Required) Amount of disk space to allocate (must be always > 0, but the actual limit is configurable).
	DiskMB uint32 `protobuf:"varint,4,opt,name=diskMB,proto3" json:"diskMB,omitempty"`
	/// (Required) Amount of network bandwidth to allocate (must be always > 0, but the actual limit is configurable).
	NetworkMbps uint32 `protobuf:"varint,5,opt,name=networkMbps,proto3" json:"networkMbps,omitempty"`
	/// (Deprecated) IP always allocated.
	AllocateIP bool `protobuf:"varint,6,opt,name=allocateIP,proto3" json:"allocateIP,omitempty"`
	/// (Optional) EFS mounts.
	EfsMounts []*ContainerResources_EfsMount `protobuf:"bytes,7,rep,name=efsMounts,proto3" json:"efsMounts,omitempty"`
	/// (Optional) Size of shared memory /dev/shm. If not set, a default value will be provided. A provided value
	// must be less than or equal to amount of memory allocated.
	ShmSizeMB uint32 `protobuf:"varint,8,opt,name=shmSizeMB,proto3" json:"shmSizeMB,omitempty"`
	/// (Optional) IP addresses allocated from Titus VPC IP service to be assigned to tasks.
	SignedAddressAllocations []*SignedAddressAllocation `protobuf:"bytes,9,rep,name=signedAddressAllocations,proto3" json:"signedAddressAllocations,omitempty"`
	/// (Optional) IP addresses allocated from Titus VPC IP service to be assigned to tasks via AllocateAddressRequestV2.
	/// Mutually exclusive with signedAddressAllocations
	//
	// Types that are assignable to StaticIPAddresses:
	//	*ContainerResources_Pool
	//	*ContainerResources_StaticIPAddressIDs
	StaticIPAddresses isContainerResources_StaticIPAddresses `protobuf_oneof:"staticIPAddresses"`
}

func (x *ContainerResources) Reset() {
	*x = ContainerResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResources) ProtoMessage() {}

func (x *ContainerResources) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResources.ProtoReflect.Descriptor instead.
func (*ContainerResources) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{5}
}

func (x *ContainerResources) GetCpu() float64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ContainerResources) GetGpu() uint32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *ContainerResources) GetMemoryMB() uint32 {
	if x != nil {
		return x.MemoryMB
	}
	return 0
}

func (x *ContainerResources) GetDiskMB() uint32 {
	if x != nil {
		return x.DiskMB
	}
	return 0
}

func (x *ContainerResources) GetNetworkMbps() uint32 {
	if x != nil {
		return x.NetworkMbps
	}
	return 0
}

func (x *ContainerResources) GetAllocateIP() bool {
	if x != nil {
		return x.AllocateIP
	}
	return false
}

func (x *ContainerResources) GetEfsMounts() []*ContainerResources_EfsMount {
	if x != nil {
		return x.EfsMounts
	}
	return nil
}

func (x *ContainerResources) GetShmSizeMB() uint32 {
	if x != nil {
		return x.ShmSizeMB
	}
	return 0
}

func (x *ContainerResources) GetSignedAddressAllocations() []*SignedAddressAllocation {
	if x != nil {
		return x.SignedAddressAllocations
	}
	return nil
}

func (m *ContainerResources) GetStaticIPAddresses() isContainerResources_StaticIPAddresses {
	if m != nil {
		return m.StaticIPAddresses
	}
	return nil
}

func (x *ContainerResources) GetPool() string {
	if x, ok := x.GetStaticIPAddresses().(*ContainerResources_Pool); ok {
		return x.Pool
	}
	return ""
}

func (x *ContainerResources) GetStaticIPAddressIDs() *StaticIPAddressIDs {
	if x, ok := x.GetStaticIPAddresses().(*ContainerResources_StaticIPAddressIDs); ok {
		return x.StaticIPAddressIDs
	}
	return nil
}

type isContainerResources_StaticIPAddresses interface {
	isContainerResources_StaticIPAddresses()
}

type ContainerResources_Pool struct {
	/// The name of the pool of static IPs to select from
	Pool string `protobuf:"bytes,10,opt,name=pool,proto3,oneof"`
}

type ContainerResources_StaticIPAddressIDs struct {
	/// The list of addresses to use for this job
	StaticIPAddressIDs *StaticIPAddressIDs `protobuf:"bytes,11,opt,name=staticIPAddressIDs,proto3,oneof"`
}

func (*ContainerResources_Pool) isContainerResources_StaticIPAddresses() {}

func (*ContainerResources_StaticIPAddressIDs) isContainerResources_StaticIPAddresses() {}

/// Container security profile.
type SecurityProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Security groups associated with a container. The expected number of security groups is between 1 and 6.
	SecurityGroups []string `protobuf:"bytes,1,rep,name=securityGroups,proto3" json:"securityGroups,omitempty"`
	/// (Required) IAM role.
	IamRole string `protobuf:"bytes,2,opt,name=iamRole,proto3" json:"iamRole,omitempty"`
	/// (Optional) Additional security attributes. Key names starting with 'titus.' are reserved by Titus.
	Attributes map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SecurityProfile) Reset() {
	*x = SecurityProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityProfile) ProtoMessage() {}

func (x *SecurityProfile) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityProfile.ProtoReflect.Descriptor instead.
func (*SecurityProfile) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{6}
}

func (x *SecurityProfile) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *SecurityProfile) GetIamRole() string {
	if x != nil {
		return x.IamRole
	}
	return ""
}

func (x *SecurityProfile) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

/// Container descriptor.
type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Container resources.
	Resources *ContainerResources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	/// (Required) Container security profile: IAM role, security groups, container roles.
	SecurityProfile *SecurityProfile `protobuf:"bytes,2,opt,name=securityProfile,proto3" json:"securityProfile,omitempty"`
	/// (Required) Image reference.
	Image *Image `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	/// (Optional) Arbitrary set of key/value pairs. Key names starting with 'titus.' are reserved by Titus.
	Attributes map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// (Optional) Override the entry point of the image.
	// If set, the command baked into the image (if any) is always ignored. Interactions between the entry point and
	// command are the same as specified by Docker:
	// https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact
	//
	//  To clear (unset) the entry point of the image, pass a single empty string value: [""]
	EntryPoint []string `protobuf:"bytes,5,rep,name=entryPoint,proto3" json:"entryPoint,omitempty"`
	/// (Optional) Additional parameters for the entry point defined either here or provided in the container image.
	// To clear (unset) the command of the image, pass a single empty string value: [""]
	Command []string `protobuf:"bytes,6,rep,name=command,proto3" json:"command,omitempty"`
	/// (Optional) A collection of system environment variables passed to the container.
	Env map[string]string `protobuf:"bytes,7,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// (Optional) Constraints that Titus will prefer to fulfill but are not required.
	SoftConstraints *Constraints `protobuf:"bytes,8,opt,name=softConstraints,proto3" json:"softConstraints,omitempty"`
	/// (Optional) Constraints that have to be met for a task to be scheduled on an agent.
	HardConstraints *Constraints `protobuf:"bytes,9,opt,name=hardConstraints,proto3" json:"hardConstraints,omitempty"`
	/// (Optional) Experimental features
	Experimental *anypb.Any `protobuf:"bytes,10,opt,name=experimental,proto3" json:"experimental,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{7}
}

func (x *Container) GetResources() *ContainerResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Container) GetSecurityProfile() *SecurityProfile {
	if x != nil {
		return x.SecurityProfile
	}
	return nil
}

func (x *Container) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Container) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Container) GetEntryPoint() []string {
	if x != nil {
		return x.EntryPoint
	}
	return nil
}

func (x *Container) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Container) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Container) GetSoftConstraints() *Constraints {
	if x != nil {
		return x.SoftConstraints
	}
	return nil
}

func (x *Container) GetHardConstraints() *Constraints {
	if x != nil {
		return x.HardConstraints
	}
	return nil
}

func (x *Container) GetExperimental() *anypb.Any {
	if x != nil {
		return x.Experimental
	}
	return nil
}

/// This data structure is associated with a service job and specifies the number of tasks to run (desired).
// At any point in time, the condition min <= desired <= max must hold true. The desired state may be changed by a user,
// but also may be changed as a result of an auto-scaling action.
type Capacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Minimum number of tasks to run (min >= 0)
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	/// (Required) Maximum number of tasks that can be run (max >= desired)
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// (Required) Desired number of tasks to run (min <= desired <= max)
	Desired uint32 `protobuf:"varint,3,opt,name=desired,proto3" json:"desired,omitempty"`
}

func (x *Capacity) Reset() {
	*x = Capacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capacity) ProtoMessage() {}

func (x *Capacity) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capacity.ProtoReflect.Descriptor instead.
func (*Capacity) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{8}
}

func (x *Capacity) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Capacity) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Capacity) GetDesired() uint32 {
	if x != nil {
		return x.Desired
	}
	return 0
}

type JobCapacityWithOptionalAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Optional) Minimum number of tasks to run (min >= 0)
	Min *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	// (Optional) Maximum number of tasks that can be run (max >= desired)
	Max *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	// (Optional) Desired number of tasks to run (min <= desired <= max)
	Desired *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=desired,proto3" json:"desired,omitempty"`
}

func (x *JobCapacityWithOptionalAttributes) Reset() {
	*x = JobCapacityWithOptionalAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobCapacityWithOptionalAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCapacityWithOptionalAttributes) ProtoMessage() {}

func (x *JobCapacityWithOptionalAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCapacityWithOptionalAttributes.ProtoReflect.Descriptor instead.
func (*JobCapacityWithOptionalAttributes) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{9}
}

func (x *JobCapacityWithOptionalAttributes) GetMin() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *JobCapacityWithOptionalAttributes) GetMax() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *JobCapacityWithOptionalAttributes) GetDesired() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Desired
	}
	return nil
}

/// Job disruption budget, associated (optionally) with a job.
type JobDisruptionBudget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Policy:
	//	*JobDisruptionBudget_SelfManaged_
	//	*JobDisruptionBudget_AvailabilityPercentageLimit_
	//	*JobDisruptionBudget_UnhealthyTasksLimit_
	//	*JobDisruptionBudget_RelocationLimit_
	Policy isJobDisruptionBudget_Policy `protobuf_oneof:"Policy"`
	// Types that are assignable to Rate:
	//	*JobDisruptionBudget_RateUnlimited_
	//	*JobDisruptionBudget_RatePercentagePerHour_
	//	*JobDisruptionBudget_RatePerInterval_
	//	*JobDisruptionBudget_RatePercentagePerInterval_
	Rate isJobDisruptionBudget_Rate `protobuf_oneof:"Rate"`
	/// (Optional) Time window to which relocation process is restricted.
	TimeWindows []*TimeWindow `protobuf:"bytes,7,rep,name=timeWindows,proto3" json:"timeWindows,omitempty"`
	/// (Optional) Container health providers to use when relocating a container.
	ContainerHealthProviders []*ContainerHealthProvider `protobuf:"bytes,8,rep,name=containerHealthProviders,proto3" json:"containerHealthProviders,omitempty"`
}

func (x *JobDisruptionBudget) Reset() {
	*x = JobDisruptionBudget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDisruptionBudget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDisruptionBudget) ProtoMessage() {}

func (x *JobDisruptionBudget) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDisruptionBudget.ProtoReflect.Descriptor instead.
func (*JobDisruptionBudget) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{10}
}

func (m *JobDisruptionBudget) GetPolicy() isJobDisruptionBudget_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *JobDisruptionBudget) GetSelfManaged() *JobDisruptionBudget_SelfManaged {
	if x, ok := x.GetPolicy().(*JobDisruptionBudget_SelfManaged_); ok {
		return x.SelfManaged
	}
	return nil
}

func (x *JobDisruptionBudget) GetAvailabilityPercentageLimit() *JobDisruptionBudget_AvailabilityPercentageLimit {
	if x, ok := x.GetPolicy().(*JobDisruptionBudget_AvailabilityPercentageLimit_); ok {
		return x.AvailabilityPercentageLimit
	}
	return nil
}

func (x *JobDisruptionBudget) GetUnhealthyTasksLimit() *JobDisruptionBudget_UnhealthyTasksLimit {
	if x, ok := x.GetPolicy().(*JobDisruptionBudget_UnhealthyTasksLimit_); ok {
		return x.UnhealthyTasksLimit
	}
	return nil
}

func (x *JobDisruptionBudget) GetRelocationLimit() *JobDisruptionBudget_RelocationLimit {
	if x, ok := x.GetPolicy().(*JobDisruptionBudget_RelocationLimit_); ok {
		return x.RelocationLimit
	}
	return nil
}

func (m *JobDisruptionBudget) GetRate() isJobDisruptionBudget_Rate {
	if m != nil {
		return m.Rate
	}
	return nil
}

func (x *JobDisruptionBudget) GetRateUnlimited() *JobDisruptionBudget_RateUnlimited {
	if x, ok := x.GetRate().(*JobDisruptionBudget_RateUnlimited_); ok {
		return x.RateUnlimited
	}
	return nil
}

func (x *JobDisruptionBudget) GetRatePercentagePerHour() *JobDisruptionBudget_RatePercentagePerHour {
	if x, ok := x.GetRate().(*JobDisruptionBudget_RatePercentagePerHour_); ok {
		return x.RatePercentagePerHour
	}
	return nil
}

func (x *JobDisruptionBudget) GetRatePerInterval() *JobDisruptionBudget_RatePerInterval {
	if x, ok := x.GetRate().(*JobDisruptionBudget_RatePerInterval_); ok {
		return x.RatePerInterval
	}
	return nil
}

func (x *JobDisruptionBudget) GetRatePercentagePerInterval() *JobDisruptionBudget_RatePercentagePerInterval {
	if x, ok := x.GetRate().(*JobDisruptionBudget_RatePercentagePerInterval_); ok {
		return x.RatePercentagePerInterval
	}
	return nil
}

func (x *JobDisruptionBudget) GetTimeWindows() []*TimeWindow {
	if x != nil {
		return x.TimeWindows
	}
	return nil
}

func (x *JobDisruptionBudget) GetContainerHealthProviders() []*ContainerHealthProvider {
	if x != nil {
		return x.ContainerHealthProviders
	}
	return nil
}

type isJobDisruptionBudget_Policy interface {
	isJobDisruptionBudget_Policy()
}

type JobDisruptionBudget_SelfManaged_ struct {
	SelfManaged *JobDisruptionBudget_SelfManaged `protobuf:"bytes,1,opt,name=selfManaged,proto3,oneof"`
}

type JobDisruptionBudget_AvailabilityPercentageLimit_ struct {
	AvailabilityPercentageLimit *JobDisruptionBudget_AvailabilityPercentageLimit `protobuf:"bytes,2,opt,name=availabilityPercentageLimit,proto3,oneof"`
}

type JobDisruptionBudget_UnhealthyTasksLimit_ struct {
	UnhealthyTasksLimit *JobDisruptionBudget_UnhealthyTasksLimit `protobuf:"bytes,3,opt,name=unhealthyTasksLimit,proto3,oneof"`
}

type JobDisruptionBudget_RelocationLimit_ struct {
	RelocationLimit *JobDisruptionBudget_RelocationLimit `protobuf:"bytes,4,opt,name=relocationLimit,proto3,oneof"`
}

func (*JobDisruptionBudget_SelfManaged_) isJobDisruptionBudget_Policy() {}

func (*JobDisruptionBudget_AvailabilityPercentageLimit_) isJobDisruptionBudget_Policy() {}

func (*JobDisruptionBudget_UnhealthyTasksLimit_) isJobDisruptionBudget_Policy() {}

func (*JobDisruptionBudget_RelocationLimit_) isJobDisruptionBudget_Policy() {}

type isJobDisruptionBudget_Rate interface {
	isJobDisruptionBudget_Rate()
}

type JobDisruptionBudget_RateUnlimited_ struct {
	RateUnlimited *JobDisruptionBudget_RateUnlimited `protobuf:"bytes,5,opt,name=rateUnlimited,proto3,oneof"`
}

type JobDisruptionBudget_RatePercentagePerHour_ struct {
	RatePercentagePerHour *JobDisruptionBudget_RatePercentagePerHour `protobuf:"bytes,6,opt,name=ratePercentagePerHour,proto3,oneof"`
}

type JobDisruptionBudget_RatePerInterval_ struct {
	RatePerInterval *JobDisruptionBudget_RatePerInterval `protobuf:"bytes,9,opt,name=ratePerInterval,proto3,oneof"`
}

type JobDisruptionBudget_RatePercentagePerInterval_ struct {
	RatePercentagePerInterval *JobDisruptionBudget_RatePercentagePerInterval `protobuf:"bytes,10,opt,name=ratePercentagePerInterval,proto3,oneof"`
}

func (*JobDisruptionBudget_RateUnlimited_) isJobDisruptionBudget_Rate() {}

func (*JobDisruptionBudget_RatePercentagePerHour_) isJobDisruptionBudget_Rate() {}

func (*JobDisruptionBudget_RatePerInterval_) isJobDisruptionBudget_Rate() {}

func (*JobDisruptionBudget_RatePercentagePerInterval_) isJobDisruptionBudget_Rate() {}

/// Batch job specification.
type BatchJobSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Number of tasks to run (> 0).
	Size uint32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	/// (Required) Maximum amount of time in seconds that the job's task is allowed to run. The timer is started once the task
	// transitions to the 'RUNNING' state. If a task terminates with an error and is restarted, the timer starts again from 0.
	RuntimeLimitSec uint64 `protobuf:"varint,2,opt,name=runtimeLimitSec,proto3" json:"runtimeLimitSec,omitempty"`
	/// (Required) Task rescheduling policy in case of failure.
	RetryPolicy *RetryPolicy `protobuf:"bytes,3,opt,name=retryPolicy,proto3" json:"retryPolicy,omitempty"`
	/// true when the task should be restarted after being terminated due to runtime limit.
	RetryOnRuntimeLimit bool `protobuf:"varint,4,opt,name=retryOnRuntimeLimit,proto3" json:"retryOnRuntimeLimit,omitempty"`
}

func (x *BatchJobSpec) Reset() {
	*x = BatchJobSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchJobSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchJobSpec) ProtoMessage() {}

func (x *BatchJobSpec) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchJobSpec.ProtoReflect.Descriptor instead.
func (*BatchJobSpec) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{11}
}

func (x *BatchJobSpec) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BatchJobSpec) GetRuntimeLimitSec() uint64 {
	if x != nil {
		return x.RuntimeLimitSec
	}
	return 0
}

func (x *BatchJobSpec) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *BatchJobSpec) GetRetryOnRuntimeLimit() bool {
	if x != nil {
		return x.RetryOnRuntimeLimit
	}
	return false
}

/// Migration polices.
type MigrationPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Migration policy.
	//
	// Types that are assignable to Policy:
	//	*MigrationPolicy_SystemDefault_
	//	*MigrationPolicy_SelfManaged_
	Policy isMigrationPolicy_Policy `protobuf_oneof:"Policy"`
}

func (x *MigrationPolicy) Reset() {
	*x = MigrationPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationPolicy) ProtoMessage() {}

func (x *MigrationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationPolicy.ProtoReflect.Descriptor instead.
func (*MigrationPolicy) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{12}
}

func (m *MigrationPolicy) GetPolicy() isMigrationPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *MigrationPolicy) GetSystemDefault() *MigrationPolicy_SystemDefault {
	if x, ok := x.GetPolicy().(*MigrationPolicy_SystemDefault_); ok {
		return x.SystemDefault
	}
	return nil
}

func (x *MigrationPolicy) GetSelfManaged() *MigrationPolicy_SelfManaged {
	if x, ok := x.GetPolicy().(*MigrationPolicy_SelfManaged_); ok {
		return x.SelfManaged
	}
	return nil
}

type isMigrationPolicy_Policy interface {
	isMigrationPolicy_Policy()
}

type MigrationPolicy_SystemDefault_ struct {
	SystemDefault *MigrationPolicy_SystemDefault `protobuf:"bytes,1,opt,name=systemDefault,proto3,oneof"`
}

type MigrationPolicy_SelfManaged_ struct {
	SelfManaged *MigrationPolicy_SelfManaged `protobuf:"bytes,2,opt,name=selfManaged,proto3,oneof"`
}

func (*MigrationPolicy_SystemDefault_) isMigrationPolicy_Policy() {}

func (*MigrationPolicy_SelfManaged_) isMigrationPolicy_Policy() {}

/// Migration details
type MigrationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// true when the the task needs to be migrated to another agent.
	NeedsMigration bool `protobuf:"varint,1,opt,name=needsMigration,proto3" json:"needsMigration,omitempty"`
	/// The deadline time that the owner must migrate their task by or the system will automatically do it.
	/// This value is irrelevant if 'needsMigration' is set to false and will default to the value '0'.
	Deadline uint64 `protobuf:"varint,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
	/// Time at which the migration decision was made.
	/// This value is irrelevant if 'needsMigration' is set to false and will default to the value '0'.
	Started uint64 `protobuf:"varint,3,opt,name=started,proto3" json:"started,omitempty"`
}

func (x *MigrationDetails) Reset() {
	*x = MigrationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationDetails) ProtoMessage() {}

func (x *MigrationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationDetails.ProtoReflect.Descriptor instead.
func (*MigrationDetails) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{13}
}

func (x *MigrationDetails) GetNeedsMigration() bool {
	if x != nil {
		return x.NeedsMigration
	}
	return false
}

func (x *MigrationDetails) GetDeadline() uint64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *MigrationDetails) GetStarted() uint64 {
	if x != nil {
		return x.Started
	}
	return 0
}

/// Service job specification.
type ServiceJobSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Number of tasks to run. If a scaling policy is defined, the number of tasks created will be always
	// within min/max range.
	Capacity *Capacity `protobuf:"bytes,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	/// (Optional) Job enable/disable status. If a job is disabled, auto-scaling policies are not applied.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	/// (Required) Task rescheduling policy in case of failure.
	RetryPolicy *RetryPolicy `protobuf:"bytes,3,opt,name=retryPolicy,proto3" json:"retryPolicy,omitempty"`
	/// (Optional) Migration policy for how the tasks will be migrated during an infrastructure change.
	// If not set, defaults to SystemDefault.
	MigrationPolicy *MigrationPolicy `protobuf:"bytes,4,opt,name=migrationPolicy,proto3" json:"migrationPolicy,omitempty"`
	/// (Optional) Job scaling activity configurations.
	ServiceJobProcesses *ServiceJobSpec_ServiceJobProcesses `protobuf:"bytes,5,opt,name=serviceJobProcesses,proto3" json:"serviceJobProcesses,omitempty"`
}

func (x *ServiceJobSpec) Reset() {
	*x = ServiceJobSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceJobSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceJobSpec) ProtoMessage() {}

func (x *ServiceJobSpec) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceJobSpec.ProtoReflect.Descriptor instead.
func (*ServiceJobSpec) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{14}
}

func (x *ServiceJobSpec) GetCapacity() *Capacity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *ServiceJobSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ServiceJobSpec) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ServiceJobSpec) GetMigrationPolicy() *MigrationPolicy {
	if x != nil {
		return x.MigrationPolicy
	}
	return nil
}

func (x *ServiceJobSpec) GetServiceJobProcesses() *ServiceJobSpec_ServiceJobProcesses {
	if x != nil {
		return x.ServiceJobProcesses
	}
	return nil
}

/// Job descriptor contains the full job specification (batch or service) that is used to run a job.
type JobDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Optional) Owner of a job (see Owner entity description for more information).
	Owner *Owner `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	/// (Required) Free form name.
	ApplicationName string `protobuf:"bytes,3,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	/// (Optional) Capacity group associated with a job. If not set, defaults to 'DEFAULT'.
	CapacityGroup string `protobuf:"bytes,4,opt,name=capacityGroup,proto3" json:"capacityGroup,omitempty"`
	/// (Optional) Mostly relevant for service jobs, but applicable to batch jobs as well, allows a user to specify
	// own unique identifier for a job (see JobGroupInfo for more information).
	JobGroupInfo *JobGroupInfo `protobuf:"bytes,5,opt,name=jobGroupInfo,proto3" json:"jobGroupInfo,omitempty"`
	/// (Optional) Arbitrary set of key/value pairs. Names starting with 'titus' (case does not matter) are reserved for an internal use.
	Attributes map[string]string `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// (Required) Container to be executed for a job.
	Container *Container `protobuf:"bytes,7,opt,name=container,proto3" json:"container,omitempty"`
	/// (Required) Additional information required for job execution, specific to job type.
	//
	// Types that are assignable to JobSpec:
	//	*JobDescriptor_Batch
	//	*JobDescriptor_Service
	JobSpec isJobDescriptor_JobSpec `protobuf_oneof:"JobSpec"`
	/// (Optional) Job disruption budget. If not defined, a job type specific (batch or service) default is set.
	DisruptionBudget *JobDisruptionBudget `protobuf:"bytes,10,opt,name=disruptionBudget,proto3" json:"disruptionBudget,omitempty"`
	/// (Optional) Networking configuration. If not defined, sane defaults are provided by the backend.
	NetworkConfiguration *NetworkConfiguration `protobuf:"bytes,11,opt,name=networkConfiguration,proto3" json:"networkConfiguration,omitempty"`
}

func (x *JobDescriptor) Reset() {
	*x = JobDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDescriptor) ProtoMessage() {}

func (x *JobDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDescriptor.ProtoReflect.Descriptor instead.
func (*JobDescriptor) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{15}
}

func (x *JobDescriptor) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *JobDescriptor) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *JobDescriptor) GetCapacityGroup() string {
	if x != nil {
		return x.CapacityGroup
	}
	return ""
}

func (x *JobDescriptor) GetJobGroupInfo() *JobGroupInfo {
	if x != nil {
		return x.JobGroupInfo
	}
	return nil
}

func (x *JobDescriptor) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *JobDescriptor) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (m *JobDescriptor) GetJobSpec() isJobDescriptor_JobSpec {
	if m != nil {
		return m.JobSpec
	}
	return nil
}

func (x *JobDescriptor) GetBatch() *BatchJobSpec {
	if x, ok := x.GetJobSpec().(*JobDescriptor_Batch); ok {
		return x.Batch
	}
	return nil
}

func (x *JobDescriptor) GetService() *ServiceJobSpec {
	if x, ok := x.GetJobSpec().(*JobDescriptor_Service); ok {
		return x.Service
	}
	return nil
}

func (x *JobDescriptor) GetDisruptionBudget() *JobDisruptionBudget {
	if x != nil {
		return x.DisruptionBudget
	}
	return nil
}

func (x *JobDescriptor) GetNetworkConfiguration() *NetworkConfiguration {
	if x != nil {
		return x.NetworkConfiguration
	}
	return nil
}

type isJobDescriptor_JobSpec interface {
	isJobDescriptor_JobSpec()
}

type JobDescriptor_Batch struct {
	/// Batch job specific descriptor.
	Batch *BatchJobSpec `protobuf:"bytes,8,opt,name=batch,proto3,oneof"`
}

type JobDescriptor_Service struct {
	/// Service job specific descriptor.
	Service *ServiceJobSpec `protobuf:"bytes,9,opt,name=service,proto3,oneof"`
}

func (*JobDescriptor_Batch) isJobDescriptor_JobSpec() {}

func (*JobDescriptor_Service) isJobDescriptor_JobSpec() {}

/// Composite data structure holding both job state information and the reason of the transition to this state.
type JobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Job state
	State JobStatus_JobState `protobuf:"varint,1,opt,name=state,proto3,enum=com.netflix.titus.JobStatus_JobState" json:"state,omitempty"`
	/// (Optional) An identifier of an event that caused a transition to this state. Each job manager can introduce its own
	//  set of reason codes. As of now, there are no common reason codes defined for jobs.
	ReasonCode string `protobuf:"bytes,2,opt,name=reasonCode,proto3" json:"reasonCode,omitempty"`
	/// (Optional) Textual description accompanying the 'reasonCode'.
	ReasonMessage string `protobuf:"bytes,3,opt,name=reasonMessage,proto3" json:"reasonMessage,omitempty"`
	/// Time when a transition to a state happened.
	Timestamp uint64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *JobStatus) Reset() {
	*x = JobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatus) ProtoMessage() {}

func (x *JobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatus.ProtoReflect.Descriptor instead.
func (*JobStatus) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{16}
}

func (x *JobStatus) GetState() JobStatus_JobState {
	if x != nil {
		return x.State
	}
	return JobStatus_Accepted
}

func (x *JobStatus) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

func (x *JobStatus) GetReasonMessage() string {
	if x != nil {
		return x.ReasonMessage
	}
	return ""
}

func (x *JobStatus) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type TaskStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Task state
	State TaskStatus_TaskState `protobuf:"varint,1,opt,name=state,proto3,enum=com.netflix.titus.TaskStatus_TaskState" json:"state,omitempty"`
	/// (Optional) An identifier of an event that caused a transition to this state. Each job manager can introduce its own
	//  set of reason codes. Below are the predefined (common) set of reason codes associated with task state 'Finished':
	//  * 'normal'               - task completed with the exit code 0
	//  * 'failed'               - task completed with a non zero error code
	//  * 'killed'               - task was explicitly terminated by a user
	//  * 'scaledDown'           - task was terminated as a result of job scaling down
	//  * 'stuckInState'         - task was terminated, as it did not progress to the next state in the expected amount of time
	//  * 'runtimeLimitExceeded' - task was terminated, as its runtime limit was exceeded
	//  * 'lost'                 - task was lost, and its final status is unknown
	//  * 'invalidRequest'       - invalid container definition (security group, image name, etc)
	//  * 'crashed'              - container crashed due to some internal system error
	//  * 'transientSystemError' - transient error, not agent specific (for example AWS rate limiting)
	//  * 'localSystemError'     - an error scoped to an agent instance on which a container was run.
	//                             The agent should be quarantined or terminated.
	//  * 'unknownSystemError'   - unknown error which cannot be classified either as local/non-local or transient.
	//                             If there are multiple occurences of this error, the agent should be quarantined or terminated.
	ReasonCode string `protobuf:"bytes,2,opt,name=reasonCode,proto3" json:"reasonCode,omitempty"`
	/// (Optional) Textual description accompanying the 'reasonCode'.
	ReasonMessage string `protobuf:"bytes,3,opt,name=reasonMessage,proto3" json:"reasonMessage,omitempty"`
	/// Time when a transition to a state occurred.
	Timestamp uint64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TaskStatus) Reset() {
	*x = TaskStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatus) ProtoMessage() {}

func (x *TaskStatus) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatus.ProtoReflect.Descriptor instead.
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{17}
}

func (x *TaskStatus) GetState() TaskStatus_TaskState {
	if x != nil {
		return x.State
	}
	return TaskStatus_Accepted
}

func (x *TaskStatus) GetReasonCode() string {
	if x != nil {
		return x.ReasonCode
	}
	return ""
}

func (x *TaskStatus) GetReasonMessage() string {
	if x != nil {
		return x.ReasonMessage
	}
	return ""
}

func (x *TaskStatus) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

/// Task log locations
type LogLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Log access via UI.
	Ui *LogLocation_UI `protobuf:"bytes,1,opt,name=ui,proto3" json:"ui,omitempty"`
	/// (Optional) Live log access. Provided only for running tasks.
	LiveStream *LogLocation_LiveStream `protobuf:"bytes,2,opt,name=liveStream,proto3" json:"liveStream,omitempty"`
	/// (Required) S3 log location.
	S3 *LogLocation_S3 `protobuf:"bytes,3,opt,name=s3,proto3" json:"s3,omitempty"`
}

func (x *LogLocation) Reset() {
	*x = LogLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLocation) ProtoMessage() {}

func (x *LogLocation) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLocation.ProtoReflect.Descriptor instead.
func (*LogLocation) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{18}
}

func (x *LogLocation) GetUi() *LogLocation_UI {
	if x != nil {
		return x.Ui
	}
	return nil
}

func (x *LogLocation) GetLiveStream() *LogLocation_LiveStream {
	if x != nil {
		return x.LiveStream
	}
	return nil
}

func (x *LogLocation) GetS3() *LogLocation_S3 {
	if x != nil {
		return x.S3
	}
	return nil
}

/// Task is an entity representing a running container.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) The Id of the task.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	/// (Required) Id of a job that owns this task.
	JobId string `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	/// (Required) Includes:
	// * agent execution environment: 'agent.region', 'agent.zone', 'agent.host', 'agent.instanceId'
	// * job type specific information: 'task.index', 'task.resubmitOf' (id of task which this task is replacing), 'task.originalId' (id of task which this task is a replacement)
	TaskContext map[string]string `protobuf:"bytes,3,rep,name=taskContext,proto3" json:"taskContext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// (Required) Last known state of this task.
	Status *TaskStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	/// (Required) State transition history.
	StatusHistory []*TaskStatus `protobuf:"bytes,5,rep,name=statusHistory,proto3" json:"statusHistory,omitempty"`
	/// (Required) Container logs.
	LogLocation *LogLocation `protobuf:"bytes,6,opt,name=logLocation,proto3" json:"logLocation,omitempty"`
	/// (Required) Migration details.
	MigrationDetails *MigrationDetails `protobuf:"bytes,7,opt,name=migrationDetails,proto3" json:"migrationDetails,omitempty"`
	/// (Optional) User defined key/value pairs.
	Attributes map[string]string `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{19}
}

func (x *Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Task) GetTaskContext() map[string]string {
	if x != nil {
		return x.TaskContext
	}
	return nil
}

func (x *Task) GetStatus() *TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Task) GetStatusHistory() []*TaskStatus {
	if x != nil {
		return x.StatusHistory
	}
	return nil
}

func (x *Task) GetLogLocation() *LogLocation {
	if x != nil {
		return x.LogLocation
	}
	return nil
}

func (x *Task) GetMigrationDetails() *MigrationDetails {
	if x != nil {
		return x.MigrationDetails
	}
	return nil
}

func (x *Task) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

/// Job entity is returned by query operations only.
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) The unique id (UUID).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	/// (Required) Job descriptor.
	JobDescriptor *JobDescriptor `protobuf:"bytes,2,opt,name=jobDescriptor,proto3" json:"jobDescriptor,omitempty"`
	/// (Required) Last known job state.
	Status *JobStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	/// (Required) State transition history.
	StatusHistory []*JobStatus `protobuf:"bytes,4,rep,name=statusHistory,proto3" json:"statusHistory,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{20}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetJobDescriptor() *JobDescriptor {
	if x != nil {
		return x.JobDescriptor
	}
	return nil
}

func (x *Job) GetStatus() *JobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Job) GetStatusHistory() []*JobStatus {
	if x != nil {
		return x.StatusHistory
	}
	return nil
}

/// Job event stream consists of two phases. In the first phase, a snapshot of the current state (a job and its tasks) is
//  streamed, and it is followed by the SnapshotEnd notification marker. In the second phase, job/task state updates are
//  sent. When a job is terminated, the stream completes.
type JobChangeNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Notification:
	//	*JobChangeNotification_JobUpdate_
	//	*JobChangeNotification_TaskUpdate_
	//	*JobChangeNotification_SnapshotEnd_
	Notification isJobChangeNotification_Notification `protobuf_oneof:"Notification"`
}

func (x *JobChangeNotification) Reset() {
	*x = JobChangeNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobChangeNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobChangeNotification) ProtoMessage() {}

func (x *JobChangeNotification) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobChangeNotification.ProtoReflect.Descriptor instead.
func (*JobChangeNotification) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{21}
}

func (m *JobChangeNotification) GetNotification() isJobChangeNotification_Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

func (x *JobChangeNotification) GetJobUpdate() *JobChangeNotification_JobUpdate {
	if x, ok := x.GetNotification().(*JobChangeNotification_JobUpdate_); ok {
		return x.JobUpdate
	}
	return nil
}

func (x *JobChangeNotification) GetTaskUpdate() *JobChangeNotification_TaskUpdate {
	if x, ok := x.GetNotification().(*JobChangeNotification_TaskUpdate_); ok {
		return x.TaskUpdate
	}
	return nil
}

func (x *JobChangeNotification) GetSnapshotEnd() *JobChangeNotification_SnapshotEnd {
	if x, ok := x.GetNotification().(*JobChangeNotification_SnapshotEnd_); ok {
		return x.SnapshotEnd
	}
	return nil
}

type isJobChangeNotification_Notification interface {
	isJobChangeNotification_Notification()
}

type JobChangeNotification_JobUpdate_ struct {
	JobUpdate *JobChangeNotification_JobUpdate `protobuf:"bytes,1,opt,name=jobUpdate,proto3,oneof"`
}

type JobChangeNotification_TaskUpdate_ struct {
	TaskUpdate *JobChangeNotification_TaskUpdate `protobuf:"bytes,2,opt,name=taskUpdate,proto3,oneof"`
}

type JobChangeNotification_SnapshotEnd_ struct {
	SnapshotEnd *JobChangeNotification_SnapshotEnd `protobuf:"bytes,3,opt,name=snapshotEnd,proto3,oneof"`
}

func (*JobChangeNotification_JobUpdate_) isJobChangeNotification_Notification() {}

func (*JobChangeNotification_TaskUpdate_) isJobChangeNotification_Notification() {}

func (*JobChangeNotification_SnapshotEnd_) isJobChangeNotification_Notification() {}

type JobDataRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DataRecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Job      *Job                `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *JobDataRecord) Reset() {
	*x = JobDataRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDataRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDataRecord) ProtoMessage() {}

func (x *JobDataRecord) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDataRecord.ProtoReflect.Descriptor instead.
func (*JobDataRecord) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{22}
}

func (x *JobDataRecord) GetMetadata() *DataRecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JobDataRecord) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type TaskDataRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *DataRecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Job      *Job                `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	Task     *Task               `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *TaskDataRecord) Reset() {
	*x = TaskDataRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDataRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDataRecord) ProtoMessage() {}

func (x *TaskDataRecord) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDataRecord.ProtoReflect.Descriptor instead.
func (*TaskDataRecord) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{23}
}

func (x *TaskDataRecord) GetMetadata() *DataRecordMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TaskDataRecord) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *TaskDataRecord) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type JobId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *JobId) Reset() {
	*x = JobId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobId) ProtoMessage() {}

func (x *JobId) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobId.ProtoReflect.Descriptor instead.
func (*JobId) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{24}
}

func (x *JobId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type JobIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *JobIds) Reset() {
	*x = JobIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobIds) ProtoMessage() {}

func (x *JobIds) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobIds.ProtoReflect.Descriptor instead.
func (*JobIds) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{25}
}

func (x *JobIds) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

// Job query request. The query result is limited to the active data set. Finished jobs/tasks are not evaluated
// when the query is executed.
type JobQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Requested page number/size.
	Page *Page `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	/// (Optional) Collection of fields and their values for a filter.
	// Available query criteria:
	// jobIds - list of comma separated job ids
	// taskIds - list of comma separated task ids
	// owner - job owner
	// applicationName - job application name
	// imageName - image name
	// imageTag - image tag
	// capacityGroup - job assigned capacity group
	// jobGroupStack - job group stack
	// jobGroupDetail - job group details
	// jobGroupSequence - job group sequence
	// jobType - job type (batch or service)
	// attributes - comma separated job attribute key/value pairs (for example "key1,key2:value2;k3:value3")
	// attributes.op - logical 'and' or 'or' operators, which should be applied to multiple attributes specified in the query
	// jobState - job state (one)
	// taskStates - task states (multiple, comma separated). Empty value is the same as no value set.
	// taskStateReasons - reasons associated with task states (multiple, comma separated)
	// needsMigration - if set to true, return only jobs with tasks that require migration
	FilteringCriteria map[string]string `protobuf:"bytes,2,rep,name=filteringCriteria,proto3" json:"filteringCriteria,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// (Optional) If set, only field values explicitly specified in this parameter will be returned
	// This does not include certain attributes like 'jobId', 'appName' which are always returned.
	// If the nested field value is provided, only the explicitly listed nested fields will be returned.
	// For example: tasks.taskId rule will result in including just this value when encoding Task entity.
	Fields []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *JobQuery) Reset() {
	*x = JobQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobQuery) ProtoMessage() {}

func (x *JobQuery) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobQuery.ProtoReflect.Descriptor instead.
func (*JobQuery) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{26}
}

func (x *JobQuery) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *JobQuery) GetFilteringCriteria() map[string]string {
	if x != nil {
		return x.FilteringCriteria
	}
	return nil
}

func (x *JobQuery) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type JobQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*Job      `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *JobQueryResult) Reset() {
	*x = JobQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobQueryResult) ProtoMessage() {}

func (x *JobQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobQueryResult.ProtoReflect.Descriptor instead.
func (*JobQueryResult) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{27}
}

func (x *JobQueryResult) GetItems() []*Job {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *JobQueryResult) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

// The filtering criteria is applied to both Job and Task events. If a criteria applies to task fields, the stream will
// include both task events matching it, and events for jobs with tasks that match it. The opposite is also true, e.g.:
// a criteria on applicationName (a job field) will include both job events matching it, and events for tasks belonging
// to a job that matches it.
type ObserveJobsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Optional) Collection of fields and their values for a filter.
	// Available query criteria:
	// jobIds - list of comma separated job ids
	// taskIds - list of comma separated task ids
	// owner - job owner
	// applicationName - job application name
	// imageName - image name
	// imageTag - image tag
	// capacityGroup - job assigned capacity group
	// jobGroupStack - job group stack
	// jobGroupDetail - job group details
	// jobGroupSequence - job group sequence
	// jobType - job type (batch or service)
	// attributes - comma separated job attribute key/value pairs. The same key may occur multiple times, with different
	//              values (any value matches the filter). A value may be omitted, in which case if the key
	//              occurs only once, only presence of the key is checked, without value comparison (otherwise the value
	//              is an empty string). Example filters:
	//              * 'key1' - matches, if the key is present
	//              * 'key2:value2' - matches if the attributes contain key 'key2' with value 'value2'
	//              * 'key3,key3:value3a,key3:value3b' - matches if the attributes contain key 'key3' with value '' or 'value3a' or 'value3b'
	//              All the above can be passed together as 'key1,key2:value2,key3,key3:value3a,key3:value3b'
	// attributes.op - logical 'and' or 'or' operators, which should be applied to multiple attributes specified in the query
	// jobState - job state (one)
	// taskStates - task states (multiple, comma separated). Empty value is the same as no value set.
	// taskStateReasons - reasons associated with task states (multiple, comma separated)
	// needsMigration - if set to true, return only jobs with tasks that require migration
	FilteringCriteria map[string]string `protobuf:"bytes,1,rep,name=filteringCriteria,proto3" json:"filteringCriteria,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObserveJobsQuery) Reset() {
	*x = ObserveJobsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserveJobsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserveJobsQuery) ProtoMessage() {}

func (x *ObserveJobsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserveJobsQuery.ProtoReflect.Descriptor instead.
func (*ObserveJobsQuery) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{28}
}

func (x *ObserveJobsQuery) GetFilteringCriteria() map[string]string {
	if x != nil {
		return x.FilteringCriteria
	}
	return nil
}

type JobCapacityUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    string    `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Capacity *Capacity `protobuf:"bytes,2,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
}

func (x *JobCapacityUpdate) Reset() {
	*x = JobCapacityUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobCapacityUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCapacityUpdate) ProtoMessage() {}

func (x *JobCapacityUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCapacityUpdate.ProtoReflect.Descriptor instead.
func (*JobCapacityUpdate) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{29}
}

func (x *JobCapacityUpdate) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobCapacityUpdate) GetCapacity() *Capacity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

type JobCapacityUpdateWithOptionalAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId                             string                             `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	JobCapacityWithOptionalAttributes *JobCapacityWithOptionalAttributes `protobuf:"bytes,2,opt,name=jobCapacityWithOptionalAttributes,proto3" json:"jobCapacityWithOptionalAttributes,omitempty"`
}

func (x *JobCapacityUpdateWithOptionalAttributes) Reset() {
	*x = JobCapacityUpdateWithOptionalAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobCapacityUpdateWithOptionalAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobCapacityUpdateWithOptionalAttributes) ProtoMessage() {}

func (x *JobCapacityUpdateWithOptionalAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobCapacityUpdateWithOptionalAttributes.ProtoReflect.Descriptor instead.
func (*JobCapacityUpdateWithOptionalAttributes) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{30}
}

func (x *JobCapacityUpdateWithOptionalAttributes) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobCapacityUpdateWithOptionalAttributes) GetJobCapacityWithOptionalAttributes() *JobCapacityWithOptionalAttributes {
	if x != nil {
		return x.JobCapacityWithOptionalAttributes
	}
	return nil
}

type JobStatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnableStatus bool   `protobuf:"varint,2,opt,name=enableStatus,proto3" json:"enableStatus,omitempty"`
}

func (x *JobStatusUpdate) Reset() {
	*x = JobStatusUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatusUpdate) ProtoMessage() {}

func (x *JobStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatusUpdate.ProtoReflect.Descriptor instead.
func (*JobStatusUpdate) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{31}
}

func (x *JobStatusUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobStatusUpdate) GetEnableStatus() bool {
	if x != nil {
		return x.EnableStatus
	}
	return false
}

type JobProcessesUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId               string                              `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServiceJobProcesses *ServiceJobSpec_ServiceJobProcesses `protobuf:"bytes,2,opt,name=serviceJobProcesses,proto3" json:"serviceJobProcesses,omitempty"`
}

func (x *JobProcessesUpdate) Reset() {
	*x = JobProcessesUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobProcessesUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobProcessesUpdate) ProtoMessage() {}

func (x *JobProcessesUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobProcessesUpdate.ProtoReflect.Descriptor instead.
func (*JobProcessesUpdate) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{32}
}

func (x *JobProcessesUpdate) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobProcessesUpdate) GetServiceJobProcesses() *ServiceJobSpec_ServiceJobProcesses {
	if x != nil {
		return x.ServiceJobProcesses
	}
	return nil
}

type JobDisruptionBudgetUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId            string               `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	DisruptionBudget *JobDisruptionBudget `protobuf:"bytes,2,opt,name=disruptionBudget,proto3" json:"disruptionBudget,omitempty"`
}

func (x *JobDisruptionBudgetUpdate) Reset() {
	*x = JobDisruptionBudgetUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDisruptionBudgetUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDisruptionBudgetUpdate) ProtoMessage() {}

func (x *JobDisruptionBudgetUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDisruptionBudgetUpdate.ProtoReflect.Descriptor instead.
func (*JobDisruptionBudgetUpdate) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{33}
}

func (x *JobDisruptionBudgetUpdate) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobDisruptionBudgetUpdate) GetDisruptionBudget() *JobDisruptionBudget {
	if x != nil {
		return x.DisruptionBudget
	}
	return nil
}

type JobAttributesUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId      string            `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *JobAttributesUpdate) Reset() {
	*x = JobAttributesUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobAttributesUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobAttributesUpdate) ProtoMessage() {}

func (x *JobAttributesUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobAttributesUpdate.ProtoReflect.Descriptor instead.
func (*JobAttributesUpdate) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{34}
}

func (x *JobAttributesUpdate) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobAttributesUpdate) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type JobAttributesDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId string   `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Keys  []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *JobAttributesDeleteRequest) Reset() {
	*x = JobAttributesDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobAttributesDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobAttributesDeleteRequest) ProtoMessage() {}

func (x *JobAttributesDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobAttributesDeleteRequest.ProtoReflect.Descriptor instead.
func (*JobAttributesDeleteRequest) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{35}
}

func (x *JobAttributesDeleteRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobAttributesDeleteRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type TaskId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskId) Reset() {
	*x = TaskId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskId) ProtoMessage() {}

func (x *TaskId) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskId.ProtoReflect.Descriptor instead.
func (*TaskId) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{36}
}

func (x *TaskId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TaskIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskIds) Reset() {
	*x = TaskIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIds) ProtoMessage() {}

func (x *TaskIds) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIds.ProtoReflect.Descriptor instead.
func (*TaskIds) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{37}
}

func (x *TaskIds) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

// Task query request. The query result is limited to the active data set. Finished jobs/tasks are not evaluated
// when the query is executed.
type TaskQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Requested page number/size.
	Page *Page `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	/// (Optional) Collection of fields and their values for a filter.
	// Available query criteria:
	// jobIds - list of comma separated job ids
	// taskIds - list of comma separated task ids
	// owner - job owner
	// applicationName - job application name
	// imageName - image name
	// imageTag - image tag
	// capacityGroup - job assigned capacity group
	// jobGroupStack - job group stack
	// jobGroupDetail - job group details
	// jobGroupSequence - job group sequence
	// jobType - job type (batch or service)
	// attributes - comma separated job attribute key/value pairs. The same key may occur multiple times, with different
	//              values (any value matches the filter). A value may be omitted, in which case if the key
	//              occurs only once, only presence of the key is checked, without value comparison (otherwise the value
	//              is an empty string). Example filters:
	//              * 'key1' - matches, if the key is present
	//              * 'key2:value2' - matches if the attributes contain key 'key2' with value 'value2'
	//              * 'key3,key3:value3a,key3:value3b' - matches if the attributes contain key 'key3' with value '' or 'value3a' or 'value3b'
	//              All the above can be passed together as 'key1,key2:value2,key3,key3:value3a,key3:value3b'
	// attributes.op - logical 'and' or 'or' operators, which should be applied to multiple attributes specified in the query
	// jobState - job state (one)
	// taskStates - task states (multiple, comma separated). Empty value is the same as no value set.
	// taskStateReasons - reasons associated with task states (multiple, comma separated)
	// needsMigration - if set to true, return only tasks that require migration
	// skipSystemFailures - a filter for finished tasks only (does not affect non-finished tasks). If set to true,
	//                      a finished task that failed due to a system error is filtered out. System error codes
	//                      are specified in the TaskStatus type definition. These are container failures due to Titus
	//                      internal issues.
	FilteringCriteria map[string]string `protobuf:"bytes,2,rep,name=filteringCriteria,proto3" json:"filteringCriteria,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// (Optional) If set, only field values explicitly given in this parameter will be returned
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *TaskQuery) Reset() {
	*x = TaskQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQuery) ProtoMessage() {}

func (x *TaskQuery) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQuery.ProtoReflect.Descriptor instead.
func (*TaskQuery) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{38}
}

func (x *TaskQuery) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *TaskQuery) GetFilteringCriteria() map[string]string {
	if x != nil {
		return x.FilteringCriteria
	}
	return nil
}

func (x *TaskQuery) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type TaskQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items      []*Task     `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *TaskQueryResult) Reset() {
	*x = TaskQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueryResult) ProtoMessage() {}

func (x *TaskQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueryResult.ProtoReflect.Descriptor instead.
func (*TaskQueryResult) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{39}
}

func (x *TaskQueryResult) GetItems() []*Task {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *TaskQueryResult) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type TaskKillRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Task to kill.
	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	/// (Optional) Should job size be reduced
	Shrink bool `protobuf:"varint,2,opt,name=shrink,proto3" json:"shrink,omitempty"`
	// (Optional) If set to true, and this is a terminate and shrink request ('shrink' set to true), reject
	// the kill request if it would cause the job size go below the current minimum size. Otherwise, the job
	// size minimum size is decremented by 1.
	PreventMinSizeUpdate bool `protobuf:"varint,3,opt,name=preventMinSizeUpdate,proto3" json:"preventMinSizeUpdate,omitempty"`
}

func (x *TaskKillRequest) Reset() {
	*x = TaskKillRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskKillRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskKillRequest) ProtoMessage() {}

func (x *TaskKillRequest) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskKillRequest.ProtoReflect.Descriptor instead.
func (*TaskKillRequest) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{40}
}

func (x *TaskKillRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskKillRequest) GetShrink() bool {
	if x != nil {
		return x.Shrink
	}
	return false
}

func (x *TaskKillRequest) GetPreventMinSizeUpdate() bool {
	if x != nil {
		return x.PreventMinSizeUpdate
	}
	return false
}

type TaskAttributesUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     string            `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TaskAttributesUpdate) Reset() {
	*x = TaskAttributesUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAttributesUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAttributesUpdate) ProtoMessage() {}

func (x *TaskAttributesUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAttributesUpdate.ProtoReflect.Descriptor instead.
func (*TaskAttributesUpdate) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{41}
}

func (x *TaskAttributesUpdate) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskAttributesUpdate) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type TaskAttributesDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string   `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Keys   []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *TaskAttributesDeleteRequest) Reset() {
	*x = TaskAttributesDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAttributesDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAttributesDeleteRequest) ProtoMessage() {}

func (x *TaskAttributesDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAttributesDeleteRequest.ProtoReflect.Descriptor instead.
func (*TaskAttributesDeleteRequest) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{42}
}

func (x *TaskAttributesDeleteRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskAttributesDeleteRequest) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type TaskMoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Source Job(Service) distinct from target job which is the source of the task.
	SourceJobId string `protobuf:"bytes,1,opt,name=sourceJobId,proto3" json:"sourceJobId,omitempty"`
	/// (Required) Target Job(Service) distinct from source job which is the recipient of the task.
	TargetJobId string `protobuf:"bytes,2,opt,name=targetJobId,proto3" json:"targetJobId,omitempty"`
	/// (Required) Task to move. Task must be in started state.
	TaskId string `protobuf:"bytes,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *TaskMoveRequest) Reset() {
	*x = TaskMoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskMoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMoveRequest) ProtoMessage() {}

func (x *TaskMoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMoveRequest.ProtoReflect.Descriptor instead.
func (*TaskMoveRequest) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{43}
}

func (x *TaskMoveRequest) GetSourceJobId() string {
	if x != nil {
		return x.SourceJobId
	}
	return ""
}

func (x *TaskMoveRequest) GetTargetJobId() string {
	if x != nil {
		return x.TargetJobId
	}
	return ""
}

func (x *TaskMoveRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type ContainerResources_EfsMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) EFS id
	EfsId string `protobuf:"bytes,1,opt,name=efsId,proto3" json:"efsId,omitempty"`
	/// (Required) EFS mount point
	MountPoint string `protobuf:"bytes,2,opt,name=mountPoint,proto3" json:"mountPoint,omitempty"`
	/// (Required) EFS mount permission mask
	MountPerm MountPerm `protobuf:"varint,3,opt,name=mountPerm,proto3,enum=com.netflix.titus.MountPerm" json:"mountPerm,omitempty"`
	/// (Optional) EFS relative mount point
	EfsRelativeMountPoint string `protobuf:"bytes,4,opt,name=efsRelativeMountPoint,proto3" json:"efsRelativeMountPoint,omitempty"`
}

func (x *ContainerResources_EfsMount) Reset() {
	*x = ContainerResources_EfsMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerResources_EfsMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResources_EfsMount) ProtoMessage() {}

func (x *ContainerResources_EfsMount) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResources_EfsMount.ProtoReflect.Descriptor instead.
func (*ContainerResources_EfsMount) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ContainerResources_EfsMount) GetEfsId() string {
	if x != nil {
		return x.EfsId
	}
	return ""
}

func (x *ContainerResources_EfsMount) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

func (x *ContainerResources_EfsMount) GetMountPerm() MountPerm {
	if x != nil {
		return x.MountPerm
	}
	return MountPerm_RO
}

func (x *ContainerResources_EfsMount) GetEfsRelativeMountPoint() string {
	if x != nil {
		return x.EfsRelativeMountPoint
	}
	return ""
}

/// Self managed task relocation policy for users that would like to orchestrate custom termination logic.
//  If the containers are not terminated within the confgured amount of time, the system default migration
//  policy is assumed instead.
type JobDisruptionBudget_SelfManaged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Amount of time a container owner has to migrate their containers. A maximum will be enforced by the system.
	RelocationTimeMs uint64 `protobuf:"varint,1,opt,name=relocationTimeMs,proto3" json:"relocationTimeMs,omitempty"`
}

func (x *JobDisruptionBudget_SelfManaged) Reset() {
	*x = JobDisruptionBudget_SelfManaged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDisruptionBudget_SelfManaged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDisruptionBudget_SelfManaged) ProtoMessage() {}

func (x *JobDisruptionBudget_SelfManaged) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDisruptionBudget_SelfManaged.ProtoReflect.Descriptor instead.
func (*JobDisruptionBudget_SelfManaged) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{10, 0}
}

func (x *JobDisruptionBudget_SelfManaged) GetRelocationTimeMs() uint64 {
	if x != nil {
		return x.RelocationTimeMs
	}
	return 0
}

/// The minimum required percentage of tasks in a healthy state. Tasks will not be terminated by the eviction service
//  if this limit would be violated.
type JobDisruptionBudget_AvailabilityPercentageLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PercentageOfHealthyContainers float64 `protobuf:"fixed64,1,opt,name=percentageOfHealthyContainers,proto3" json:"percentageOfHealthyContainers,omitempty"`
}

func (x *JobDisruptionBudget_AvailabilityPercentageLimit) Reset() {
	*x = JobDisruptionBudget_AvailabilityPercentageLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDisruptionBudget_AvailabilityPercentageLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDisruptionBudget_AvailabilityPercentageLimit) ProtoMessage() {}

func (x *JobDisruptionBudget_AvailabilityPercentageLimit) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDisruptionBudget_AvailabilityPercentageLimit.ProtoReflect.Descriptor instead.
func (*JobDisruptionBudget_AvailabilityPercentageLimit) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{10, 1}
}

func (x *JobDisruptionBudget_AvailabilityPercentageLimit) GetPercentageOfHealthyContainers() float64 {
	if x != nil {
		return x.PercentageOfHealthyContainers
	}
	return 0
}

/// The maximum required amount of tasks in an unhealthy state. Tasks will not be terminated by the eviction service
//  if this limit would be violated.
type JobDisruptionBudget_UnhealthyTasksLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitOfUnhealthyContainers uint32 `protobuf:"varint,1,opt,name=limitOfUnhealthyContainers,proto3" json:"limitOfUnhealthyContainers,omitempty"`
}

func (x *JobDisruptionBudget_UnhealthyTasksLimit) Reset() {
	*x = JobDisruptionBudget_UnhealthyTasksLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDisruptionBudget_UnhealthyTasksLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDisruptionBudget_UnhealthyTasksLimit) ProtoMessage() {}

func (x *JobDisruptionBudget_UnhealthyTasksLimit) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDisruptionBudget_UnhealthyTasksLimit.ProtoReflect.Descriptor instead.
func (*JobDisruptionBudget_UnhealthyTasksLimit) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{10, 2}
}

func (x *JobDisruptionBudget_UnhealthyTasksLimit) GetLimitOfUnhealthyContainers() uint32 {
	if x != nil {
		return x.LimitOfUnhealthyContainers
	}
	return 0
}

/// Maximum number of times a task can be relocated (only batch tasks, which have a maximum execution time).
type JobDisruptionBudget_RelocationLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *JobDisruptionBudget_RelocationLimit) Reset() {
	*x = JobDisruptionBudget_RelocationLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDisruptionBudget_RelocationLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDisruptionBudget_RelocationLimit) ProtoMessage() {}

func (x *JobDisruptionBudget_RelocationLimit) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDisruptionBudget_RelocationLimit.ProtoReflect.Descriptor instead.
func (*JobDisruptionBudget_RelocationLimit) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{10, 3}
}

func (x *JobDisruptionBudget_RelocationLimit) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

/// No limits on how many containers in a job may be relocated, provided the other disruption budget constraints are not violated.
type JobDisruptionBudget_RateUnlimited struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JobDisruptionBudget_RateUnlimited) Reset() {
	*x = JobDisruptionBudget_RateUnlimited{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDisruptionBudget_RateUnlimited) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDisruptionBudget_RateUnlimited) ProtoMessage() {}

func (x *JobDisruptionBudget_RateUnlimited) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDisruptionBudget_RateUnlimited.ProtoReflect.Descriptor instead.
func (*JobDisruptionBudget_RateUnlimited) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{10, 4}
}

/// Allow up to the given percentage of tasks to be relocated within an hour.
type JobDisruptionBudget_RatePercentagePerHour struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPercentageOfContainersRelocatedInHour float64 `protobuf:"fixed64,1,opt,name=maxPercentageOfContainersRelocatedInHour,proto3" json:"maxPercentageOfContainersRelocatedInHour,omitempty"`
}

func (x *JobDisruptionBudget_RatePercentagePerHour) Reset() {
	*x = JobDisruptionBudget_RatePercentagePerHour{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDisruptionBudget_RatePercentagePerHour) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDisruptionBudget_RatePercentagePerHour) ProtoMessage() {}

func (x *JobDisruptionBudget_RatePercentagePerHour) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDisruptionBudget_RatePercentagePerHour.ProtoReflect.Descriptor instead.
func (*JobDisruptionBudget_RatePercentagePerHour) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{10, 5}
}

func (x *JobDisruptionBudget_RatePercentagePerHour) GetMaxPercentageOfContainersRelocatedInHour() float64 {
	if x != nil {
		return x.MaxPercentageOfContainersRelocatedInHour
	}
	return 0
}

/// Allow up to the given amount of relocations per the time interval.
type JobDisruptionBudget_RatePerInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalMs       uint64 `protobuf:"varint,1,opt,name=intervalMs,proto3" json:"intervalMs,omitempty"`
	LimitPerInterval uint32 `protobuf:"varint,2,opt,name=limitPerInterval,proto3" json:"limitPerInterval,omitempty"`
}

func (x *JobDisruptionBudget_RatePerInterval) Reset() {
	*x = JobDisruptionBudget_RatePerInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDisruptionBudget_RatePerInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDisruptionBudget_RatePerInterval) ProtoMessage() {}

func (x *JobDisruptionBudget_RatePerInterval) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDisruptionBudget_RatePerInterval.ProtoReflect.Descriptor instead.
func (*JobDisruptionBudget_RatePerInterval) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{10, 6}
}

func (x *JobDisruptionBudget_RatePerInterval) GetIntervalMs() uint64 {
	if x != nil {
		return x.IntervalMs
	}
	return 0
}

func (x *JobDisruptionBudget_RatePerInterval) GetLimitPerInterval() uint32 {
	if x != nil {
		return x.LimitPerInterval
	}
	return 0
}

/// Percentage of containers that can be relocated within a time interval. The number of containers is determined
//  during each evaluation, and the number is based on the current desired job size. If the job size changes, the percentage of containers
//  changes accordingly. For example, setting / interval to 60000 (1 minute) and ratePercentagePerInterval to 5 (5%)
//  would allow only for up to 5% of all containers to be relocated every minute, given the other criteria are met.
//  For a job with a desired size of 100, 5 container relocations per minute would be allowed. If the desired job size changes
//  to 200, the relocation rate increases to 10 containers per minute.
type JobDisruptionBudget_RatePercentagePerInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalMs                 uint64  `protobuf:"varint,1,opt,name=intervalMs,proto3" json:"intervalMs,omitempty"`
	PercentageLimitPerInterval float64 `protobuf:"fixed64,2,opt,name=percentageLimitPerInterval,proto3" json:"percentageLimitPerInterval,omitempty"`
}

func (x *JobDisruptionBudget_RatePercentagePerInterval) Reset() {
	*x = JobDisruptionBudget_RatePercentagePerInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDisruptionBudget_RatePercentagePerInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDisruptionBudget_RatePercentagePerInterval) ProtoMessage() {}

func (x *JobDisruptionBudget_RatePercentagePerInterval) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDisruptionBudget_RatePercentagePerInterval.ProtoReflect.Descriptor instead.
func (*JobDisruptionBudget_RatePercentagePerInterval) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{10, 7}
}

func (x *JobDisruptionBudget_RatePercentagePerInterval) GetIntervalMs() uint64 {
	if x != nil {
		return x.IntervalMs
	}
	return 0
}

func (x *JobDisruptionBudget_RatePercentagePerInterval) GetPercentageLimitPerInterval() float64 {
	if x != nil {
		return x.PercentageLimitPerInterval
	}
	return 0
}

/// The system default migration policy.
type MigrationPolicy_SystemDefault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MigrationPolicy_SystemDefault) Reset() {
	*x = MigrationPolicy_SystemDefault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationPolicy_SystemDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationPolicy_SystemDefault) ProtoMessage() {}

func (x *MigrationPolicy_SystemDefault) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationPolicy_SystemDefault.ProtoReflect.Descriptor instead.
func (*MigrationPolicy_SystemDefault) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{12, 0}
}

/// The self managed policy where the owner needs to migrate the tasks.
type MigrationPolicy_SelfManaged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MigrationPolicy_SelfManaged) Reset() {
	*x = MigrationPolicy_SelfManaged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrationPolicy_SelfManaged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrationPolicy_SelfManaged) ProtoMessage() {}

func (x *MigrationPolicy_SelfManaged) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrationPolicy_SelfManaged.ProtoReflect.Descriptor instead.
func (*MigrationPolicy_SelfManaged) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{12, 1}
}

/// Configuration of service job processes
type ServiceJobSpec_ServiceJobProcesses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Prevents increasing the Job's desired capacity. Existing tasks that exit such as the process exiting will still be replaced.
	DisableIncreaseDesired bool `protobuf:"varint,1,opt,name=disableIncreaseDesired,proto3" json:"disableIncreaseDesired,omitempty"`
	/// Prevents decreasing the Job's desired capacity. Existing tasks that exit such as the process exiting will still be replaced.
	DisableDecreaseDesired bool `protobuf:"varint,2,opt,name=disableDecreaseDesired,proto3" json:"disableDecreaseDesired,omitempty"`
}

func (x *ServiceJobSpec_ServiceJobProcesses) Reset() {
	*x = ServiceJobSpec_ServiceJobProcesses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceJobSpec_ServiceJobProcesses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceJobSpec_ServiceJobProcesses) ProtoMessage() {}

func (x *ServiceJobSpec_ServiceJobProcesses) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceJobSpec_ServiceJobProcesses.ProtoReflect.Descriptor instead.
func (*ServiceJobSpec_ServiceJobProcesses) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{14, 0}
}

func (x *ServiceJobSpec_ServiceJobProcesses) GetDisableIncreaseDesired() bool {
	if x != nil {
		return x.DisableIncreaseDesired
	}
	return false
}

func (x *ServiceJobSpec_ServiceJobProcesses) GetDisableDecreaseDesired() bool {
	if x != nil {
		return x.DisableDecreaseDesired
	}
	return false
}

/// URL pointing to a UI based log viewer.
type LogLocation_UI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) UI URL.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *LogLocation_UI) Reset() {
	*x = LogLocation_UI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLocation_UI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLocation_UI) ProtoMessage() {}

func (x *LogLocation_UI) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLocation_UI.ProtoReflect.Descriptor instead.
func (*LogLocation_UI) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{18, 0}
}

func (x *LogLocation_UI) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

/// URL address to a container log service. When a container is running, its stdout/stderr or any other file in the
//  '/logs' folder can be acccessed via this endpoint. The endpoint becomes unavailable when the container terminates.
//
//  A user should provide the 'f' query parameter to specify a file to download. If the 'f' query parameter is net set,
//  it defaults to 'stdout'. The file path must be relative to the '/logs' folder.
type LogLocation_LiveStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) Live log URL.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *LogLocation_LiveStream) Reset() {
	*x = LogLocation_LiveStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLocation_LiveStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLocation_LiveStream) ProtoMessage() {}

func (x *LogLocation_LiveStream) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLocation_LiveStream.ProtoReflect.Descriptor instead.
func (*LogLocation_LiveStream) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{18, 1}
}

func (x *LogLocation_LiveStream) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

/// Location of S3 folder containing container's log files.
type LogLocation_S3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// (Required) AWS account name.
	AccountName string `protobuf:"bytes,1,opt,name=accountName,proto3" json:"accountName,omitempty"`
	/// (Required) AWS account id.
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	/// (Required) AWS region.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	/// (Required) S3 bucket.
	Bucket string `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	/// (Required) The key prefix in the S3 bucket. The assumption is that the consumer finds all objects based on this key prefix.
	Key string `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *LogLocation_S3) Reset() {
	*x = LogLocation_S3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLocation_S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLocation_S3) ProtoMessage() {}

func (x *LogLocation_S3) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLocation_S3.ProtoReflect.Descriptor instead.
func (*LogLocation_S3) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{18, 2}
}

func (x *LogLocation_S3) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *LogLocation_S3) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *LogLocation_S3) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *LogLocation_S3) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *LogLocation_S3) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

/// Emitted when a new job is created or when any of the job's attributes change.
type JobChangeNotification_JobUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *JobChangeNotification_JobUpdate) Reset() {
	*x = JobChangeNotification_JobUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobChangeNotification_JobUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobChangeNotification_JobUpdate) ProtoMessage() {}

func (x *JobChangeNotification_JobUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobChangeNotification_JobUpdate.ProtoReflect.Descriptor instead.
func (*JobChangeNotification_JobUpdate) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{21, 0}
}

func (x *JobChangeNotification_JobUpdate) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

/// Emitted when a task is created or its state has changed.
type JobChangeNotification_TaskUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	/// movedFromAnotherJob will be true on the first event for the target Job after a task is moved between jobs.
	//  task.jobId will be the destination job, and it will include a 'task.movedFromJob' entry in its taskContext
	//  map with the source jobId.
	MovedFromAnotherJob bool `protobuf:"varint,2,opt,name=movedFromAnotherJob,proto3" json:"movedFromAnotherJob,omitempty"`
}

func (x *JobChangeNotification_TaskUpdate) Reset() {
	*x = JobChangeNotification_TaskUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobChangeNotification_TaskUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobChangeNotification_TaskUpdate) ProtoMessage() {}

func (x *JobChangeNotification_TaskUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobChangeNotification_TaskUpdate.ProtoReflect.Descriptor instead.
func (*JobChangeNotification_TaskUpdate) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{21, 1}
}

func (x *JobChangeNotification_TaskUpdate) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *JobChangeNotification_TaskUpdate) GetMovedFromAnotherJob() bool {
	if x != nil {
		return x.MovedFromAnotherJob
	}
	return false
}

/// A notification marker that indicates that all known jobs were streamed to the client.
type JobChangeNotification_SnapshotEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JobChangeNotification_SnapshotEnd) Reset() {
	*x = JobChangeNotification_SnapshotEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_netflix_titus_titus_job_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobChangeNotification_SnapshotEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobChangeNotification_SnapshotEnd) ProtoMessage() {}

func (x *JobChangeNotification_SnapshotEnd) ProtoReflect() protoreflect.Message {
	mi := &file_netflix_titus_titus_job_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobChangeNotification_SnapshotEnd.ProtoReflect.Descriptor instead.
func (*JobChangeNotification_SnapshotEnd) Descriptor() ([]byte, []int) {
	return file_netflix_titus_titus_job_api_proto_rawDescGZIP(), []int{21, 2}
}

var File_netflix_titus_titus_job_api_proto protoreflect.FileDescriptor

var file_netflix_titus_titus_job_api_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2f, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2f,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2f, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2f, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25,
	0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x58, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0xc0, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x51, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c,
	0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x45, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x14, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x6b, 0x0a, 0x0b, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x70, 0x76, 0x34, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x70, 0x76, 0x36, 0x41, 0x6e, 0x64, 0x49, 0x70, 0x76, 0x34, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x49, 0x70, 0x76, 0x36, 0x41, 0x6e, 0x64, 0x49, 0x70, 0x76, 0x34, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x70, 0x76, 0x36,
	0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x04, 0x22, 0xbb, 0x05, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x70,
	0x75, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x42, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x42, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x69, 0x73, 0x6b, 0x4d, 0x42, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64,
	0x69, 0x73, 0x6b, 0x4d, 0x42, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x62, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x49, 0x50, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x50, 0x12, 0x4c, 0x0a, 0x09, 0x65, 0x66, 0x73, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x45, 0x66, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x66, 0x73, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6d, 0x53, 0x69, 0x7a, 0x65,
	0x4d, 0x42, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x68, 0x6d, 0x53, 0x69, 0x7a,
	0x65, 0x4d, 0x42, 0x12, 0x66, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x6f,
	0x6c, 0x12, 0x57, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x44, 0x73, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x73, 0x1a, 0xb2, 0x01, 0x0a, 0x08, 0x45,
	0x66, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x66, 0x73, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x66, 0x73, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a,
	0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x52, 0x09,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x66, 0x73,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x66, 0x73, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d,
	0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x05,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4c,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12,
	0x48, 0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x68, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x1a, 0x3d, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08,
	0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x22, 0xbb,
	0x01, 0x0a, 0x21, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x22, 0xc2, 0x0d, 0x0a,
	0x13, 0x4a, 0x6f, 0x62, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f,
	0x62, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65,
	0x74, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x86, 0x01, 0x0a,
	0x1b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x6e, 0x0a, 0x13, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x55, 0x6e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x62, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5c, 0x0a, 0x0d, 0x72, 0x61, 0x74,
	0x65, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x65, 0x55, 0x6e,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x74, 0x0a, 0x15, 0x72, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
	0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x69,
	0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x48, 0x6f, 0x75, 0x72, 0x48, 0x01, 0x52, 0x15, 0x72, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x62, 0x0a,
	0x0f, 0x72, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
	0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x69,
	0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x01,
	0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x72, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x69, 0x73,
	0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x19, 0x72, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x66, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x1a, 0x63, 0x0a, 0x1b, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x1a, 0x55, 0x0a,
	0x13, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x55,
	0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f,
	0x66, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x1a, 0x27, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x0f, 0x0a,
	0x0d, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x1a, 0x73,
	0x0a, 0x15, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x5a, 0x0a, 0x28, 0x6d, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x28, 0x6d, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x48,
	0x6f, 0x75, 0x72, 0x1a, 0x5d, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x1a, 0x7b, 0x0a, 0x19, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12,
	0x3e, 0x0a, 0x1a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42,
	0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x52, 0x61, 0x74,
	0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x63,
	0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4f, 0x6e, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4f, 0x6e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x0f, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x58, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x52, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x65, 0x6c, 0x66,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x1a, 0x0f, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x0d, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x66, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0x70, 0x0a, 0x10, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65,
	0x65, 0x64, 0x73, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x22, 0xe4, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f,
	0x62, 0x53, 0x70, 0x65, 0x63, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4c, 0x0a, 0x0f, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x67, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x13, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x1a, 0x85, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f, 0x62,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x22, 0xd5, 0x05, 0x0a, 0x0d, 0x4a, 0x6f,
	0x62, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x43, 0x0a, 0x0c, 0x6a,
	0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x50, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c,
	0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00,
	0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x52, 0x10, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65,
	0x63, 0x22, 0xe7, 0x01, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x39, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x69,
	0x6c, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x02, 0x22, 0xac, 0x02, 0x0a, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x7b, 0x0a,
	0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x69, 0x6c, 0x6c, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x06, 0x22, 0xff, 0x02, 0x0a, 0x0b, 0x4c,
	0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x02, 0x75, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
	0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x49, 0x52, 0x02, 0x75, 0x69, 0x12, 0x49, 0x0a,
	0x0a, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x0a, 0x6c, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x31, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c,
	0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x33, 0x52, 0x02, 0x73, 0x33, 0x1a, 0x16, 0x0a, 0x02, 0x55,
	0x49, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x1a, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x1a, 0x86, 0x01, 0x0a, 0x02, 0x53, 0x33, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xcf, 0x04, 0x0a,
	0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4c, 0x6f, 0x67,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x10, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a,
	0x3e, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd7,
	0x01, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x0d, 0x6a, 0x6f, 0x62, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xdf, 0x03, 0x0a, 0x15, 0x4a, 0x6f, 0x62,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4a, 0x6f, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6a, 0x6f, 0x62,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a,
	0x6f, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a,
	0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x64, 0x1a, 0x35, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x1a, 0x6b,
	0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4a, 0x6f, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f,
	0x6d, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4a, 0x6f, 0x62, 0x1a, 0x0d, 0x0a, 0x0b, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x0d, 0x4a, 0x6f,
	0x62, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28,
	0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28,
	0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
	0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x17, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18,
	0x0a, 0x06, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x08, 0x4a, 0x6f, 0x62,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x44, 0x0a, 0x16,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x7d, 0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
	0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x10, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4a, 0x6f, 0x62,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x68, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4a, 0x6f, 0x62,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x1a, 0x44, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62, 0x0a, 0x11, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0xc4, 0x01, 0x0a, 0x27, 0x4a,
	0x6f, 0x62, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a,
	0x21, 0x6a, 0x6f, 0x62, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x21,
	0x6a, 0x6f, 0x62, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x45, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x4a, 0x6f, 0x62,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f,
	0x62, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x6f, 0x62,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x19, 0x4a, 0x6f, 0x62, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x52, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73,
	0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x52, 0x10, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x13, 0x4a, 0x6f, 0x62, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x1a, 0x4a,
	0x6f, 0x62, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x22, 0x18, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x19, 0x0a,
	0x07, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c,
	0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x44,
	0x0a, 0x16, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x7f, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
	0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x4b, 0x69, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xc6, 0x01, 0x0a,
	0x14, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x57, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x1b, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x22, 0x6d, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x6f, 0x62,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x32,
	0xe5, 0x0c, 0x0a, 0x14, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x49,
	0x64, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73,
	0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x63, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x44, 0x69,
	0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x2c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x4a, 0x6f,
	0x62, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x4a, 0x6f, 0x62, 0x12,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f,
	0x62, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0a, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4a, 0x6f,
	0x62, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x1a, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e,
	0x4a, 0x6f, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x0b, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x28, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x07, 0x4b,
	0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
	0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x64,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x4a,
	0x6f, 0x62, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x08, 0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4b, 0x69, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x08, 0x4d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x3e, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x42, 0x08, 0x4a, 0x6f, 0x62, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x0f, 0x2e, 0x2f, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x78, 0x2f, 0x74, 0x69, 0x74, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_netflix_titus_titus_job_api_proto_rawDescOnce sync.Once
	file_netflix_titus_titus_job_api_proto_rawDescData = file_netflix_titus_titus_job_api_proto_rawDesc
)

func file_netflix_titus_titus_job_api_proto_rawDescGZIP() []byte {
	file_netflix_titus_titus_job_api_proto_rawDescOnce.Do(func() {
		file_netflix_titus_titus_job_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_netflix_titus_titus_job_api_proto_rawDescData)
	})
	return file_netflix_titus_titus_job_api_proto_rawDescData
}

var file_netflix_titus_titus_job_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_netflix_titus_titus_job_api_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_netflix_titus_titus_job_api_proto_goTypes = []interface{}{
	(NetworkConfiguration_NetworkMode)(0),           // 0: com.netflix.titus.NetworkConfiguration.NetworkMode
	(JobStatus_JobState)(0),                         // 1: com.netflix.titus.JobStatus.JobState
	(TaskStatus_TaskState)(0),                       // 2: com.netflix.titus.TaskStatus.TaskState
	(*Owner)(nil),                                   // 3: com.netflix.titus.Owner
	(*JobGroupInfo)(nil),                            // 4: com.netflix.titus.JobGroupInfo
	(*Constraints)(nil),                             // 5: com.netflix.titus.Constraints
	(*Image)(nil),                                   // 6: com.netflix.titus.Image
	(*NetworkConfiguration)(nil),                    // 7: com.netflix.titus.NetworkConfiguration
	(*ContainerResources)(nil),                      // 8: com.netflix.titus.ContainerResources
	(*SecurityProfile)(nil),                         // 9: com.netflix.titus.SecurityProfile
	(*Container)(nil),                               // 10: com.netflix.titus.Container
	(*Capacity)(nil),                                // 11: com.netflix.titus.Capacity
	(*JobCapacityWithOptionalAttributes)(nil),       // 12: com.netflix.titus.JobCapacityWithOptionalAttributes
	(*JobDisruptionBudget)(nil),                     // 13: com.netflix.titus.JobDisruptionBudget
	(*BatchJobSpec)(nil),                            // 14: com.netflix.titus.BatchJobSpec
	(*MigrationPolicy)(nil),                         // 15: com.netflix.titus.MigrationPolicy
	(*MigrationDetails)(nil),                        // 16: com.netflix.titus.MigrationDetails
	(*ServiceJobSpec)(nil),                          // 17: com.netflix.titus.ServiceJobSpec
	(*JobDescriptor)(nil),                           // 18: com.netflix.titus.JobDescriptor
	(*JobStatus)(nil),                               // 19: com.netflix.titus.JobStatus
	(*TaskStatus)(nil),                              // 20: com.netflix.titus.TaskStatus
	(*LogLocation)(nil),                             // 21: com.netflix.titus.LogLocation
	(*Task)(nil),                                    // 22: com.netflix.titus.Task
	(*Job)(nil),                                     // 23: com.netflix.titus.Job
	(*JobChangeNotification)(nil),                   // 24: com.netflix.titus.JobChangeNotification
	(*JobDataRecord)(nil),                           // 25: com.netflix.titus.JobDataRecord
	(*TaskDataRecord)(nil),                          // 26: com.netflix.titus.TaskDataRecord
	(*JobId)(nil),                                   // 27: com.netflix.titus.JobId
	(*JobIds)(nil),                                  // 28: com.netflix.titus.JobIds
	(*JobQuery)(nil),                                // 29: com.netflix.titus.JobQuery
	(*JobQueryResult)(nil),                          // 30: com.netflix.titus.JobQueryResult
	(*ObserveJobsQuery)(nil),                        // 31: com.netflix.titus.ObserveJobsQuery
	(*JobCapacityUpdate)(nil),                       // 32: com.netflix.titus.JobCapacityUpdate
	(*JobCapacityUpdateWithOptionalAttributes)(nil), // 33: com.netflix.titus.JobCapacityUpdateWithOptionalAttributes
	(*JobStatusUpdate)(nil),                         // 34: com.netflix.titus.JobStatusUpdate
	(*JobProcessesUpdate)(nil),                      // 35: com.netflix.titus.JobProcessesUpdate
	(*JobDisruptionBudgetUpdate)(nil),               // 36: com.netflix.titus.JobDisruptionBudgetUpdate
	(*JobAttributesUpdate)(nil),                     // 37: com.netflix.titus.JobAttributesUpdate
	(*JobAttributesDeleteRequest)(nil),              // 38: com.netflix.titus.JobAttributesDeleteRequest
	(*TaskId)(nil),                                  // 39: com.netflix.titus.TaskId
	(*TaskIds)(nil),                                 // 40: com.netflix.titus.TaskIds
	(*TaskQuery)(nil),                               // 41: com.netflix.titus.TaskQuery
	(*TaskQueryResult)(nil),                         // 42: com.netflix.titus.TaskQueryResult
	(*TaskKillRequest)(nil),                         // 43: com.netflix.titus.TaskKillRequest
	(*TaskAttributesUpdate)(nil),                    // 44: com.netflix.titus.TaskAttributesUpdate
	(*TaskAttributesDeleteRequest)(nil),             // 45: com.netflix.titus.TaskAttributesDeleteRequest
	(*TaskMoveRequest)(nil),                         // 46: com.netflix.titus.TaskMoveRequest
	nil,                                             // 47: com.netflix.titus.Constraints.ConstraintsEntry
	(*ContainerResources_EfsMount)(nil),             // 48: com.netflix.titus.ContainerResources.EfsMount
	nil,                                             // 49: com.netflix.titus.SecurityProfile.AttributesEntry
	nil,                                             // 50: com.netflix.titus.Container.AttributesEntry
	nil,                                             // 51: com.netflix.titus.Container.EnvEntry
	(*JobDisruptionBudget_SelfManaged)(nil),         // 52: com.netflix.titus.JobDisruptionBudget.SelfManaged
	(*JobDisruptionBudget_AvailabilityPercentageLimit)(nil), // 53: com.netflix.titus.JobDisruptionBudget.AvailabilityPercentageLimit
	(*JobDisruptionBudget_UnhealthyTasksLimit)(nil),         // 54: com.netflix.titus.JobDisruptionBudget.UnhealthyTasksLimit
	(*JobDisruptionBudget_RelocationLimit)(nil),             // 55: com.netflix.titus.JobDisruptionBudget.RelocationLimit
	(*JobDisruptionBudget_RateUnlimited)(nil),               // 56: com.netflix.titus.JobDisruptionBudget.RateUnlimited
	(*JobDisruptionBudget_RatePercentagePerHour)(nil),       // 57: com.netflix.titus.JobDisruptionBudget.RatePercentagePerHour
	(*JobDisruptionBudget_RatePerInterval)(nil),             // 58: com.netflix.titus.JobDisruptionBudget.RatePerInterval
	(*JobDisruptionBudget_RatePercentagePerInterval)(nil),   // 59: com.netflix.titus.JobDisruptionBudget.RatePercentagePerInterval
	(*MigrationPolicy_SystemDefault)(nil),                   // 60: com.netflix.titus.MigrationPolicy.SystemDefault
	(*MigrationPolicy_SelfManaged)(nil),                     // 61: com.netflix.titus.MigrationPolicy.SelfManaged
	(*ServiceJobSpec_ServiceJobProcesses)(nil),              // 62: com.netflix.titus.ServiceJobSpec.ServiceJobProcesses
	nil,                                      // 63: com.netflix.titus.JobDescriptor.AttributesEntry
	(*LogLocation_UI)(nil),                   // 64: com.netflix.titus.LogLocation.UI
	(*LogLocation_LiveStream)(nil),           // 65: com.netflix.titus.LogLocation.LiveStream
	(*LogLocation_S3)(nil),                   // 66: com.netflix.titus.LogLocation.S3
	nil,                                      // 67: com.netflix.titus.Task.TaskContextEntry
	nil,                                      // 68: com.netflix.titus.Task.AttributesEntry
	(*JobChangeNotification_JobUpdate)(nil),  // 69: com.netflix.titus.JobChangeNotification.JobUpdate
	(*JobChangeNotification_TaskUpdate)(nil), // 70: com.netflix.titus.JobChangeNotification.TaskUpdate
	(*JobChangeNotification_SnapshotEnd)(nil), // 71: com.netflix.titus.JobChangeNotification.SnapshotEnd
	nil,                             // 72: com.netflix.titus.JobQuery.FilteringCriteriaEntry
	nil,                             // 73: com.netflix.titus.ObserveJobsQuery.FilteringCriteriaEntry
	nil,                             // 74: com.netflix.titus.JobAttributesUpdate.AttributesEntry
	nil,                             // 75: com.netflix.titus.TaskQuery.FilteringCriteriaEntry
	nil,                             // 76: com.netflix.titus.TaskAttributesUpdate.AttributesEntry
	(*SignedAddressAllocation)(nil), // 77: com.netflix.titus.SignedAddressAllocation
	(*StaticIPAddressIDs)(nil),      // 78: com.netflix.titus.StaticIPAddressIDs
	(*anypb.Any)(nil),               // 79: google.protobuf.Any
	(*wrapperspb.UInt32Value)(nil),  // 80: google.protobuf.UInt32Value
	(*TimeWindow)(nil),              // 81: com.netflix.titus.TimeWindow
	(*ContainerHealthProvider)(nil), // 82: com.netflix.titus.ContainerHealthProvider
	(*RetryPolicy)(nil),             // 83: com.netflix.titus.RetryPolicy
	(*DataRecordMetadata)(nil),      // 84: com.netflix.titus.DataRecordMetadata
	(*Page)(nil),                    // 85: com.netflix.titus.Page
	(*Pagination)(nil),              // 86: com.netflix.titus.Pagination
	(MountPerm)(0),                  // 87: com.netflix.titus.MountPerm
	(*emptypb.Empty)(nil),           // 88: google.protobuf.Empty
}
var file_netflix_titus_titus_job_api_proto_depIdxs = []int32{
	47,  // 0: com.netflix.titus.Constraints.constraints:type_name -> com.netflix.titus.Constraints.ConstraintsEntry
	0,   // 1: com.netflix.titus.NetworkConfiguration.networkMode:type_name -> com.netflix.titus.NetworkConfiguration.NetworkMode
	48,  // 2: com.netflix.titus.ContainerResources.efsMounts:type_name -> com.netflix.titus.ContainerResources.EfsMount
	77,  // 3: com.netflix.titus.ContainerResources.signedAddressAllocations:type_name -> com.netflix.titus.SignedAddressAllocation
	78,  // 4: com.netflix.titus.ContainerResources.staticIPAddressIDs:type_name -> com.netflix.titus.StaticIPAddressIDs
	49,  // 5: com.netflix.titus.SecurityProfile.attributes:type_name -> com.netflix.titus.SecurityProfile.AttributesEntry
	8,   // 6: com.netflix.titus.Container.resources:type_name -> com.netflix.titus.ContainerResources
	9,   // 7: com.netflix.titus.Container.securityProfile:type_name -> com.netflix.titus.SecurityProfile
	6,   // 8: com.netflix.titus.Container.image:type_name -> com.netflix.titus.Image
	50,  // 9: com.netflix.titus.Container.attributes:type_name -> com.netflix.titus.Container.AttributesEntry
	51,  // 10: com.netflix.titus.Container.env:type_name -> com.netflix.titus.Container.EnvEntry
	5,   // 11: com.netflix.titus.Container.softConstraints:type_name -> com.netflix.titus.Constraints
	5,   // 12: com.netflix.titus.Container.hardConstraints:type_name -> com.netflix.titus.Constraints
	79,  // 13: com.netflix.titus.Container.experimental:type_name -> google.protobuf.Any
	80,  // 14: com.netflix.titus.JobCapacityWithOptionalAttributes.min:type_name -> google.protobuf.UInt32Value
	80,  // 15: com.netflix.titus.JobCapacityWithOptionalAttributes.max:type_name -> google.protobuf.UInt32Value
	80,  // 16: com.netflix.titus.JobCapacityWithOptionalAttributes.desired:type_name -> google.protobuf.UInt32Value
	52,  // 17: com.netflix.titus.JobDisruptionBudget.selfManaged:type_name -> com.netflix.titus.JobDisruptionBudget.SelfManaged
	53,  // 18: com.netflix.titus.JobDisruptionBudget.availabilityPercentageLimit:type_name -> com.netflix.titus.JobDisruptionBudget.AvailabilityPercentageLimit
	54,  // 19: com.netflix.titus.JobDisruptionBudget.unhealthyTasksLimit:type_name -> com.netflix.titus.JobDisruptionBudget.UnhealthyTasksLimit
	55,  // 20: com.netflix.titus.JobDisruptionBudget.relocationLimit:type_name -> com.netflix.titus.JobDisruptionBudget.RelocationLimit
	56,  // 21: com.netflix.titus.JobDisruptionBudget.rateUnlimited:type_name -> com.netflix.titus.JobDisruptionBudget.RateUnlimited
	57,  // 22: com.netflix.titus.JobDisruptionBudget.ratePercentagePerHour:type_name -> com.netflix.titus.JobDisruptionBudget.RatePercentagePerHour
	58,  // 23: com.netflix.titus.JobDisruptionBudget.ratePerInterval:type_name -> com.netflix.titus.JobDisruptionBudget.RatePerInterval
	59,  // 24: com.netflix.titus.JobDisruptionBudget.ratePercentagePerInterval:type_name -> com.netflix.titus.JobDisruptionBudget.RatePercentagePerInterval
	81,  // 25: com.netflix.titus.JobDisruptionBudget.timeWindows:type_name -> com.netflix.titus.TimeWindow
	82,  // 26: com.netflix.titus.JobDisruptionBudget.containerHealthProviders:type_name -> com.netflix.titus.ContainerHealthProvider
	83,  // 27: com.netflix.titus.BatchJobSpec.retryPolicy:type_name -> com.netflix.titus.RetryPolicy
	60,  // 28: com.netflix.titus.MigrationPolicy.systemDefault:type_name -> com.netflix.titus.MigrationPolicy.SystemDefault
	61,  // 29: com.netflix.titus.MigrationPolicy.selfManaged:type_name -> com.netflix.titus.MigrationPolicy.SelfManaged
	11,  // 30: com.netflix.titus.ServiceJobSpec.capacity:type_name -> com.netflix.titus.Capacity
	83,  // 31: com.netflix.titus.ServiceJobSpec.retryPolicy:type_name -> com.netflix.titus.RetryPolicy
	15,  // 32: com.netflix.titus.ServiceJobSpec.migrationPolicy:type_name -> com.netflix.titus.MigrationPolicy
	62,  // 33: com.netflix.titus.ServiceJobSpec.serviceJobProcesses:type_name -> com.netflix.titus.ServiceJobSpec.ServiceJobProcesses
	3,   // 34: com.netflix.titus.JobDescriptor.owner:type_name -> com.netflix.titus.Owner
	4,   // 35: com.netflix.titus.JobDescriptor.jobGroupInfo:type_name -> com.netflix.titus.JobGroupInfo
	63,  // 36: com.netflix.titus.JobDescriptor.attributes:type_name -> com.netflix.titus.JobDescriptor.AttributesEntry
	10,  // 37: com.netflix.titus.JobDescriptor.container:type_name -> com.netflix.titus.Container
	14,  // 38: com.netflix.titus.JobDescriptor.batch:type_name -> com.netflix.titus.BatchJobSpec
	17,  // 39: com.netflix.titus.JobDescriptor.service:type_name -> com.netflix.titus.ServiceJobSpec
	13,  // 40: com.netflix.titus.JobDescriptor.disruptionBudget:type_name -> com.netflix.titus.JobDisruptionBudget
	7,   // 41: com.netflix.titus.JobDescriptor.networkConfiguration:type_name -> com.netflix.titus.NetworkConfiguration
	1,   // 42: com.netflix.titus.JobStatus.state:type_name -> com.netflix.titus.JobStatus.JobState
	2,   // 43: com.netflix.titus.TaskStatus.state:type_name -> com.netflix.titus.TaskStatus.TaskState
	64,  // 44: com.netflix.titus.LogLocation.ui:type_name -> com.netflix.titus.LogLocation.UI
	65,  // 45: com.netflix.titus.LogLocation.liveStream:type_name -> com.netflix.titus.LogLocation.LiveStream
	66,  // 46: com.netflix.titus.LogLocation.s3:type_name -> com.netflix.titus.LogLocation.S3
	67,  // 47: com.netflix.titus.Task.taskContext:type_name -> com.netflix.titus.Task.TaskContextEntry
	20,  // 48: com.netflix.titus.Task.status:type_name -> com.netflix.titus.TaskStatus
	20,  // 49: com.netflix.titus.Task.statusHistory:type_name -> com.netflix.titus.TaskStatus
	21,  // 50: com.netflix.titus.Task.logLocation:type_name -> com.netflix.titus.LogLocation
	16,  // 51: com.netflix.titus.Task.migrationDetails:type_name -> com.netflix.titus.MigrationDetails
	68,  // 52: com.netflix.titus.Task.attributes:type_name -> com.netflix.titus.Task.AttributesEntry
	18,  // 53: com.netflix.titus.Job.jobDescriptor:type_name -> com.netflix.titus.JobDescriptor
	19,  // 54: com.netflix.titus.Job.status:type_name -> com.netflix.titus.JobStatus
	19,  // 55: com.netflix.titus.Job.statusHistory:type_name -> com.netflix.titus.JobStatus
	69,  // 56: com.netflix.titus.JobChangeNotification.jobUpdate:type_name -> com.netflix.titus.JobChangeNotification.JobUpdate
	70,  // 57: com.netflix.titus.JobChangeNotification.taskUpdate:type_name -> com.netflix.titus.JobChangeNotification.TaskUpdate
	71,  // 58: com.netflix.titus.JobChangeNotification.snapshotEnd:type_name -> com.netflix.titus.JobChangeNotification.SnapshotEnd
	84,  // 59: com.netflix.titus.JobDataRecord.metadata:type_name -> com.netflix.titus.DataRecordMetadata
	23,  // 60: com.netflix.titus.JobDataRecord.job:type_name -> com.netflix.titus.Job
	84,  // 61: com.netflix.titus.TaskDataRecord.metadata:type_name -> com.netflix.titus.DataRecordMetadata
	23,  // 62: com.netflix.titus.TaskDataRecord.job:type_name -> com.netflix.titus.Job
	22,  // 63: com.netflix.titus.TaskDataRecord.task:type_name -> com.netflix.titus.Task
	85,  // 64: com.netflix.titus.JobQuery.page:type_name -> com.netflix.titus.Page
	72,  // 65: com.netflix.titus.JobQuery.filteringCriteria:type_name -> com.netflix.titus.JobQuery.FilteringCriteriaEntry
	23,  // 66: com.netflix.titus.JobQueryResult.items:type_name -> com.netflix.titus.Job
	86,  // 67: com.netflix.titus.JobQueryResult.pagination:type_name -> com.netflix.titus.Pagination
	73,  // 68: com.netflix.titus.ObserveJobsQuery.filteringCriteria:type_name -> com.netflix.titus.ObserveJobsQuery.FilteringCriteriaEntry
	11,  // 69: com.netflix.titus.JobCapacityUpdate.Capacity:type_name -> com.netflix.titus.Capacity
	12,  // 70: com.netflix.titus.JobCapacityUpdateWithOptionalAttributes.jobCapacityWithOptionalAttributes:type_name -> com.netflix.titus.JobCapacityWithOptionalAttributes
	62,  // 71: com.netflix.titus.JobProcessesUpdate.serviceJobProcesses:type_name -> com.netflix.titus.ServiceJobSpec.ServiceJobProcesses
	13,  // 72: com.netflix.titus.JobDisruptionBudgetUpdate.disruptionBudget:type_name -> com.netflix.titus.JobDisruptionBudget
	74,  // 73: com.netflix.titus.JobAttributesUpdate.attributes:type_name -> com.netflix.titus.JobAttributesUpdate.AttributesEntry
	85,  // 74: com.netflix.titus.TaskQuery.page:type_name -> com.netflix.titus.Page
	75,  // 75: com.netflix.titus.TaskQuery.filteringCriteria:type_name -> com.netflix.titus.TaskQuery.FilteringCriteriaEntry
	22,  // 76: com.netflix.titus.TaskQueryResult.items:type_name -> com.netflix.titus.Task
	86,  // 77: com.netflix.titus.TaskQueryResult.pagination:type_name -> com.netflix.titus.Pagination
	76,  // 78: com.netflix.titus.TaskAttributesUpdate.attributes:type_name -> com.netflix.titus.TaskAttributesUpdate.AttributesEntry
	87,  // 79: com.netflix.titus.ContainerResources.EfsMount.mountPerm:type_name -> com.netflix.titus.MountPerm
	23,  // 80: com.netflix.titus.JobChangeNotification.JobUpdate.job:type_name -> com.netflix.titus.Job
	22,  // 81: com.netflix.titus.JobChangeNotification.TaskUpdate.task:type_name -> com.netflix.titus.Task
	18,  // 82: com.netflix.titus.JobManagementService.CreateJob:input_type -> com.netflix.titus.JobDescriptor
	32,  // 83: com.netflix.titus.JobManagementService.UpdateJobCapacity:input_type -> com.netflix.titus.JobCapacityUpdate
	33,  // 84: com.netflix.titus.JobManagementService.UpdateJobCapacityWithOptionalAttributes:input_type -> com.netflix.titus.JobCapacityUpdateWithOptionalAttributes
	34,  // 85: com.netflix.titus.JobManagementService.UpdateJobStatus:input_type -> com.netflix.titus.JobStatusUpdate
	35,  // 86: com.netflix.titus.JobManagementService.UpdateJobProcesses:input_type -> com.netflix.titus.JobProcessesUpdate
	36,  // 87: com.netflix.titus.JobManagementService.UpdateJobDisruptionBudget:input_type -> com.netflix.titus.JobDisruptionBudgetUpdate
	29,  // 88: com.netflix.titus.JobManagementService.FindJobs:input_type -> com.netflix.titus.JobQuery
	27,  // 89: com.netflix.titus.JobManagementService.FindJob:input_type -> com.netflix.titus.JobId
	27,  // 90: com.netflix.titus.JobManagementService.ObserveJob:input_type -> com.netflix.titus.JobId
	31,  // 91: com.netflix.titus.JobManagementService.ObserveJobs:input_type -> com.netflix.titus.ObserveJobsQuery
	27,  // 92: com.netflix.titus.JobManagementService.KillJob:input_type -> com.netflix.titus.JobId
	37,  // 93: com.netflix.titus.JobManagementService.UpdateJobAttributes:input_type -> com.netflix.titus.JobAttributesUpdate
	38,  // 94: com.netflix.titus.JobManagementService.DeleteJobAttributes:input_type -> com.netflix.titus.JobAttributesDeleteRequest
	39,  // 95: com.netflix.titus.JobManagementService.FindTask:input_type -> com.netflix.titus.TaskId
	41,  // 96: com.netflix.titus.JobManagementService.FindTasks:input_type -> com.netflix.titus.TaskQuery
	43,  // 97: com.netflix.titus.JobManagementService.KillTask:input_type -> com.netflix.titus.TaskKillRequest
	44,  // 98: com.netflix.titus.JobManagementService.UpdateTaskAttributes:input_type -> com.netflix.titus.TaskAttributesUpdate
	45,  // 99: com.netflix.titus.JobManagementService.DeleteTaskAttributes:input_type -> com.netflix.titus.TaskAttributesDeleteRequest
	46,  // 100: com.netflix.titus.JobManagementService.MoveTask:input_type -> com.netflix.titus.TaskMoveRequest
	27,  // 101: com.netflix.titus.JobManagementService.CreateJob:output_type -> com.netflix.titus.JobId
	88,  // 102: com.netflix.titus.JobManagementService.UpdateJobCapacity:output_type -> google.protobuf.Empty
	88,  // 103: com.netflix.titus.JobManagementService.UpdateJobCapacityWithOptionalAttributes:output_type -> google.protobuf.Empty
	88,  // 104: com.netflix.titus.JobManagementService.UpdateJobStatus:output_type -> google.protobuf.Empty
	88,  // 105: com.netflix.titus.JobManagementService.UpdateJobProcesses:output_type -> google.protobuf.Empty
	88,  // 106: com.netflix.titus.JobManagementService.UpdateJobDisruptionBudget:output_type -> google.protobuf.Empty
	30,  // 107: com.netflix.titus.JobManagementService.FindJobs:output_type -> com.netflix.titus.JobQueryResult
	23,  // 108: com.netflix.titus.JobManagementService.FindJob:output_type -> com.netflix.titus.Job
	24,  // 109: com.netflix.titus.JobManagementService.ObserveJob:output_type -> com.netflix.titus.JobChangeNotification
	24,  // 110: com.netflix.titus.JobManagementService.ObserveJobs:output_type -> com.netflix.titus.JobChangeNotification
	88,  // 111: com.netflix.titus.JobManagementService.KillJob:output_type -> google.protobuf.Empty
	88,  // 112: com.netflix.titus.JobManagementService.UpdateJobAttributes:output_type -> google.protobuf.Empty
	88,  // 113: com.netflix.titus.JobManagementService.DeleteJobAttributes:output_type -> google.protobuf.Empty
	22,  // 114: com.netflix.titus.JobManagementService.FindTask:output_type -> com.netflix.titus.Task
	42,  // 115: com.netflix.titus.JobManagementService.FindTasks:output_type -> com.netflix.titus.TaskQueryResult
	88,  // 116: com.netflix.titus.JobManagementService.KillTask:output_type -> google.protobuf.Empty
	88,  // 117: com.netflix.titus.JobManagementService.UpdateTaskAttributes:output_type -> google.protobuf.Empty
	88,  // 118: com.netflix.titus.JobManagementService.DeleteTaskAttributes:output_type -> google.protobuf.Empty
	88,  // 119: com.netflix.titus.JobManagementService.MoveTask:output_type -> google.protobuf.Empty
	101, // [101:120] is the sub-list for method output_type
	82,  // [82:101] is the sub-list for method input_type
	82,  // [82:82] is the sub-list for extension type_name
	82,  // [82:82] is the sub-list for extension extendee
	0,   // [0:82] is the sub-list for field type_name
}

func init() { file_netflix_titus_titus_job_api_proto_init() }
func file_netflix_titus_titus_job_api_proto_init() {
	if File_netflix_titus_titus_job_api_proto != nil {
		return
	}
	file_netflix_titus_titus_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_netflix_titus_titus_job_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Owner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobCapacityWithOptionalAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDisruptionBudget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchJobSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceJobSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobChangeNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDataRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDataRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserveJobsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobCapacityUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobCapacityUpdateWithOptionalAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatusUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobProcessesUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDisruptionBudgetUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobAttributesUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobAttributesDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskKillRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAttributesUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAttributesDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskMoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerResources_EfsMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDisruptionBudget_SelfManaged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDisruptionBudget_AvailabilityPercentageLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDisruptionBudget_UnhealthyTasksLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDisruptionBudget_RelocationLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDisruptionBudget_RateUnlimited); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDisruptionBudget_RatePercentagePerHour); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDisruptionBudget_RatePerInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDisruptionBudget_RatePercentagePerInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationPolicy_SystemDefault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrationPolicy_SelfManaged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceJobSpec_ServiceJobProcesses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLocation_UI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLocation_LiveStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLocation_S3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobChangeNotification_JobUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobChangeNotification_TaskUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_netflix_titus_titus_job_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobChangeNotification_SnapshotEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_netflix_titus_titus_job_api_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ContainerResources_Pool)(nil),
		(*ContainerResources_StaticIPAddressIDs)(nil),
	}
	file_netflix_titus_titus_job_api_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*JobDisruptionBudget_SelfManaged_)(nil),
		(*JobDisruptionBudget_AvailabilityPercentageLimit_)(nil),
		(*JobDisruptionBudget_UnhealthyTasksLimit_)(nil),
		(*JobDisruptionBudget_RelocationLimit_)(nil),
		(*JobDisruptionBudget_RateUnlimited_)(nil),
		(*JobDisruptionBudget_RatePercentagePerHour_)(nil),
		(*JobDisruptionBudget_RatePerInterval_)(nil),
		(*JobDisruptionBudget_RatePercentagePerInterval_)(nil),
	}
	file_netflix_titus_titus_job_api_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*MigrationPolicy_SystemDefault_)(nil),
		(*MigrationPolicy_SelfManaged_)(nil),
	}
	file_netflix_titus_titus_job_api_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*JobDescriptor_Batch)(nil),
		(*JobDescriptor_Service)(nil),
	}
	file_netflix_titus_titus_job_api_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*JobChangeNotification_JobUpdate_)(nil),
		(*JobChangeNotification_TaskUpdate_)(nil),
		(*JobChangeNotification_SnapshotEnd_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_netflix_titus_titus_job_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_netflix_titus_titus_job_api_proto_goTypes,
		DependencyIndexes: file_netflix_titus_titus_job_api_proto_depIdxs,
		EnumInfos:         file_netflix_titus_titus_job_api_proto_enumTypes,
		MessageInfos:      file_netflix_titus_titus_job_api_proto_msgTypes,
	}.Build()
	File_netflix_titus_titus_job_api_proto = out.File
	file_netflix_titus_titus_job_api_proto_rawDesc = nil
	file_netflix_titus_titus_job_api_proto_goTypes = nil
	file_netflix_titus_titus_job_api_proto_depIdxs = nil
}

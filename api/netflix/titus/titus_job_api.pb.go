// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netflix/titus/titus_job_api.proto

package titus

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

/// State information associated with a job.
type JobStatus_JobState int32

const (
	/// A job is persisted in Titus and is ready to be scheduled.
	JobStatus_Accepted JobStatus_JobState = 0
	/// A job still has running tasks that were requested to be terminated. No more tasks for this job are deployed.
	//  Job policy update operations are not allowed.
	JobStatus_KillInitiated JobStatus_JobState = 1
	/// A job has no running tasks, and new tasks cannot be created. Job policy update operations are not allowed.
	JobStatus_Finished JobStatus_JobState = 2
)

var JobStatus_JobState_name = map[int32]string{
	0: "Accepted",
	1: "KillInitiated",
	2: "Finished",
}

var JobStatus_JobState_value = map[string]int32{
	"Accepted":      0,
	"KillInitiated": 1,
	"Finished":      2,
}

func (x JobStatus_JobState) String() string {
	return proto.EnumName(JobStatus_JobState_name, int32(x))
}

func (JobStatus_JobState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{15, 0}
}

/// State information associated with a task.
type TaskStatus_TaskState int32

const (
	/// A task was passed to the scheduler but has no resources allocated yet.
	TaskStatus_Accepted TaskStatus_TaskState = 0
	/// A task had resources allocated and was passed to Mesos.
	TaskStatus_Launched TaskStatus_TaskState = 1
	/// An executor provisioned resources for a task.
	TaskStatus_StartInitiated TaskStatus_TaskState = 2
	/// The container was started.
	TaskStatus_Started TaskStatus_TaskState = 3
	/// A user requested the task to be terminated. An executor is stopping the task and releasing its allocated resources.
	TaskStatus_KillInitiated TaskStatus_TaskState = 4
	/// No connectivity between Mesos and an agent running a task. The task's state cannot be determined until the connection
	//  is established again.
	TaskStatus_Disconnected TaskStatus_TaskState = 5
	/// A task completed or was forced by a user to be terminated. All resources previously assigned to this task are released.
	TaskStatus_Finished TaskStatus_TaskState = 6
)

var TaskStatus_TaskState_name = map[int32]string{
	0: "Accepted",
	1: "Launched",
	2: "StartInitiated",
	3: "Started",
	4: "KillInitiated",
	5: "Disconnected",
	6: "Finished",
}

var TaskStatus_TaskState_value = map[string]int32{
	"Accepted":       0,
	"Launched":       1,
	"StartInitiated": 2,
	"Started":        3,
	"KillInitiated":  4,
	"Disconnected":   5,
	"Finished":       6,
}

func (x TaskStatus_TaskState) String() string {
	return proto.EnumName(TaskStatus_TaskState_name, int32(x))
}

func (TaskStatus_TaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{16, 0}
}

/// An owner of a job.
type Owner struct {
	/// (Required) An owner's email address.
	TeamEmail            string   `protobuf:"bytes,1,opt,name=teamEmail,proto3" json:"teamEmail,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Owner) Reset()         { *m = Owner{} }
func (m *Owner) String() string { return proto.CompactTextString(m) }
func (*Owner) ProtoMessage()    {}
func (*Owner) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{0}
}

func (m *Owner) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Owner.Unmarshal(m, b)
}
func (m *Owner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Owner.Marshal(b, m, deterministic)
}
func (m *Owner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Owner.Merge(m, src)
}
func (m *Owner) XXX_Size() int {
	return xxx_messageInfo_Owner.Size(m)
}
func (m *Owner) XXX_DiscardUnknown() {
	xxx_messageInfo_Owner.DiscardUnknown(m)
}

var xxx_messageInfo_Owner proto.InternalMessageInfo

func (m *Owner) GetTeamEmail() string {
	if m != nil {
		return m.TeamEmail
	}
	return ""
}

/// Additional information for building a supplementary job identifier, as the 'applicationName' can be shared by
// many jobs running at the same time in Titus. By setting 'JobGroupInfo', a user may create a job id that is guaranteed
// to be unique accross all currently running Titus jobs. The uniquness is checked if any of the attributes
// in this record is a non empty string. The full name is built as: '<application_name>-<stack>-<detail>-<sequence>.
type JobGroupInfo struct {
	/// (Optional) Any text. It is recommended (but not required), that the value does not include the '-' character.
	Stack string `protobuf:"bytes,1,opt,name=stack,proto3" json:"stack,omitempty"`
	/// (Optional) Any text. It is recommended (but not required), that the value does not include the '-' character.
	Detail string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	/// (Optional) Any text. It is recommended (but not required), that the value does not include the '-' character.
	Sequence             string   `protobuf:"bytes,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobGroupInfo) Reset()         { *m = JobGroupInfo{} }
func (m *JobGroupInfo) String() string { return proto.CompactTextString(m) }
func (*JobGroupInfo) ProtoMessage()    {}
func (*JobGroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{1}
}

func (m *JobGroupInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobGroupInfo.Unmarshal(m, b)
}
func (m *JobGroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobGroupInfo.Marshal(b, m, deterministic)
}
func (m *JobGroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobGroupInfo.Merge(m, src)
}
func (m *JobGroupInfo) XXX_Size() int {
	return xxx_messageInfo_JobGroupInfo.Size(m)
}
func (m *JobGroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_JobGroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_JobGroupInfo proto.InternalMessageInfo

func (m *JobGroupInfo) GetStack() string {
	if m != nil {
		return m.Stack
	}
	return ""
}

func (m *JobGroupInfo) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func (m *JobGroupInfo) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

/// Task placement constraints. Currently supported constraint types are:
// * zoneBalance - distributes tasks of a job evenly among the availability zones
// * uniqueHost - runs each task of a job on a different agent
// * exclusiveHost - ensures that an agent is exclusively assigned to a given job
type Constraints struct {
	/// (Optional) A map of constraint name/values. If multiple constraints are given, all must be met (logical 'and').
	Constraints map[string]string `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// Not supported yet.
	// (Optional) An expression combining multiple constraints. For example 'zoneBalance AND serverGroup == "mySG"'.
	// Avalilable operators: <, <=, ==, >, >=, in, like, AND, OR
	Expression           string   `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Constraints) Reset()         { *m = Constraints{} }
func (m *Constraints) String() string { return proto.CompactTextString(m) }
func (*Constraints) ProtoMessage()    {}
func (*Constraints) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{2}
}

func (m *Constraints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Constraints.Unmarshal(m, b)
}
func (m *Constraints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Constraints.Marshal(b, m, deterministic)
}
func (m *Constraints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Constraints.Merge(m, src)
}
func (m *Constraints) XXX_Size() int {
	return xxx_messageInfo_Constraints.Size(m)
}
func (m *Constraints) XXX_DiscardUnknown() {
	xxx_messageInfo_Constraints.DiscardUnknown(m)
}

var xxx_messageInfo_Constraints proto.InternalMessageInfo

func (m *Constraints) GetConstraints() map[string]string {
	if m != nil {
		return m.Constraints
	}
	return nil
}

func (m *Constraints) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

/// To reference an image, a user has to provide an image name and a version. A user may specify a version either with
// a tag value (for example 'latest') or a digest. When submitting a job, a user should provide either a tag or a digest value
// only (not both of them).
//
// For example, docker images can be referenced by {name=titus-examples, tag=latest}.
// A user could also choose to provide only the digest without a tag. In this case, the tag value would be empty.
type Image struct {
	/// (Required) Image name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	/// (Required if digest not set) Image tag.
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	/// (Required if tag not set) Image digest.
	Digest               string   `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{3}
}

func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (m *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(m, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Image) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Image) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

type ContainerResources struct {
	/// (Required) Number of CPUs to allocate (must be always > 0, but the actual limit is configurable).
	Cpu float64 `protobuf:"fixed64,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	/// (Optional) Number of GPUs to allocate.
	Gpu uint32 `protobuf:"varint,2,opt,name=gpu,proto3" json:"gpu,omitempty"`
	/// (Required) Amount of memory to allocate (must be always > 0, but the actual limit is configurable).
	MemoryMB uint32 `protobuf:"varint,3,opt,name=memoryMB,proto3" json:"memoryMB,omitempty"`
	/// (Required) Amount of disk space to allocate (must be always > 0, but the actual limit is configurable).
	DiskMB uint32 `protobuf:"varint,4,opt,name=diskMB,proto3" json:"diskMB,omitempty"`
	/// (Required) Amount of network bandwidth to allocate (must be always > 0, but the actual limit is configurable).
	NetworkMbps uint32 `protobuf:"varint,5,opt,name=networkMbps,proto3" json:"networkMbps,omitempty"`
	/// (Deprecated) IP always allocated.
	AllocateIP bool `protobuf:"varint,6,opt,name=allocateIP,proto3" json:"allocateIP,omitempty"`
	/// (Optional) EFS mounts.
	EfsMounts []*ContainerResources_EfsMount `protobuf:"bytes,7,rep,name=efsMounts,proto3" json:"efsMounts,omitempty"`
	/// (Optional) Size of shared memory /dev/shm. If not set, a default value will be provided. A provided value
	// must be less than or equal to amount of memory allocated.
	ShmSizeMB uint32 `protobuf:"varint,8,opt,name=shmSizeMB,proto3" json:"shmSizeMB,omitempty"`
	/// (Optional) IP addresses allocated from Titus VPC IP service to be assigned to tasks.
	SignedAddressAllocations []*SignedAddressAllocation `protobuf:"bytes,9,rep,name=signedAddressAllocations,proto3" json:"signedAddressAllocations,omitempty"`
	/// (Optional) IP addresses allocated from Titus VPC IP service to be assigned to tasks via AllocateAddressRequestV2.
	/// Mutually exclusive with signedAddressAllocations
	//
	// Types that are valid to be assigned to StaticIPAddresses:
	//	*ContainerResources_Pool
	//	*ContainerResources_StaticIPAddressIDs
	StaticIPAddresses    isContainerResources_StaticIPAddresses `protobuf_oneof:"staticIPAddresses"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *ContainerResources) Reset()         { *m = ContainerResources{} }
func (m *ContainerResources) String() string { return proto.CompactTextString(m) }
func (*ContainerResources) ProtoMessage()    {}
func (*ContainerResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{4}
}

func (m *ContainerResources) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerResources.Unmarshal(m, b)
}
func (m *ContainerResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerResources.Marshal(b, m, deterministic)
}
func (m *ContainerResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerResources.Merge(m, src)
}
func (m *ContainerResources) XXX_Size() int {
	return xxx_messageInfo_ContainerResources.Size(m)
}
func (m *ContainerResources) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerResources.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerResources proto.InternalMessageInfo

func (m *ContainerResources) GetCpu() float64 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *ContainerResources) GetGpu() uint32 {
	if m != nil {
		return m.Gpu
	}
	return 0
}

func (m *ContainerResources) GetMemoryMB() uint32 {
	if m != nil {
		return m.MemoryMB
	}
	return 0
}

func (m *ContainerResources) GetDiskMB() uint32 {
	if m != nil {
		return m.DiskMB
	}
	return 0
}

func (m *ContainerResources) GetNetworkMbps() uint32 {
	if m != nil {
		return m.NetworkMbps
	}
	return 0
}

func (m *ContainerResources) GetAllocateIP() bool {
	if m != nil {
		return m.AllocateIP
	}
	return false
}

func (m *ContainerResources) GetEfsMounts() []*ContainerResources_EfsMount {
	if m != nil {
		return m.EfsMounts
	}
	return nil
}

func (m *ContainerResources) GetShmSizeMB() uint32 {
	if m != nil {
		return m.ShmSizeMB
	}
	return 0
}

func (m *ContainerResources) GetSignedAddressAllocations() []*SignedAddressAllocation {
	if m != nil {
		return m.SignedAddressAllocations
	}
	return nil
}

type isContainerResources_StaticIPAddresses interface {
	isContainerResources_StaticIPAddresses()
}

type ContainerResources_Pool struct {
	Pool string `protobuf:"bytes,10,opt,name=pool,proto3,oneof"`
}

type ContainerResources_StaticIPAddressIDs struct {
	StaticIPAddressIDs *StaticIPAddressIDs `protobuf:"bytes,11,opt,name=staticIPAddressIDs,proto3,oneof"`
}

func (*ContainerResources_Pool) isContainerResources_StaticIPAddresses() {}

func (*ContainerResources_StaticIPAddressIDs) isContainerResources_StaticIPAddresses() {}

func (m *ContainerResources) GetStaticIPAddresses() isContainerResources_StaticIPAddresses {
	if m != nil {
		return m.StaticIPAddresses
	}
	return nil
}

func (m *ContainerResources) GetPool() string {
	if x, ok := m.GetStaticIPAddresses().(*ContainerResources_Pool); ok {
		return x.Pool
	}
	return ""
}

func (m *ContainerResources) GetStaticIPAddressIDs() *StaticIPAddressIDs {
	if x, ok := m.GetStaticIPAddresses().(*ContainerResources_StaticIPAddressIDs); ok {
		return x.StaticIPAddressIDs
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ContainerResources) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ContainerResources_Pool)(nil),
		(*ContainerResources_StaticIPAddressIDs)(nil),
	}
}

type ContainerResources_EfsMount struct {
	/// (Required) EFS id
	EfsId string `protobuf:"bytes,1,opt,name=efsId,proto3" json:"efsId,omitempty"`
	/// (Required) EFS mount point
	MountPoint string `protobuf:"bytes,2,opt,name=mountPoint,proto3" json:"mountPoint,omitempty"`
	/// (Required) EFS mount permission mask
	MountPerm MountPerm `protobuf:"varint,3,opt,name=mountPerm,proto3,enum=com.netflix.titus.MountPerm" json:"mountPerm,omitempty"`
	/// (Optional) EFS relative mount point
	EfsRelativeMountPoint string   `protobuf:"bytes,4,opt,name=efsRelativeMountPoint,proto3" json:"efsRelativeMountPoint,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ContainerResources_EfsMount) Reset()         { *m = ContainerResources_EfsMount{} }
func (m *ContainerResources_EfsMount) String() string { return proto.CompactTextString(m) }
func (*ContainerResources_EfsMount) ProtoMessage()    {}
func (*ContainerResources_EfsMount) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{4, 0}
}

func (m *ContainerResources_EfsMount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerResources_EfsMount.Unmarshal(m, b)
}
func (m *ContainerResources_EfsMount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerResources_EfsMount.Marshal(b, m, deterministic)
}
func (m *ContainerResources_EfsMount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerResources_EfsMount.Merge(m, src)
}
func (m *ContainerResources_EfsMount) XXX_Size() int {
	return xxx_messageInfo_ContainerResources_EfsMount.Size(m)
}
func (m *ContainerResources_EfsMount) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerResources_EfsMount.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerResources_EfsMount proto.InternalMessageInfo

func (m *ContainerResources_EfsMount) GetEfsId() string {
	if m != nil {
		return m.EfsId
	}
	return ""
}

func (m *ContainerResources_EfsMount) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *ContainerResources_EfsMount) GetMountPerm() MountPerm {
	if m != nil {
		return m.MountPerm
	}
	return MountPerm_RO
}

func (m *ContainerResources_EfsMount) GetEfsRelativeMountPoint() string {
	if m != nil {
		return m.EfsRelativeMountPoint
	}
	return ""
}

/// Container security profile.
type SecurityProfile struct {
	/// (Required) Security groups associated with a container. The expected number of security groups is between 1 and 6.
	SecurityGroups []string `protobuf:"bytes,1,rep,name=securityGroups,proto3" json:"securityGroups,omitempty"`
	/// (Required) IAM role.
	IamRole string `protobuf:"bytes,2,opt,name=iamRole,proto3" json:"iamRole,omitempty"`
	/// (Optional) Additional security attributes. Key names starting with 'titus.' are reserved by Titus.
	Attributes           map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SecurityProfile) Reset()         { *m = SecurityProfile{} }
func (m *SecurityProfile) String() string { return proto.CompactTextString(m) }
func (*SecurityProfile) ProtoMessage()    {}
func (*SecurityProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{5}
}

func (m *SecurityProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityProfile.Unmarshal(m, b)
}
func (m *SecurityProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityProfile.Marshal(b, m, deterministic)
}
func (m *SecurityProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityProfile.Merge(m, src)
}
func (m *SecurityProfile) XXX_Size() int {
	return xxx_messageInfo_SecurityProfile.Size(m)
}
func (m *SecurityProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityProfile.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityProfile proto.InternalMessageInfo

func (m *SecurityProfile) GetSecurityGroups() []string {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *SecurityProfile) GetIamRole() string {
	if m != nil {
		return m.IamRole
	}
	return ""
}

func (m *SecurityProfile) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

/// Container descriptor.
type Container struct {
	/// (Required) Container resources.
	Resources *ContainerResources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	/// (Required) Container security profile: IAM role, security groups, container roles.
	SecurityProfile *SecurityProfile `protobuf:"bytes,2,opt,name=securityProfile,proto3" json:"securityProfile,omitempty"`
	/// (Required) Image reference.
	Image *Image `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	/// (Optional) Arbitrary set of key/value pairs. Key names starting with 'titus.' are reserved by Titus.
	Attributes map[string]string `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// (Optional) Override the entry point of the image.
	// If set, the command baked into the image (if any) is always ignored. Interactions between the entry point and
	// command are the same as specified by Docker:
	// https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact
	//
	//  To clear (unset) the entry point of the image, pass a single empty string value: [""]
	EntryPoint []string `protobuf:"bytes,5,rep,name=entryPoint,proto3" json:"entryPoint,omitempty"`
	/// (Optional) Additional parameters for the entry point defined either here or provided in the container image.
	// To clear (unset) the command of the image, pass a single empty string value: [""]
	Command []string `protobuf:"bytes,6,rep,name=command,proto3" json:"command,omitempty"`
	/// (Optional) A collection of system environment variables passed to the container.
	Env map[string]string `protobuf:"bytes,7,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// (Optional) Constraints that Titus will prefer to fulfill but are not required.
	SoftConstraints *Constraints `protobuf:"bytes,8,opt,name=softConstraints,proto3" json:"softConstraints,omitempty"`
	/// (Optional) Constraints that have to be met for a task to be scheduled on an agent.
	HardConstraints *Constraints `protobuf:"bytes,9,opt,name=hardConstraints,proto3" json:"hardConstraints,omitempty"`
	/// (Optional) Experimental features
	Experimental         *any.Any `protobuf:"bytes,10,opt,name=experimental,proto3" json:"experimental,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Container) Reset()         { *m = Container{} }
func (m *Container) String() string { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()    {}
func (*Container) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{6}
}

func (m *Container) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Container.Unmarshal(m, b)
}
func (m *Container) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Container.Marshal(b, m, deterministic)
}
func (m *Container) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Container.Merge(m, src)
}
func (m *Container) XXX_Size() int {
	return xxx_messageInfo_Container.Size(m)
}
func (m *Container) XXX_DiscardUnknown() {
	xxx_messageInfo_Container.DiscardUnknown(m)
}

var xxx_messageInfo_Container proto.InternalMessageInfo

func (m *Container) GetResources() *ContainerResources {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Container) GetSecurityProfile() *SecurityProfile {
	if m != nil {
		return m.SecurityProfile
	}
	return nil
}

func (m *Container) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Container) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Container) GetEntryPoint() []string {
	if m != nil {
		return m.EntryPoint
	}
	return nil
}

func (m *Container) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Container) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Container) GetSoftConstraints() *Constraints {
	if m != nil {
		return m.SoftConstraints
	}
	return nil
}

func (m *Container) GetHardConstraints() *Constraints {
	if m != nil {
		return m.HardConstraints
	}
	return nil
}

func (m *Container) GetExperimental() *any.Any {
	if m != nil {
		return m.Experimental
	}
	return nil
}

/// This data structure is associated with a service job and specifies the number of tasks to run (desired).
// At any point in time, the condition min <= desired <= max must hold true. The desired state may be changed by a user,
// but also may be changed as a result of an auto-scaling action.
type Capacity struct {
	/// (Required) Minimum number of tasks to run (min >= 0)
	Min uint32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	/// (Required) Maximum number of tasks that can be run (max >= desired)
	Max uint32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	// (Required) Desired number of tasks to run (min <= desired <= max)
	Desired              uint32   `protobuf:"varint,3,opt,name=desired,proto3" json:"desired,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Capacity) Reset()         { *m = Capacity{} }
func (m *Capacity) String() string { return proto.CompactTextString(m) }
func (*Capacity) ProtoMessage()    {}
func (*Capacity) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{7}
}

func (m *Capacity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Capacity.Unmarshal(m, b)
}
func (m *Capacity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Capacity.Marshal(b, m, deterministic)
}
func (m *Capacity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Capacity.Merge(m, src)
}
func (m *Capacity) XXX_Size() int {
	return xxx_messageInfo_Capacity.Size(m)
}
func (m *Capacity) XXX_DiscardUnknown() {
	xxx_messageInfo_Capacity.DiscardUnknown(m)
}

var xxx_messageInfo_Capacity proto.InternalMessageInfo

func (m *Capacity) GetMin() uint32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Capacity) GetMax() uint32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *Capacity) GetDesired() uint32 {
	if m != nil {
		return m.Desired
	}
	return 0
}

type JobCapacityWithOptionalAttributes struct {
	// (Optional) Minimum number of tasks to run (min >= 0)
	Min *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	// (Optional) Maximum number of tasks that can be run (max >= desired)
	Max *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	// (Optional) Desired number of tasks to run (min <= desired <= max)
	Desired              *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=desired,proto3" json:"desired,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *JobCapacityWithOptionalAttributes) Reset()         { *m = JobCapacityWithOptionalAttributes{} }
func (m *JobCapacityWithOptionalAttributes) String() string { return proto.CompactTextString(m) }
func (*JobCapacityWithOptionalAttributes) ProtoMessage()    {}
func (*JobCapacityWithOptionalAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{8}
}

func (m *JobCapacityWithOptionalAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobCapacityWithOptionalAttributes.Unmarshal(m, b)
}
func (m *JobCapacityWithOptionalAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobCapacityWithOptionalAttributes.Marshal(b, m, deterministic)
}
func (m *JobCapacityWithOptionalAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobCapacityWithOptionalAttributes.Merge(m, src)
}
func (m *JobCapacityWithOptionalAttributes) XXX_Size() int {
	return xxx_messageInfo_JobCapacityWithOptionalAttributes.Size(m)
}
func (m *JobCapacityWithOptionalAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_JobCapacityWithOptionalAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_JobCapacityWithOptionalAttributes proto.InternalMessageInfo

func (m *JobCapacityWithOptionalAttributes) GetMin() *wrappers.UInt32Value {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *JobCapacityWithOptionalAttributes) GetMax() *wrappers.UInt32Value {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *JobCapacityWithOptionalAttributes) GetDesired() *wrappers.UInt32Value {
	if m != nil {
		return m.Desired
	}
	return nil
}

/// Job disruption budget, associated (optionally) with a job.
type JobDisruptionBudget struct {
	// Types that are valid to be assigned to Policy:
	//	*JobDisruptionBudget_SelfManaged_
	//	*JobDisruptionBudget_AvailabilityPercentageLimit_
	//	*JobDisruptionBudget_UnhealthyTasksLimit_
	//	*JobDisruptionBudget_RelocationLimit_
	Policy isJobDisruptionBudget_Policy `protobuf_oneof:"Policy"`
	// Types that are valid to be assigned to Rate:
	//	*JobDisruptionBudget_RateUnlimited_
	//	*JobDisruptionBudget_RatePercentagePerHour_
	//	*JobDisruptionBudget_RatePerInterval_
	//	*JobDisruptionBudget_RatePercentagePerInterval_
	Rate isJobDisruptionBudget_Rate `protobuf_oneof:"Rate"`
	/// (Optional) Time window to which relocation process is restricted.
	TimeWindows []*TimeWindow `protobuf:"bytes,7,rep,name=timeWindows,proto3" json:"timeWindows,omitempty"`
	/// (Optional) Container health providers to use when relocating a container.
	ContainerHealthProviders []*ContainerHealthProvider `protobuf:"bytes,8,rep,name=containerHealthProviders,proto3" json:"containerHealthProviders,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                   `json:"-"`
	XXX_unrecognized         []byte                     `json:"-"`
	XXX_sizecache            int32                      `json:"-"`
}

func (m *JobDisruptionBudget) Reset()         { *m = JobDisruptionBudget{} }
func (m *JobDisruptionBudget) String() string { return proto.CompactTextString(m) }
func (*JobDisruptionBudget) ProtoMessage()    {}
func (*JobDisruptionBudget) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{9}
}

func (m *JobDisruptionBudget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobDisruptionBudget.Unmarshal(m, b)
}
func (m *JobDisruptionBudget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobDisruptionBudget.Marshal(b, m, deterministic)
}
func (m *JobDisruptionBudget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDisruptionBudget.Merge(m, src)
}
func (m *JobDisruptionBudget) XXX_Size() int {
	return xxx_messageInfo_JobDisruptionBudget.Size(m)
}
func (m *JobDisruptionBudget) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDisruptionBudget.DiscardUnknown(m)
}

var xxx_messageInfo_JobDisruptionBudget proto.InternalMessageInfo

type isJobDisruptionBudget_Policy interface {
	isJobDisruptionBudget_Policy()
}

type JobDisruptionBudget_SelfManaged_ struct {
	SelfManaged *JobDisruptionBudget_SelfManaged `protobuf:"bytes,1,opt,name=selfManaged,proto3,oneof"`
}

type JobDisruptionBudget_AvailabilityPercentageLimit_ struct {
	AvailabilityPercentageLimit *JobDisruptionBudget_AvailabilityPercentageLimit `protobuf:"bytes,2,opt,name=availabilityPercentageLimit,proto3,oneof"`
}

type JobDisruptionBudget_UnhealthyTasksLimit_ struct {
	UnhealthyTasksLimit *JobDisruptionBudget_UnhealthyTasksLimit `protobuf:"bytes,3,opt,name=unhealthyTasksLimit,proto3,oneof"`
}

type JobDisruptionBudget_RelocationLimit_ struct {
	RelocationLimit *JobDisruptionBudget_RelocationLimit `protobuf:"bytes,4,opt,name=relocationLimit,proto3,oneof"`
}

func (*JobDisruptionBudget_SelfManaged_) isJobDisruptionBudget_Policy() {}

func (*JobDisruptionBudget_AvailabilityPercentageLimit_) isJobDisruptionBudget_Policy() {}

func (*JobDisruptionBudget_UnhealthyTasksLimit_) isJobDisruptionBudget_Policy() {}

func (*JobDisruptionBudget_RelocationLimit_) isJobDisruptionBudget_Policy() {}

func (m *JobDisruptionBudget) GetPolicy() isJobDisruptionBudget_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *JobDisruptionBudget) GetSelfManaged() *JobDisruptionBudget_SelfManaged {
	if x, ok := m.GetPolicy().(*JobDisruptionBudget_SelfManaged_); ok {
		return x.SelfManaged
	}
	return nil
}

func (m *JobDisruptionBudget) GetAvailabilityPercentageLimit() *JobDisruptionBudget_AvailabilityPercentageLimit {
	if x, ok := m.GetPolicy().(*JobDisruptionBudget_AvailabilityPercentageLimit_); ok {
		return x.AvailabilityPercentageLimit
	}
	return nil
}

func (m *JobDisruptionBudget) GetUnhealthyTasksLimit() *JobDisruptionBudget_UnhealthyTasksLimit {
	if x, ok := m.GetPolicy().(*JobDisruptionBudget_UnhealthyTasksLimit_); ok {
		return x.UnhealthyTasksLimit
	}
	return nil
}

func (m *JobDisruptionBudget) GetRelocationLimit() *JobDisruptionBudget_RelocationLimit {
	if x, ok := m.GetPolicy().(*JobDisruptionBudget_RelocationLimit_); ok {
		return x.RelocationLimit
	}
	return nil
}

type isJobDisruptionBudget_Rate interface {
	isJobDisruptionBudget_Rate()
}

type JobDisruptionBudget_RateUnlimited_ struct {
	RateUnlimited *JobDisruptionBudget_RateUnlimited `protobuf:"bytes,5,opt,name=rateUnlimited,proto3,oneof"`
}

type JobDisruptionBudget_RatePercentagePerHour_ struct {
	RatePercentagePerHour *JobDisruptionBudget_RatePercentagePerHour `protobuf:"bytes,6,opt,name=ratePercentagePerHour,proto3,oneof"`
}

type JobDisruptionBudget_RatePerInterval_ struct {
	RatePerInterval *JobDisruptionBudget_RatePerInterval `protobuf:"bytes,9,opt,name=ratePerInterval,proto3,oneof"`
}

type JobDisruptionBudget_RatePercentagePerInterval_ struct {
	RatePercentagePerInterval *JobDisruptionBudget_RatePercentagePerInterval `protobuf:"bytes,10,opt,name=ratePercentagePerInterval,proto3,oneof"`
}

func (*JobDisruptionBudget_RateUnlimited_) isJobDisruptionBudget_Rate() {}

func (*JobDisruptionBudget_RatePercentagePerHour_) isJobDisruptionBudget_Rate() {}

func (*JobDisruptionBudget_RatePerInterval_) isJobDisruptionBudget_Rate() {}

func (*JobDisruptionBudget_RatePercentagePerInterval_) isJobDisruptionBudget_Rate() {}

func (m *JobDisruptionBudget) GetRate() isJobDisruptionBudget_Rate {
	if m != nil {
		return m.Rate
	}
	return nil
}

func (m *JobDisruptionBudget) GetRateUnlimited() *JobDisruptionBudget_RateUnlimited {
	if x, ok := m.GetRate().(*JobDisruptionBudget_RateUnlimited_); ok {
		return x.RateUnlimited
	}
	return nil
}

func (m *JobDisruptionBudget) GetRatePercentagePerHour() *JobDisruptionBudget_RatePercentagePerHour {
	if x, ok := m.GetRate().(*JobDisruptionBudget_RatePercentagePerHour_); ok {
		return x.RatePercentagePerHour
	}
	return nil
}

func (m *JobDisruptionBudget) GetRatePerInterval() *JobDisruptionBudget_RatePerInterval {
	if x, ok := m.GetRate().(*JobDisruptionBudget_RatePerInterval_); ok {
		return x.RatePerInterval
	}
	return nil
}

func (m *JobDisruptionBudget) GetRatePercentagePerInterval() *JobDisruptionBudget_RatePercentagePerInterval {
	if x, ok := m.GetRate().(*JobDisruptionBudget_RatePercentagePerInterval_); ok {
		return x.RatePercentagePerInterval
	}
	return nil
}

func (m *JobDisruptionBudget) GetTimeWindows() []*TimeWindow {
	if m != nil {
		return m.TimeWindows
	}
	return nil
}

func (m *JobDisruptionBudget) GetContainerHealthProviders() []*ContainerHealthProvider {
	if m != nil {
		return m.ContainerHealthProviders
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JobDisruptionBudget) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JobDisruptionBudget_SelfManaged_)(nil),
		(*JobDisruptionBudget_AvailabilityPercentageLimit_)(nil),
		(*JobDisruptionBudget_UnhealthyTasksLimit_)(nil),
		(*JobDisruptionBudget_RelocationLimit_)(nil),
		(*JobDisruptionBudget_RateUnlimited_)(nil),
		(*JobDisruptionBudget_RatePercentagePerHour_)(nil),
		(*JobDisruptionBudget_RatePerInterval_)(nil),
		(*JobDisruptionBudget_RatePercentagePerInterval_)(nil),
	}
}

/// Self managed task relocation policy for users that would like to orchestrate custom termination logic.
//  If the containers are not terminated within the confgured amount of time, the system default migration
//  policy is assumed instead.
type JobDisruptionBudget_SelfManaged struct {
	/// Amount of time a container owner has to migrate their containers. A maximum will be enforced by the system.
	RelocationTimeMs     uint64   `protobuf:"varint,1,opt,name=relocationTimeMs,proto3" json:"relocationTimeMs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobDisruptionBudget_SelfManaged) Reset()         { *m = JobDisruptionBudget_SelfManaged{} }
func (m *JobDisruptionBudget_SelfManaged) String() string { return proto.CompactTextString(m) }
func (*JobDisruptionBudget_SelfManaged) ProtoMessage()    {}
func (*JobDisruptionBudget_SelfManaged) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{9, 0}
}

func (m *JobDisruptionBudget_SelfManaged) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobDisruptionBudget_SelfManaged.Unmarshal(m, b)
}
func (m *JobDisruptionBudget_SelfManaged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobDisruptionBudget_SelfManaged.Marshal(b, m, deterministic)
}
func (m *JobDisruptionBudget_SelfManaged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDisruptionBudget_SelfManaged.Merge(m, src)
}
func (m *JobDisruptionBudget_SelfManaged) XXX_Size() int {
	return xxx_messageInfo_JobDisruptionBudget_SelfManaged.Size(m)
}
func (m *JobDisruptionBudget_SelfManaged) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDisruptionBudget_SelfManaged.DiscardUnknown(m)
}

var xxx_messageInfo_JobDisruptionBudget_SelfManaged proto.InternalMessageInfo

func (m *JobDisruptionBudget_SelfManaged) GetRelocationTimeMs() uint64 {
	if m != nil {
		return m.RelocationTimeMs
	}
	return 0
}

/// The minimum required percentage of tasks in a healthy state. Tasks will not be terminated by the eviction service
//  if this limit would be violated.
type JobDisruptionBudget_AvailabilityPercentageLimit struct {
	PercentageOfHealthyContainers float64  `protobuf:"fixed64,1,opt,name=percentageOfHealthyContainers,proto3" json:"percentageOfHealthyContainers,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *JobDisruptionBudget_AvailabilityPercentageLimit) Reset() {
	*m = JobDisruptionBudget_AvailabilityPercentageLimit{}
}
func (m *JobDisruptionBudget_AvailabilityPercentageLimit) String() string {
	return proto.CompactTextString(m)
}
func (*JobDisruptionBudget_AvailabilityPercentageLimit) ProtoMessage() {}
func (*JobDisruptionBudget_AvailabilityPercentageLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{9, 1}
}

func (m *JobDisruptionBudget_AvailabilityPercentageLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobDisruptionBudget_AvailabilityPercentageLimit.Unmarshal(m, b)
}
func (m *JobDisruptionBudget_AvailabilityPercentageLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobDisruptionBudget_AvailabilityPercentageLimit.Marshal(b, m, deterministic)
}
func (m *JobDisruptionBudget_AvailabilityPercentageLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDisruptionBudget_AvailabilityPercentageLimit.Merge(m, src)
}
func (m *JobDisruptionBudget_AvailabilityPercentageLimit) XXX_Size() int {
	return xxx_messageInfo_JobDisruptionBudget_AvailabilityPercentageLimit.Size(m)
}
func (m *JobDisruptionBudget_AvailabilityPercentageLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDisruptionBudget_AvailabilityPercentageLimit.DiscardUnknown(m)
}

var xxx_messageInfo_JobDisruptionBudget_AvailabilityPercentageLimit proto.InternalMessageInfo

func (m *JobDisruptionBudget_AvailabilityPercentageLimit) GetPercentageOfHealthyContainers() float64 {
	if m != nil {
		return m.PercentageOfHealthyContainers
	}
	return 0
}

/// The maximum required amount of tasks in an unhealthy state. Tasks will not be terminated by the eviction service
//  if this limit would be violated.
type JobDisruptionBudget_UnhealthyTasksLimit struct {
	LimitOfUnhealthyContainers uint32   `protobuf:"varint,1,opt,name=limitOfUnhealthyContainers,proto3" json:"limitOfUnhealthyContainers,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *JobDisruptionBudget_UnhealthyTasksLimit) Reset() {
	*m = JobDisruptionBudget_UnhealthyTasksLimit{}
}
func (m *JobDisruptionBudget_UnhealthyTasksLimit) String() string { return proto.CompactTextString(m) }
func (*JobDisruptionBudget_UnhealthyTasksLimit) ProtoMessage()    {}
func (*JobDisruptionBudget_UnhealthyTasksLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{9, 2}
}

func (m *JobDisruptionBudget_UnhealthyTasksLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobDisruptionBudget_UnhealthyTasksLimit.Unmarshal(m, b)
}
func (m *JobDisruptionBudget_UnhealthyTasksLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobDisruptionBudget_UnhealthyTasksLimit.Marshal(b, m, deterministic)
}
func (m *JobDisruptionBudget_UnhealthyTasksLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDisruptionBudget_UnhealthyTasksLimit.Merge(m, src)
}
func (m *JobDisruptionBudget_UnhealthyTasksLimit) XXX_Size() int {
	return xxx_messageInfo_JobDisruptionBudget_UnhealthyTasksLimit.Size(m)
}
func (m *JobDisruptionBudget_UnhealthyTasksLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDisruptionBudget_UnhealthyTasksLimit.DiscardUnknown(m)
}

var xxx_messageInfo_JobDisruptionBudget_UnhealthyTasksLimit proto.InternalMessageInfo

func (m *JobDisruptionBudget_UnhealthyTasksLimit) GetLimitOfUnhealthyContainers() uint32 {
	if m != nil {
		return m.LimitOfUnhealthyContainers
	}
	return 0
}

/// Maximum number of times a task can be relocated (only batch tasks, which have a maximum execution time).
type JobDisruptionBudget_RelocationLimit struct {
	Limit                uint32   `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobDisruptionBudget_RelocationLimit) Reset()         { *m = JobDisruptionBudget_RelocationLimit{} }
func (m *JobDisruptionBudget_RelocationLimit) String() string { return proto.CompactTextString(m) }
func (*JobDisruptionBudget_RelocationLimit) ProtoMessage()    {}
func (*JobDisruptionBudget_RelocationLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{9, 3}
}

func (m *JobDisruptionBudget_RelocationLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobDisruptionBudget_RelocationLimit.Unmarshal(m, b)
}
func (m *JobDisruptionBudget_RelocationLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobDisruptionBudget_RelocationLimit.Marshal(b, m, deterministic)
}
func (m *JobDisruptionBudget_RelocationLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDisruptionBudget_RelocationLimit.Merge(m, src)
}
func (m *JobDisruptionBudget_RelocationLimit) XXX_Size() int {
	return xxx_messageInfo_JobDisruptionBudget_RelocationLimit.Size(m)
}
func (m *JobDisruptionBudget_RelocationLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDisruptionBudget_RelocationLimit.DiscardUnknown(m)
}

var xxx_messageInfo_JobDisruptionBudget_RelocationLimit proto.InternalMessageInfo

func (m *JobDisruptionBudget_RelocationLimit) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

/// No limits on how many containers in a job may be relocated, provided the other disruption budget constraints are not violated.
type JobDisruptionBudget_RateUnlimited struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobDisruptionBudget_RateUnlimited) Reset()         { *m = JobDisruptionBudget_RateUnlimited{} }
func (m *JobDisruptionBudget_RateUnlimited) String() string { return proto.CompactTextString(m) }
func (*JobDisruptionBudget_RateUnlimited) ProtoMessage()    {}
func (*JobDisruptionBudget_RateUnlimited) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{9, 4}
}

func (m *JobDisruptionBudget_RateUnlimited) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobDisruptionBudget_RateUnlimited.Unmarshal(m, b)
}
func (m *JobDisruptionBudget_RateUnlimited) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobDisruptionBudget_RateUnlimited.Marshal(b, m, deterministic)
}
func (m *JobDisruptionBudget_RateUnlimited) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDisruptionBudget_RateUnlimited.Merge(m, src)
}
func (m *JobDisruptionBudget_RateUnlimited) XXX_Size() int {
	return xxx_messageInfo_JobDisruptionBudget_RateUnlimited.Size(m)
}
func (m *JobDisruptionBudget_RateUnlimited) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDisruptionBudget_RateUnlimited.DiscardUnknown(m)
}

var xxx_messageInfo_JobDisruptionBudget_RateUnlimited proto.InternalMessageInfo

/// Allow up to the given percentage of tasks to be relocated within an hour.
type JobDisruptionBudget_RatePercentagePerHour struct {
	MaxPercentageOfContainersRelocatedInHour float64  `protobuf:"fixed64,1,opt,name=maxPercentageOfContainersRelocatedInHour,proto3" json:"maxPercentageOfContainersRelocatedInHour,omitempty"`
	XXX_NoUnkeyedLiteral                     struct{} `json:"-"`
	XXX_unrecognized                         []byte   `json:"-"`
	XXX_sizecache                            int32    `json:"-"`
}

func (m *JobDisruptionBudget_RatePercentagePerHour) Reset() {
	*m = JobDisruptionBudget_RatePercentagePerHour{}
}
func (m *JobDisruptionBudget_RatePercentagePerHour) String() string {
	return proto.CompactTextString(m)
}
func (*JobDisruptionBudget_RatePercentagePerHour) ProtoMessage() {}
func (*JobDisruptionBudget_RatePercentagePerHour) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{9, 5}
}

func (m *JobDisruptionBudget_RatePercentagePerHour) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobDisruptionBudget_RatePercentagePerHour.Unmarshal(m, b)
}
func (m *JobDisruptionBudget_RatePercentagePerHour) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobDisruptionBudget_RatePercentagePerHour.Marshal(b, m, deterministic)
}
func (m *JobDisruptionBudget_RatePercentagePerHour) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDisruptionBudget_RatePercentagePerHour.Merge(m, src)
}
func (m *JobDisruptionBudget_RatePercentagePerHour) XXX_Size() int {
	return xxx_messageInfo_JobDisruptionBudget_RatePercentagePerHour.Size(m)
}
func (m *JobDisruptionBudget_RatePercentagePerHour) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDisruptionBudget_RatePercentagePerHour.DiscardUnknown(m)
}

var xxx_messageInfo_JobDisruptionBudget_RatePercentagePerHour proto.InternalMessageInfo

func (m *JobDisruptionBudget_RatePercentagePerHour) GetMaxPercentageOfContainersRelocatedInHour() float64 {
	if m != nil {
		return m.MaxPercentageOfContainersRelocatedInHour
	}
	return 0
}

/// Allow up to the given amount of relocations per the time interval.
type JobDisruptionBudget_RatePerInterval struct {
	IntervalMs           uint64   `protobuf:"varint,1,opt,name=intervalMs,proto3" json:"intervalMs,omitempty"`
	LimitPerInterval     uint32   `protobuf:"varint,2,opt,name=limitPerInterval,proto3" json:"limitPerInterval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobDisruptionBudget_RatePerInterval) Reset()         { *m = JobDisruptionBudget_RatePerInterval{} }
func (m *JobDisruptionBudget_RatePerInterval) String() string { return proto.CompactTextString(m) }
func (*JobDisruptionBudget_RatePerInterval) ProtoMessage()    {}
func (*JobDisruptionBudget_RatePerInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{9, 6}
}

func (m *JobDisruptionBudget_RatePerInterval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobDisruptionBudget_RatePerInterval.Unmarshal(m, b)
}
func (m *JobDisruptionBudget_RatePerInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobDisruptionBudget_RatePerInterval.Marshal(b, m, deterministic)
}
func (m *JobDisruptionBudget_RatePerInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDisruptionBudget_RatePerInterval.Merge(m, src)
}
func (m *JobDisruptionBudget_RatePerInterval) XXX_Size() int {
	return xxx_messageInfo_JobDisruptionBudget_RatePerInterval.Size(m)
}
func (m *JobDisruptionBudget_RatePerInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDisruptionBudget_RatePerInterval.DiscardUnknown(m)
}

var xxx_messageInfo_JobDisruptionBudget_RatePerInterval proto.InternalMessageInfo

func (m *JobDisruptionBudget_RatePerInterval) GetIntervalMs() uint64 {
	if m != nil {
		return m.IntervalMs
	}
	return 0
}

func (m *JobDisruptionBudget_RatePerInterval) GetLimitPerInterval() uint32 {
	if m != nil {
		return m.LimitPerInterval
	}
	return 0
}

/// Percentage of containers that can be relocated within a time interval. The number of containers is determined
//  during each evaluation, and the number is based on the current desired job size. If the job size changes, the percentage of containers
//  changes accordingly. For example, setting / interval to 60000 (1 minute) and ratePercentagePerInterval to 5 (5%)
//  would allow only for up to 5% of all containers to be relocated every minute, given the other criteria are met.
//  For a job with a desired size of 100, 5 container relocations per minute would be allowed. If the desired job size changes
//  to 200, the relocation rate increases to 10 containers per minute.
type JobDisruptionBudget_RatePercentagePerInterval struct {
	IntervalMs                 uint64   `protobuf:"varint,1,opt,name=intervalMs,proto3" json:"intervalMs,omitempty"`
	PercentageLimitPerInterval float64  `protobuf:"fixed64,2,opt,name=percentageLimitPerInterval,proto3" json:"percentageLimitPerInterval,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *JobDisruptionBudget_RatePercentagePerInterval) Reset() {
	*m = JobDisruptionBudget_RatePercentagePerInterval{}
}
func (m *JobDisruptionBudget_RatePercentagePerInterval) String() string {
	return proto.CompactTextString(m)
}
func (*JobDisruptionBudget_RatePercentagePerInterval) ProtoMessage() {}
func (*JobDisruptionBudget_RatePercentagePerInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{9, 7}
}

func (m *JobDisruptionBudget_RatePercentagePerInterval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobDisruptionBudget_RatePercentagePerInterval.Unmarshal(m, b)
}
func (m *JobDisruptionBudget_RatePercentagePerInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobDisruptionBudget_RatePercentagePerInterval.Marshal(b, m, deterministic)
}
func (m *JobDisruptionBudget_RatePercentagePerInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDisruptionBudget_RatePercentagePerInterval.Merge(m, src)
}
func (m *JobDisruptionBudget_RatePercentagePerInterval) XXX_Size() int {
	return xxx_messageInfo_JobDisruptionBudget_RatePercentagePerInterval.Size(m)
}
func (m *JobDisruptionBudget_RatePercentagePerInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDisruptionBudget_RatePercentagePerInterval.DiscardUnknown(m)
}

var xxx_messageInfo_JobDisruptionBudget_RatePercentagePerInterval proto.InternalMessageInfo

func (m *JobDisruptionBudget_RatePercentagePerInterval) GetIntervalMs() uint64 {
	if m != nil {
		return m.IntervalMs
	}
	return 0
}

func (m *JobDisruptionBudget_RatePercentagePerInterval) GetPercentageLimitPerInterval() float64 {
	if m != nil {
		return m.PercentageLimitPerInterval
	}
	return 0
}

/// Batch job specification.
type BatchJobSpec struct {
	/// (Required) Number of tasks to run (> 0).
	Size uint32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	/// (Required) Maximum amount of time in seconds that the job's task is allowed to run. The timer is started once the task
	// transitions to the 'RUNNING' state. If a task terminates with an error and is restarted, the timer starts again from 0.
	RuntimeLimitSec uint64 `protobuf:"varint,2,opt,name=runtimeLimitSec,proto3" json:"runtimeLimitSec,omitempty"`
	/// (Required) Task rescheduling policy in case of failure.
	RetryPolicy *RetryPolicy `protobuf:"bytes,3,opt,name=retryPolicy,proto3" json:"retryPolicy,omitempty"`
	/// true when the task should be restarted after being terminated due to runtime limit.
	RetryOnRuntimeLimit  bool     `protobuf:"varint,4,opt,name=retryOnRuntimeLimit,proto3" json:"retryOnRuntimeLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchJobSpec) Reset()         { *m = BatchJobSpec{} }
func (m *BatchJobSpec) String() string { return proto.CompactTextString(m) }
func (*BatchJobSpec) ProtoMessage()    {}
func (*BatchJobSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{10}
}

func (m *BatchJobSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchJobSpec.Unmarshal(m, b)
}
func (m *BatchJobSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchJobSpec.Marshal(b, m, deterministic)
}
func (m *BatchJobSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchJobSpec.Merge(m, src)
}
func (m *BatchJobSpec) XXX_Size() int {
	return xxx_messageInfo_BatchJobSpec.Size(m)
}
func (m *BatchJobSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchJobSpec.DiscardUnknown(m)
}

var xxx_messageInfo_BatchJobSpec proto.InternalMessageInfo

func (m *BatchJobSpec) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *BatchJobSpec) GetRuntimeLimitSec() uint64 {
	if m != nil {
		return m.RuntimeLimitSec
	}
	return 0
}

func (m *BatchJobSpec) GetRetryPolicy() *RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *BatchJobSpec) GetRetryOnRuntimeLimit() bool {
	if m != nil {
		return m.RetryOnRuntimeLimit
	}
	return false
}

/// Migration polices.
type MigrationPolicy struct {
	/// (Required) Migration policy.
	//
	// Types that are valid to be assigned to Policy:
	//	*MigrationPolicy_SystemDefault_
	//	*MigrationPolicy_SelfManaged_
	Policy               isMigrationPolicy_Policy `protobuf_oneof:"Policy"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *MigrationPolicy) Reset()         { *m = MigrationPolicy{} }
func (m *MigrationPolicy) String() string { return proto.CompactTextString(m) }
func (*MigrationPolicy) ProtoMessage()    {}
func (*MigrationPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{11}
}

func (m *MigrationPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MigrationPolicy.Unmarshal(m, b)
}
func (m *MigrationPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MigrationPolicy.Marshal(b, m, deterministic)
}
func (m *MigrationPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrationPolicy.Merge(m, src)
}
func (m *MigrationPolicy) XXX_Size() int {
	return xxx_messageInfo_MigrationPolicy.Size(m)
}
func (m *MigrationPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrationPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MigrationPolicy proto.InternalMessageInfo

type isMigrationPolicy_Policy interface {
	isMigrationPolicy_Policy()
}

type MigrationPolicy_SystemDefault_ struct {
	SystemDefault *MigrationPolicy_SystemDefault `protobuf:"bytes,1,opt,name=systemDefault,proto3,oneof"`
}

type MigrationPolicy_SelfManaged_ struct {
	SelfManaged *MigrationPolicy_SelfManaged `protobuf:"bytes,2,opt,name=selfManaged,proto3,oneof"`
}

func (*MigrationPolicy_SystemDefault_) isMigrationPolicy_Policy() {}

func (*MigrationPolicy_SelfManaged_) isMigrationPolicy_Policy() {}

func (m *MigrationPolicy) GetPolicy() isMigrationPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *MigrationPolicy) GetSystemDefault() *MigrationPolicy_SystemDefault {
	if x, ok := m.GetPolicy().(*MigrationPolicy_SystemDefault_); ok {
		return x.SystemDefault
	}
	return nil
}

func (m *MigrationPolicy) GetSelfManaged() *MigrationPolicy_SelfManaged {
	if x, ok := m.GetPolicy().(*MigrationPolicy_SelfManaged_); ok {
		return x.SelfManaged
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MigrationPolicy) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MigrationPolicy_SystemDefault_)(nil),
		(*MigrationPolicy_SelfManaged_)(nil),
	}
}

/// The system default migration policy.
type MigrationPolicy_SystemDefault struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MigrationPolicy_SystemDefault) Reset()         { *m = MigrationPolicy_SystemDefault{} }
func (m *MigrationPolicy_SystemDefault) String() string { return proto.CompactTextString(m) }
func (*MigrationPolicy_SystemDefault) ProtoMessage()    {}
func (*MigrationPolicy_SystemDefault) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{11, 0}
}

func (m *MigrationPolicy_SystemDefault) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MigrationPolicy_SystemDefault.Unmarshal(m, b)
}
func (m *MigrationPolicy_SystemDefault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MigrationPolicy_SystemDefault.Marshal(b, m, deterministic)
}
func (m *MigrationPolicy_SystemDefault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrationPolicy_SystemDefault.Merge(m, src)
}
func (m *MigrationPolicy_SystemDefault) XXX_Size() int {
	return xxx_messageInfo_MigrationPolicy_SystemDefault.Size(m)
}
func (m *MigrationPolicy_SystemDefault) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrationPolicy_SystemDefault.DiscardUnknown(m)
}

var xxx_messageInfo_MigrationPolicy_SystemDefault proto.InternalMessageInfo

/// The self managed policy where the owner needs to migrate the tasks.
type MigrationPolicy_SelfManaged struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MigrationPolicy_SelfManaged) Reset()         { *m = MigrationPolicy_SelfManaged{} }
func (m *MigrationPolicy_SelfManaged) String() string { return proto.CompactTextString(m) }
func (*MigrationPolicy_SelfManaged) ProtoMessage()    {}
func (*MigrationPolicy_SelfManaged) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{11, 1}
}

func (m *MigrationPolicy_SelfManaged) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MigrationPolicy_SelfManaged.Unmarshal(m, b)
}
func (m *MigrationPolicy_SelfManaged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MigrationPolicy_SelfManaged.Marshal(b, m, deterministic)
}
func (m *MigrationPolicy_SelfManaged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrationPolicy_SelfManaged.Merge(m, src)
}
func (m *MigrationPolicy_SelfManaged) XXX_Size() int {
	return xxx_messageInfo_MigrationPolicy_SelfManaged.Size(m)
}
func (m *MigrationPolicy_SelfManaged) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrationPolicy_SelfManaged.DiscardUnknown(m)
}

var xxx_messageInfo_MigrationPolicy_SelfManaged proto.InternalMessageInfo

/// Migration details
type MigrationDetails struct {
	/// true when the the task needs to be migrated to another agent.
	NeedsMigration bool `protobuf:"varint,1,opt,name=needsMigration,proto3" json:"needsMigration,omitempty"`
	/// The deadline time that the owner must migrate their task by or the system will automatically do it.
	/// This value is irrelevant if 'needsMigration' is set to false and will default to the value '0'.
	Deadline uint64 `protobuf:"varint,2,opt,name=deadline,proto3" json:"deadline,omitempty"`
	/// Time at which the migration decision was made.
	/// This value is irrelevant if 'needsMigration' is set to false and will default to the value '0'.
	Started              uint64   `protobuf:"varint,3,opt,name=started,proto3" json:"started,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MigrationDetails) Reset()         { *m = MigrationDetails{} }
func (m *MigrationDetails) String() string { return proto.CompactTextString(m) }
func (*MigrationDetails) ProtoMessage()    {}
func (*MigrationDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{12}
}

func (m *MigrationDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MigrationDetails.Unmarshal(m, b)
}
func (m *MigrationDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MigrationDetails.Marshal(b, m, deterministic)
}
func (m *MigrationDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MigrationDetails.Merge(m, src)
}
func (m *MigrationDetails) XXX_Size() int {
	return xxx_messageInfo_MigrationDetails.Size(m)
}
func (m *MigrationDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_MigrationDetails.DiscardUnknown(m)
}

var xxx_messageInfo_MigrationDetails proto.InternalMessageInfo

func (m *MigrationDetails) GetNeedsMigration() bool {
	if m != nil {
		return m.NeedsMigration
	}
	return false
}

func (m *MigrationDetails) GetDeadline() uint64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *MigrationDetails) GetStarted() uint64 {
	if m != nil {
		return m.Started
	}
	return 0
}

/// Service job specification.
type ServiceJobSpec struct {
	/// (Required) Number of tasks to run. If a scaling policy is defined, the number of tasks created will be always
	// within min/max range.
	Capacity *Capacity `protobuf:"bytes,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	/// (Optional) Job enable/disable status. If a job is disabled, auto-scaling policies are not applied.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	/// (Required) Task rescheduling policy in case of failure.
	RetryPolicy *RetryPolicy `protobuf:"bytes,3,opt,name=retryPolicy,proto3" json:"retryPolicy,omitempty"`
	/// (Optional) Migration policy for how the tasks will be migrated during an infrastructure change.
	// If not set, defaults to SystemDefault.
	MigrationPolicy *MigrationPolicy `protobuf:"bytes,4,opt,name=migrationPolicy,proto3" json:"migrationPolicy,omitempty"`
	/// (Optional) Job scaling activity configurations.
	ServiceJobProcesses  *ServiceJobSpec_ServiceJobProcesses `protobuf:"bytes,5,opt,name=serviceJobProcesses,proto3" json:"serviceJobProcesses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *ServiceJobSpec) Reset()         { *m = ServiceJobSpec{} }
func (m *ServiceJobSpec) String() string { return proto.CompactTextString(m) }
func (*ServiceJobSpec) ProtoMessage()    {}
func (*ServiceJobSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{13}
}

func (m *ServiceJobSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceJobSpec.Unmarshal(m, b)
}
func (m *ServiceJobSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceJobSpec.Marshal(b, m, deterministic)
}
func (m *ServiceJobSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceJobSpec.Merge(m, src)
}
func (m *ServiceJobSpec) XXX_Size() int {
	return xxx_messageInfo_ServiceJobSpec.Size(m)
}
func (m *ServiceJobSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceJobSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceJobSpec proto.InternalMessageInfo

func (m *ServiceJobSpec) GetCapacity() *Capacity {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *ServiceJobSpec) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ServiceJobSpec) GetRetryPolicy() *RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *ServiceJobSpec) GetMigrationPolicy() *MigrationPolicy {
	if m != nil {
		return m.MigrationPolicy
	}
	return nil
}

func (m *ServiceJobSpec) GetServiceJobProcesses() *ServiceJobSpec_ServiceJobProcesses {
	if m != nil {
		return m.ServiceJobProcesses
	}
	return nil
}

/// Configuration of service job processes
type ServiceJobSpec_ServiceJobProcesses struct {
	/// Prevents increasing the Job's desired capacity. Existing tasks that exit such as the process exiting will still be replaced.
	DisableIncreaseDesired bool `protobuf:"varint,1,opt,name=disableIncreaseDesired,proto3" json:"disableIncreaseDesired,omitempty"`
	/// Prevents decreasing the Job's desired capacity. Existing tasks that exit such as the process exiting will still be replaced.
	DisableDecreaseDesired bool     `protobuf:"varint,2,opt,name=disableDecreaseDesired,proto3" json:"disableDecreaseDesired,omitempty"`
	XXX_NoUnkeyedLiteral   struct{} `json:"-"`
	XXX_unrecognized       []byte   `json:"-"`
	XXX_sizecache          int32    `json:"-"`
}

func (m *ServiceJobSpec_ServiceJobProcesses) Reset()         { *m = ServiceJobSpec_ServiceJobProcesses{} }
func (m *ServiceJobSpec_ServiceJobProcesses) String() string { return proto.CompactTextString(m) }
func (*ServiceJobSpec_ServiceJobProcesses) ProtoMessage()    {}
func (*ServiceJobSpec_ServiceJobProcesses) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{13, 0}
}

func (m *ServiceJobSpec_ServiceJobProcesses) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceJobSpec_ServiceJobProcesses.Unmarshal(m, b)
}
func (m *ServiceJobSpec_ServiceJobProcesses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceJobSpec_ServiceJobProcesses.Marshal(b, m, deterministic)
}
func (m *ServiceJobSpec_ServiceJobProcesses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceJobSpec_ServiceJobProcesses.Merge(m, src)
}
func (m *ServiceJobSpec_ServiceJobProcesses) XXX_Size() int {
	return xxx_messageInfo_ServiceJobSpec_ServiceJobProcesses.Size(m)
}
func (m *ServiceJobSpec_ServiceJobProcesses) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceJobSpec_ServiceJobProcesses.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceJobSpec_ServiceJobProcesses proto.InternalMessageInfo

func (m *ServiceJobSpec_ServiceJobProcesses) GetDisableIncreaseDesired() bool {
	if m != nil {
		return m.DisableIncreaseDesired
	}
	return false
}

func (m *ServiceJobSpec_ServiceJobProcesses) GetDisableDecreaseDesired() bool {
	if m != nil {
		return m.DisableDecreaseDesired
	}
	return false
}

/// Job descriptor contains the full job specification (batch or service) that is used to run a job.
type JobDescriptor struct {
	/// (Optional) Owner of a job (see Owner entity description for more information).
	Owner *Owner `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	/// (Required) Free form name.
	ApplicationName string `protobuf:"bytes,3,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	/// (Optional) Capacity group associated with a job. If not set, defaults to 'DEFAULT'.
	CapacityGroup string `protobuf:"bytes,4,opt,name=capacityGroup,proto3" json:"capacityGroup,omitempty"`
	/// (Optional) Mostly relevant for service jobs, but applicable to batch jobs as well, allows a user to specify
	// own unique identifier for a job (see JobGroupInfo for more information).
	JobGroupInfo *JobGroupInfo `protobuf:"bytes,5,opt,name=jobGroupInfo,proto3" json:"jobGroupInfo,omitempty"`
	/// (Optional) Arbitrary set of key/value pairs. Names starting with 'titus' (case does not matter) are reserved for an internal use.
	Attributes map[string]string `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// (Required) Container to be executed for a job.
	Container *Container `protobuf:"bytes,7,opt,name=container,proto3" json:"container,omitempty"`
	/// (Required) Additional information required for job execution, specific to job type.
	//
	// Types that are valid to be assigned to JobSpec:
	//	*JobDescriptor_Batch
	//	*JobDescriptor_Service
	JobSpec isJobDescriptor_JobSpec `protobuf_oneof:"JobSpec"`
	/// (Optional) Job disruption budget. If not defined, a job type specific (batch or service) default is set.
	DisruptionBudget     *JobDisruptionBudget `protobuf:"bytes,10,opt,name=disruptionBudget,proto3" json:"disruptionBudget,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *JobDescriptor) Reset()         { *m = JobDescriptor{} }
func (m *JobDescriptor) String() string { return proto.CompactTextString(m) }
func (*JobDescriptor) ProtoMessage()    {}
func (*JobDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{14}
}

func (m *JobDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobDescriptor.Unmarshal(m, b)
}
func (m *JobDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobDescriptor.Marshal(b, m, deterministic)
}
func (m *JobDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDescriptor.Merge(m, src)
}
func (m *JobDescriptor) XXX_Size() int {
	return xxx_messageInfo_JobDescriptor.Size(m)
}
func (m *JobDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_JobDescriptor proto.InternalMessageInfo

func (m *JobDescriptor) GetOwner() *Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *JobDescriptor) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *JobDescriptor) GetCapacityGroup() string {
	if m != nil {
		return m.CapacityGroup
	}
	return ""
}

func (m *JobDescriptor) GetJobGroupInfo() *JobGroupInfo {
	if m != nil {
		return m.JobGroupInfo
	}
	return nil
}

func (m *JobDescriptor) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *JobDescriptor) GetContainer() *Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type isJobDescriptor_JobSpec interface {
	isJobDescriptor_JobSpec()
}

type JobDescriptor_Batch struct {
	Batch *BatchJobSpec `protobuf:"bytes,8,opt,name=batch,proto3,oneof"`
}

type JobDescriptor_Service struct {
	Service *ServiceJobSpec `protobuf:"bytes,9,opt,name=service,proto3,oneof"`
}

func (*JobDescriptor_Batch) isJobDescriptor_JobSpec() {}

func (*JobDescriptor_Service) isJobDescriptor_JobSpec() {}

func (m *JobDescriptor) GetJobSpec() isJobDescriptor_JobSpec {
	if m != nil {
		return m.JobSpec
	}
	return nil
}

func (m *JobDescriptor) GetBatch() *BatchJobSpec {
	if x, ok := m.GetJobSpec().(*JobDescriptor_Batch); ok {
		return x.Batch
	}
	return nil
}

func (m *JobDescriptor) GetService() *ServiceJobSpec {
	if x, ok := m.GetJobSpec().(*JobDescriptor_Service); ok {
		return x.Service
	}
	return nil
}

func (m *JobDescriptor) GetDisruptionBudget() *JobDisruptionBudget {
	if m != nil {
		return m.DisruptionBudget
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JobDescriptor) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JobDescriptor_Batch)(nil),
		(*JobDescriptor_Service)(nil),
	}
}

/// Composite data structure holding both job state information and the reason of the transition to this state.
type JobStatus struct {
	/// (Required) Job state
	State JobStatus_JobState `protobuf:"varint,1,opt,name=state,proto3,enum=com.netflix.titus.JobStatus_JobState" json:"state,omitempty"`
	/// (Optional) An identifier of an event that caused a transition to this state. Each job manager can introduce its own
	//  set of reason codes. As of now, there are no common reason codes defined for jobs.
	ReasonCode string `protobuf:"bytes,2,opt,name=reasonCode,proto3" json:"reasonCode,omitempty"`
	/// (Optional) Textual description accompanying the 'reasonCode'.
	ReasonMessage string `protobuf:"bytes,3,opt,name=reasonMessage,proto3" json:"reasonMessage,omitempty"`
	/// Time when a transition to a state happened.
	Timestamp            uint64   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobStatus) Reset()         { *m = JobStatus{} }
func (m *JobStatus) String() string { return proto.CompactTextString(m) }
func (*JobStatus) ProtoMessage()    {}
func (*JobStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{15}
}

func (m *JobStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobStatus.Unmarshal(m, b)
}
func (m *JobStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobStatus.Marshal(b, m, deterministic)
}
func (m *JobStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStatus.Merge(m, src)
}
func (m *JobStatus) XXX_Size() int {
	return xxx_messageInfo_JobStatus.Size(m)
}
func (m *JobStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStatus.DiscardUnknown(m)
}

var xxx_messageInfo_JobStatus proto.InternalMessageInfo

func (m *JobStatus) GetState() JobStatus_JobState {
	if m != nil {
		return m.State
	}
	return JobStatus_Accepted
}

func (m *JobStatus) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

func (m *JobStatus) GetReasonMessage() string {
	if m != nil {
		return m.ReasonMessage
	}
	return ""
}

func (m *JobStatus) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type TaskStatus struct {
	/// (Required) Task state
	State TaskStatus_TaskState `protobuf:"varint,1,opt,name=state,proto3,enum=com.netflix.titus.TaskStatus_TaskState" json:"state,omitempty"`
	/// (Optional) An identifier of an event that caused a transition to this state. Each job manager can introduce its own
	//  set of reason codes. Below are the predefined (common) set of reason codes associated with task state 'Finished':
	//  * 'normal'               - task completed with the exit code 0
	//  * 'failed'               - task completed with a non zero error code
	//  * 'killed'               - task was explicitly terminated by a user
	//  * 'scaledDown'           - task was terminated as a result of job scaling down
	//  * 'stuckInState'         - task was terminated, as it did not progress to the next state in the expected amount of time
	//  * 'runtimeLimitExceeded' - task was terminated, as its runtime limit was exceeded
	//  * 'lost'                 - task was lost, and its final status is unknown
	//  * 'invalidRequest'       - invalid container definition (security group, image name, etc)
	//  * 'crashed'              - container crashed due to some internal system error
	//  * 'transientSystemError' - transient error, not agent specific (for example AWS rate limiting)
	//  * 'localSystemError'     - an error scoped to an agent instance on which a container was run.
	//                             The agent should be quarantined or terminated.
	//  * 'unknownSystemError'   - unknown error which cannot be classified either as local/non-local or transient.
	//                             If there are multiple occurences of this error, the agent should be quarantined or terminated.
	ReasonCode string `protobuf:"bytes,2,opt,name=reasonCode,proto3" json:"reasonCode,omitempty"`
	/// (Optional) Textual description accompanying the 'reasonCode'.
	ReasonMessage string `protobuf:"bytes,3,opt,name=reasonMessage,proto3" json:"reasonMessage,omitempty"`
	/// Time when a transition to a state occurred.
	Timestamp            uint64   `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskStatus) Reset()         { *m = TaskStatus{} }
func (m *TaskStatus) String() string { return proto.CompactTextString(m) }
func (*TaskStatus) ProtoMessage()    {}
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{16}
}

func (m *TaskStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskStatus.Unmarshal(m, b)
}
func (m *TaskStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskStatus.Marshal(b, m, deterministic)
}
func (m *TaskStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskStatus.Merge(m, src)
}
func (m *TaskStatus) XXX_Size() int {
	return xxx_messageInfo_TaskStatus.Size(m)
}
func (m *TaskStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TaskStatus proto.InternalMessageInfo

func (m *TaskStatus) GetState() TaskStatus_TaskState {
	if m != nil {
		return m.State
	}
	return TaskStatus_Accepted
}

func (m *TaskStatus) GetReasonCode() string {
	if m != nil {
		return m.ReasonCode
	}
	return ""
}

func (m *TaskStatus) GetReasonMessage() string {
	if m != nil {
		return m.ReasonMessage
	}
	return ""
}

func (m *TaskStatus) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

/// Task log locations
type LogLocation struct {
	/// (Required) Log access via UI.
	Ui *LogLocation_UI `protobuf:"bytes,1,opt,name=ui,proto3" json:"ui,omitempty"`
	/// (Optional) Live log access. Provided only for running tasks.
	LiveStream *LogLocation_LiveStream `protobuf:"bytes,2,opt,name=liveStream,proto3" json:"liveStream,omitempty"`
	/// (Required) S3 log location.
	S3                   *LogLocation_S3 `protobuf:"bytes,3,opt,name=s3,proto3" json:"s3,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LogLocation) Reset()         { *m = LogLocation{} }
func (m *LogLocation) String() string { return proto.CompactTextString(m) }
func (*LogLocation) ProtoMessage()    {}
func (*LogLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{17}
}

func (m *LogLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogLocation.Unmarshal(m, b)
}
func (m *LogLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogLocation.Marshal(b, m, deterministic)
}
func (m *LogLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLocation.Merge(m, src)
}
func (m *LogLocation) XXX_Size() int {
	return xxx_messageInfo_LogLocation.Size(m)
}
func (m *LogLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLocation.DiscardUnknown(m)
}

var xxx_messageInfo_LogLocation proto.InternalMessageInfo

func (m *LogLocation) GetUi() *LogLocation_UI {
	if m != nil {
		return m.Ui
	}
	return nil
}

func (m *LogLocation) GetLiveStream() *LogLocation_LiveStream {
	if m != nil {
		return m.LiveStream
	}
	return nil
}

func (m *LogLocation) GetS3() *LogLocation_S3 {
	if m != nil {
		return m.S3
	}
	return nil
}

/// URL pointing to a UI based log viewer.
type LogLocation_UI struct {
	/// (Required) UI URL.
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogLocation_UI) Reset()         { *m = LogLocation_UI{} }
func (m *LogLocation_UI) String() string { return proto.CompactTextString(m) }
func (*LogLocation_UI) ProtoMessage()    {}
func (*LogLocation_UI) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{17, 0}
}

func (m *LogLocation_UI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogLocation_UI.Unmarshal(m, b)
}
func (m *LogLocation_UI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogLocation_UI.Marshal(b, m, deterministic)
}
func (m *LogLocation_UI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLocation_UI.Merge(m, src)
}
func (m *LogLocation_UI) XXX_Size() int {
	return xxx_messageInfo_LogLocation_UI.Size(m)
}
func (m *LogLocation_UI) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLocation_UI.DiscardUnknown(m)
}

var xxx_messageInfo_LogLocation_UI proto.InternalMessageInfo

func (m *LogLocation_UI) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

/// URL address to a container log service. When a container is running, its stdout/stderr or any other file in the
//  '/logs' folder can be acccessed via this endpoint. The endpoint becomes unavailable when the container terminates.
//
//  A user should provide the 'f' query parameter to specify a file to download. If the 'f' query parameter is net set,
//  it defaults to 'stdout'. The file path must be relative to the '/logs' folder.
type LogLocation_LiveStream struct {
	/// (Required) Live log URL.
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogLocation_LiveStream) Reset()         { *m = LogLocation_LiveStream{} }
func (m *LogLocation_LiveStream) String() string { return proto.CompactTextString(m) }
func (*LogLocation_LiveStream) ProtoMessage()    {}
func (*LogLocation_LiveStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{17, 1}
}

func (m *LogLocation_LiveStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogLocation_LiveStream.Unmarshal(m, b)
}
func (m *LogLocation_LiveStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogLocation_LiveStream.Marshal(b, m, deterministic)
}
func (m *LogLocation_LiveStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLocation_LiveStream.Merge(m, src)
}
func (m *LogLocation_LiveStream) XXX_Size() int {
	return xxx_messageInfo_LogLocation_LiveStream.Size(m)
}
func (m *LogLocation_LiveStream) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLocation_LiveStream.DiscardUnknown(m)
}

var xxx_messageInfo_LogLocation_LiveStream proto.InternalMessageInfo

func (m *LogLocation_LiveStream) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

/// Location of S3 folder containing container's log files.
type LogLocation_S3 struct {
	/// (Required) AWS account name.
	AccountName string `protobuf:"bytes,1,opt,name=accountName,proto3" json:"accountName,omitempty"`
	/// (Required) AWS account id.
	AccountId string `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	/// (Required) AWS region.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	/// (Required) S3 bucket.
	Bucket string `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	/// (Required) The key prefix in the S3 bucket. The assumption is that the consumer finds all objects based on this key prefix.
	Key                  string   `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogLocation_S3) Reset()         { *m = LogLocation_S3{} }
func (m *LogLocation_S3) String() string { return proto.CompactTextString(m) }
func (*LogLocation_S3) ProtoMessage()    {}
func (*LogLocation_S3) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{17, 2}
}

func (m *LogLocation_S3) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogLocation_S3.Unmarshal(m, b)
}
func (m *LogLocation_S3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogLocation_S3.Marshal(b, m, deterministic)
}
func (m *LogLocation_S3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLocation_S3.Merge(m, src)
}
func (m *LogLocation_S3) XXX_Size() int {
	return xxx_messageInfo_LogLocation_S3.Size(m)
}
func (m *LogLocation_S3) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLocation_S3.DiscardUnknown(m)
}

var xxx_messageInfo_LogLocation_S3 proto.InternalMessageInfo

func (m *LogLocation_S3) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *LogLocation_S3) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *LogLocation_S3) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *LogLocation_S3) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *LogLocation_S3) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

/// Task is an entity representing a running container.
type Task struct {
	/// (Required) The Id of the task.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	/// (Required) Id of a job that owns this task.
	JobId string `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	/// (Required) Includes:
	// * agent execution environment: 'agent.region', 'agent.zone', 'agent.host', 'agent.instanceId'
	// * job type specific information: 'task.index', 'task.resubmitOf' (id of task which this task is replacing), 'task.originalId' (id of task which this task is a replacement)
	TaskContext map[string]string `protobuf:"bytes,3,rep,name=taskContext,proto3" json:"taskContext,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// (Required) Last known state of this task.
	Status *TaskStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	/// (Required) State transition history.
	StatusHistory []*TaskStatus `protobuf:"bytes,5,rep,name=statusHistory,proto3" json:"statusHistory,omitempty"`
	/// (Required) Container logs.
	LogLocation *LogLocation `protobuf:"bytes,6,opt,name=logLocation,proto3" json:"logLocation,omitempty"`
	/// (Required) Migration details.
	MigrationDetails *MigrationDetails `protobuf:"bytes,7,opt,name=migrationDetails,proto3" json:"migrationDetails,omitempty"`
	/// (Optional) User defined key/value pairs.
	Attributes           map[string]string `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{18}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *Task) GetTaskContext() map[string]string {
	if m != nil {
		return m.TaskContext
	}
	return nil
}

func (m *Task) GetStatus() *TaskStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Task) GetStatusHistory() []*TaskStatus {
	if m != nil {
		return m.StatusHistory
	}
	return nil
}

func (m *Task) GetLogLocation() *LogLocation {
	if m != nil {
		return m.LogLocation
	}
	return nil
}

func (m *Task) GetMigrationDetails() *MigrationDetails {
	if m != nil {
		return m.MigrationDetails
	}
	return nil
}

func (m *Task) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

/// Job entity is returned by query operations only.
type Job struct {
	/// (Required) The unique id (UUID).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	/// (Required) Job descriptor.
	JobDescriptor *JobDescriptor `protobuf:"bytes,2,opt,name=jobDescriptor,proto3" json:"jobDescriptor,omitempty"`
	/// (Required) Last known job state.
	Status *JobStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	/// (Required) State transition history.
	StatusHistory        []*JobStatus `protobuf:"bytes,4,rep,name=statusHistory,proto3" json:"statusHistory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{19}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetJobDescriptor() *JobDescriptor {
	if m != nil {
		return m.JobDescriptor
	}
	return nil
}

func (m *Job) GetStatus() *JobStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Job) GetStatusHistory() []*JobStatus {
	if m != nil {
		return m.StatusHistory
	}
	return nil
}

/// Job event stream consists of two phases. In the first phase, a snapshot of the current state (a job and its tasks) is
//  streamed, and it is followed by the SnapshotEnd notification marker. In the second phase, job/task state updates are
//  sent. When a job is terminated, the stream completes.
type JobChangeNotification struct {
	// Types that are valid to be assigned to Notification:
	//	*JobChangeNotification_JobUpdate_
	//	*JobChangeNotification_TaskUpdate_
	//	*JobChangeNotification_SnapshotEnd_
	Notification         isJobChangeNotification_Notification `protobuf_oneof:"Notification"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *JobChangeNotification) Reset()         { *m = JobChangeNotification{} }
func (m *JobChangeNotification) String() string { return proto.CompactTextString(m) }
func (*JobChangeNotification) ProtoMessage()    {}
func (*JobChangeNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{20}
}

func (m *JobChangeNotification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobChangeNotification.Unmarshal(m, b)
}
func (m *JobChangeNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobChangeNotification.Marshal(b, m, deterministic)
}
func (m *JobChangeNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobChangeNotification.Merge(m, src)
}
func (m *JobChangeNotification) XXX_Size() int {
	return xxx_messageInfo_JobChangeNotification.Size(m)
}
func (m *JobChangeNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_JobChangeNotification.DiscardUnknown(m)
}

var xxx_messageInfo_JobChangeNotification proto.InternalMessageInfo

type isJobChangeNotification_Notification interface {
	isJobChangeNotification_Notification()
}

type JobChangeNotification_JobUpdate_ struct {
	JobUpdate *JobChangeNotification_JobUpdate `protobuf:"bytes,1,opt,name=jobUpdate,proto3,oneof"`
}

type JobChangeNotification_TaskUpdate_ struct {
	TaskUpdate *JobChangeNotification_TaskUpdate `protobuf:"bytes,2,opt,name=taskUpdate,proto3,oneof"`
}

type JobChangeNotification_SnapshotEnd_ struct {
	SnapshotEnd *JobChangeNotification_SnapshotEnd `protobuf:"bytes,3,opt,name=snapshotEnd,proto3,oneof"`
}

func (*JobChangeNotification_JobUpdate_) isJobChangeNotification_Notification() {}

func (*JobChangeNotification_TaskUpdate_) isJobChangeNotification_Notification() {}

func (*JobChangeNotification_SnapshotEnd_) isJobChangeNotification_Notification() {}

func (m *JobChangeNotification) GetNotification() isJobChangeNotification_Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

func (m *JobChangeNotification) GetJobUpdate() *JobChangeNotification_JobUpdate {
	if x, ok := m.GetNotification().(*JobChangeNotification_JobUpdate_); ok {
		return x.JobUpdate
	}
	return nil
}

func (m *JobChangeNotification) GetTaskUpdate() *JobChangeNotification_TaskUpdate {
	if x, ok := m.GetNotification().(*JobChangeNotification_TaskUpdate_); ok {
		return x.TaskUpdate
	}
	return nil
}

func (m *JobChangeNotification) GetSnapshotEnd() *JobChangeNotification_SnapshotEnd {
	if x, ok := m.GetNotification().(*JobChangeNotification_SnapshotEnd_); ok {
		return x.SnapshotEnd
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*JobChangeNotification) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*JobChangeNotification_JobUpdate_)(nil),
		(*JobChangeNotification_TaskUpdate_)(nil),
		(*JobChangeNotification_SnapshotEnd_)(nil),
	}
}

/// Emitted when a new job is created or when any of the job's attributes change.
type JobChangeNotification_JobUpdate struct {
	Job                  *Job     `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobChangeNotification_JobUpdate) Reset()         { *m = JobChangeNotification_JobUpdate{} }
func (m *JobChangeNotification_JobUpdate) String() string { return proto.CompactTextString(m) }
func (*JobChangeNotification_JobUpdate) ProtoMessage()    {}
func (*JobChangeNotification_JobUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{20, 0}
}

func (m *JobChangeNotification_JobUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobChangeNotification_JobUpdate.Unmarshal(m, b)
}
func (m *JobChangeNotification_JobUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobChangeNotification_JobUpdate.Marshal(b, m, deterministic)
}
func (m *JobChangeNotification_JobUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobChangeNotification_JobUpdate.Merge(m, src)
}
func (m *JobChangeNotification_JobUpdate) XXX_Size() int {
	return xxx_messageInfo_JobChangeNotification_JobUpdate.Size(m)
}
func (m *JobChangeNotification_JobUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_JobChangeNotification_JobUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_JobChangeNotification_JobUpdate proto.InternalMessageInfo

func (m *JobChangeNotification_JobUpdate) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

/// Emitted when a task is created or its state has changed.
type JobChangeNotification_TaskUpdate struct {
	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	/// movedFromAnotherJob will be true on the first event for the target Job after a task is moved between jobs.
	//  task.jobId will be the destination job, and it will include a 'task.movedFromJob' entry in its taskContext
	//  map with the source jobId.
	MovedFromAnotherJob  bool     `protobuf:"varint,2,opt,name=movedFromAnotherJob,proto3" json:"movedFromAnotherJob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobChangeNotification_TaskUpdate) Reset()         { *m = JobChangeNotification_TaskUpdate{} }
func (m *JobChangeNotification_TaskUpdate) String() string { return proto.CompactTextString(m) }
func (*JobChangeNotification_TaskUpdate) ProtoMessage()    {}
func (*JobChangeNotification_TaskUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{20, 1}
}

func (m *JobChangeNotification_TaskUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobChangeNotification_TaskUpdate.Unmarshal(m, b)
}
func (m *JobChangeNotification_TaskUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobChangeNotification_TaskUpdate.Marshal(b, m, deterministic)
}
func (m *JobChangeNotification_TaskUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobChangeNotification_TaskUpdate.Merge(m, src)
}
func (m *JobChangeNotification_TaskUpdate) XXX_Size() int {
	return xxx_messageInfo_JobChangeNotification_TaskUpdate.Size(m)
}
func (m *JobChangeNotification_TaskUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_JobChangeNotification_TaskUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_JobChangeNotification_TaskUpdate proto.InternalMessageInfo

func (m *JobChangeNotification_TaskUpdate) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *JobChangeNotification_TaskUpdate) GetMovedFromAnotherJob() bool {
	if m != nil {
		return m.MovedFromAnotherJob
	}
	return false
}

/// A notification marker that indicates that all known jobs were streamed to the client.
type JobChangeNotification_SnapshotEnd struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobChangeNotification_SnapshotEnd) Reset()         { *m = JobChangeNotification_SnapshotEnd{} }
func (m *JobChangeNotification_SnapshotEnd) String() string { return proto.CompactTextString(m) }
func (*JobChangeNotification_SnapshotEnd) ProtoMessage()    {}
func (*JobChangeNotification_SnapshotEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{20, 2}
}

func (m *JobChangeNotification_SnapshotEnd) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobChangeNotification_SnapshotEnd.Unmarshal(m, b)
}
func (m *JobChangeNotification_SnapshotEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobChangeNotification_SnapshotEnd.Marshal(b, m, deterministic)
}
func (m *JobChangeNotification_SnapshotEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobChangeNotification_SnapshotEnd.Merge(m, src)
}
func (m *JobChangeNotification_SnapshotEnd) XXX_Size() int {
	return xxx_messageInfo_JobChangeNotification_SnapshotEnd.Size(m)
}
func (m *JobChangeNotification_SnapshotEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_JobChangeNotification_SnapshotEnd.DiscardUnknown(m)
}

var xxx_messageInfo_JobChangeNotification_SnapshotEnd proto.InternalMessageInfo

type JobDataRecord struct {
	Metadata             *DataRecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Job                  *Job                `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *JobDataRecord) Reset()         { *m = JobDataRecord{} }
func (m *JobDataRecord) String() string { return proto.CompactTextString(m) }
func (*JobDataRecord) ProtoMessage()    {}
func (*JobDataRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{21}
}

func (m *JobDataRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobDataRecord.Unmarshal(m, b)
}
func (m *JobDataRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobDataRecord.Marshal(b, m, deterministic)
}
func (m *JobDataRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDataRecord.Merge(m, src)
}
func (m *JobDataRecord) XXX_Size() int {
	return xxx_messageInfo_JobDataRecord.Size(m)
}
func (m *JobDataRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDataRecord.DiscardUnknown(m)
}

var xxx_messageInfo_JobDataRecord proto.InternalMessageInfo

func (m *JobDataRecord) GetMetadata() *DataRecordMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *JobDataRecord) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

type TaskDataRecord struct {
	Metadata             *DataRecordMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Job                  *Job                `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	Task                 *Task               `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TaskDataRecord) Reset()         { *m = TaskDataRecord{} }
func (m *TaskDataRecord) String() string { return proto.CompactTextString(m) }
func (*TaskDataRecord) ProtoMessage()    {}
func (*TaskDataRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{22}
}

func (m *TaskDataRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskDataRecord.Unmarshal(m, b)
}
func (m *TaskDataRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskDataRecord.Marshal(b, m, deterministic)
}
func (m *TaskDataRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskDataRecord.Merge(m, src)
}
func (m *TaskDataRecord) XXX_Size() int {
	return xxx_messageInfo_TaskDataRecord.Size(m)
}
func (m *TaskDataRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskDataRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TaskDataRecord proto.InternalMessageInfo

func (m *TaskDataRecord) GetMetadata() *DataRecordMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TaskDataRecord) GetJob() *Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *TaskDataRecord) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

type JobId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobId) Reset()         { *m = JobId{} }
func (m *JobId) String() string { return proto.CompactTextString(m) }
func (*JobId) ProtoMessage()    {}
func (*JobId) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{23}
}

func (m *JobId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobId.Unmarshal(m, b)
}
func (m *JobId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobId.Marshal(b, m, deterministic)
}
func (m *JobId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobId.Merge(m, src)
}
func (m *JobId) XXX_Size() int {
	return xxx_messageInfo_JobId.Size(m)
}
func (m *JobId) XXX_DiscardUnknown() {
	xxx_messageInfo_JobId.DiscardUnknown(m)
}

var xxx_messageInfo_JobId proto.InternalMessageInfo

func (m *JobId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type JobIds struct {
	Id                   []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobIds) Reset()         { *m = JobIds{} }
func (m *JobIds) String() string { return proto.CompactTextString(m) }
func (*JobIds) ProtoMessage()    {}
func (*JobIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{24}
}

func (m *JobIds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobIds.Unmarshal(m, b)
}
func (m *JobIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobIds.Marshal(b, m, deterministic)
}
func (m *JobIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobIds.Merge(m, src)
}
func (m *JobIds) XXX_Size() int {
	return xxx_messageInfo_JobIds.Size(m)
}
func (m *JobIds) XXX_DiscardUnknown() {
	xxx_messageInfo_JobIds.DiscardUnknown(m)
}

var xxx_messageInfo_JobIds proto.InternalMessageInfo

func (m *JobIds) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

// Job query request. The query result is limited to the active data set. Finished jobs/tasks are not evaluated
// when the query is executed.
type JobQuery struct {
	/// (Required) Requested page number/size.
	Page *Page `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	/// (Optional) Collection of fields and their values for a filter.
	// Available query criteria:
	// jobIds - list of comma separated job ids
	// taskIds - list of comma separated task ids
	// owner - job owner
	// applicationName - job application name
	// imageName - image name
	// imageTag - image tag
	// capacityGroup - job assigned capacity group
	// jobGroupStack - job group stack
	// jobGroupDetail - job group details
	// jobGroupSequence - job group sequence
	// jobType - job type (batch or service)
	// attributes - comma separated job attribute key/value pairs (for example "key1,key2:value2;k3:value3")
	// attributes.op - logical 'and' or 'or' operators, which should be applied to multiple attributes specified in the query
	// jobState - job state (one)
	// taskStates - task states (multiple, comma separated). Empty value is the same as no value set.
	// taskStateReasons - reasons associated with task states (multiple, comma separated)
	// needsMigration - if set to true, return only jobs with tasks that require migration
	FilteringCriteria map[string]string `protobuf:"bytes,2,rep,name=filteringCriteria,proto3" json:"filteringCriteria,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// (Optional) If set, only field values explicitly specified in this parameter will be returned
	// This does not include certain attributes like 'jobId', 'appName' which are always returned.
	// If the nested field value is provided, only the explicitly listed nested fields will be returned.
	// For example: tasks.taskId rule will result in including just this value when encoding Task entity.
	Fields               []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobQuery) Reset()         { *m = JobQuery{} }
func (m *JobQuery) String() string { return proto.CompactTextString(m) }
func (*JobQuery) ProtoMessage()    {}
func (*JobQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{25}
}

func (m *JobQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobQuery.Unmarshal(m, b)
}
func (m *JobQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobQuery.Marshal(b, m, deterministic)
}
func (m *JobQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobQuery.Merge(m, src)
}
func (m *JobQuery) XXX_Size() int {
	return xxx_messageInfo_JobQuery.Size(m)
}
func (m *JobQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_JobQuery.DiscardUnknown(m)
}

var xxx_messageInfo_JobQuery proto.InternalMessageInfo

func (m *JobQuery) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *JobQuery) GetFilteringCriteria() map[string]string {
	if m != nil {
		return m.FilteringCriteria
	}
	return nil
}

func (m *JobQuery) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type JobQueryResult struct {
	Items                []*Job      `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *JobQueryResult) Reset()         { *m = JobQueryResult{} }
func (m *JobQueryResult) String() string { return proto.CompactTextString(m) }
func (*JobQueryResult) ProtoMessage()    {}
func (*JobQueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{26}
}

func (m *JobQueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobQueryResult.Unmarshal(m, b)
}
func (m *JobQueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobQueryResult.Marshal(b, m, deterministic)
}
func (m *JobQueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobQueryResult.Merge(m, src)
}
func (m *JobQueryResult) XXX_Size() int {
	return xxx_messageInfo_JobQueryResult.Size(m)
}
func (m *JobQueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_JobQueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_JobQueryResult proto.InternalMessageInfo

func (m *JobQueryResult) GetItems() []*Job {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *JobQueryResult) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// The filtering criteria is applied to both Job and Task events. If a criteria applies to task fields, the stream will
// include both task events matching it, and events for jobs with tasks that match it. The opposite is also true, e.g.:
// a criteria on applicationName (a job field) will include both job events matching it, and events for tasks belonging
// to a job that matches it.
type ObserveJobsQuery struct {
	/// (Optional) Collection of fields and their values for a filter.
	// Available query criteria:
	// jobIds - list of comma separated job ids
	// taskIds - list of comma separated task ids
	// owner - job owner
	// applicationName - job application name
	// imageName - image name
	// imageTag - image tag
	// capacityGroup - job assigned capacity group
	// jobGroupStack - job group stack
	// jobGroupDetail - job group details
	// jobGroupSequence - job group sequence
	// jobType - job type (batch or service)
	// attributes - comma separated job attribute key/value pairs. The same key may occur multiple times, with different
	//              values (any value matches the filter). A value may be omitted, in which case if the key
	//              occurs only once, only presence of the key is checked, without value comparison (otherwise the value
	//              is an empty string). Example filters:
	//              * 'key1' - matches, if the key is present
	//              * 'key2:value2' - matches if the attributes contain key 'key2' with value 'value2'
	//              * 'key3,key3:value3a,key3:value3b' - matches if the attributes contain key 'key3' with value '' or 'value3a' or 'value3b'
	//              All the above can be passed together as 'key1,key2:value2,key3,key3:value3a,key3:value3b'
	// attributes.op - logical 'and' or 'or' operators, which should be applied to multiple attributes specified in the query
	// jobState - job state (one)
	// taskStates - task states (multiple, comma separated). Empty value is the same as no value set.
	// taskStateReasons - reasons associated with task states (multiple, comma separated)
	// needsMigration - if set to true, return only jobs with tasks that require migration
	FilteringCriteria    map[string]string `protobuf:"bytes,1,rep,name=filteringCriteria,proto3" json:"filteringCriteria,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ObserveJobsQuery) Reset()         { *m = ObserveJobsQuery{} }
func (m *ObserveJobsQuery) String() string { return proto.CompactTextString(m) }
func (*ObserveJobsQuery) ProtoMessage()    {}
func (*ObserveJobsQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{27}
}

func (m *ObserveJobsQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObserveJobsQuery.Unmarshal(m, b)
}
func (m *ObserveJobsQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObserveJobsQuery.Marshal(b, m, deterministic)
}
func (m *ObserveJobsQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObserveJobsQuery.Merge(m, src)
}
func (m *ObserveJobsQuery) XXX_Size() int {
	return xxx_messageInfo_ObserveJobsQuery.Size(m)
}
func (m *ObserveJobsQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ObserveJobsQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ObserveJobsQuery proto.InternalMessageInfo

func (m *ObserveJobsQuery) GetFilteringCriteria() map[string]string {
	if m != nil {
		return m.FilteringCriteria
	}
	return nil
}

type JobCapacityUpdate struct {
	JobId                string    `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Capacity             *Capacity `protobuf:"bytes,2,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *JobCapacityUpdate) Reset()         { *m = JobCapacityUpdate{} }
func (m *JobCapacityUpdate) String() string { return proto.CompactTextString(m) }
func (*JobCapacityUpdate) ProtoMessage()    {}
func (*JobCapacityUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{28}
}

func (m *JobCapacityUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobCapacityUpdate.Unmarshal(m, b)
}
func (m *JobCapacityUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobCapacityUpdate.Marshal(b, m, deterministic)
}
func (m *JobCapacityUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobCapacityUpdate.Merge(m, src)
}
func (m *JobCapacityUpdate) XXX_Size() int {
	return xxx_messageInfo_JobCapacityUpdate.Size(m)
}
func (m *JobCapacityUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_JobCapacityUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_JobCapacityUpdate proto.InternalMessageInfo

func (m *JobCapacityUpdate) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobCapacityUpdate) GetCapacity() *Capacity {
	if m != nil {
		return m.Capacity
	}
	return nil
}

type JobCapacityUpdateWithOptionalAttributes struct {
	JobId                             string                             `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	JobCapacityWithOptionalAttributes *JobCapacityWithOptionalAttributes `protobuf:"bytes,2,opt,name=jobCapacityWithOptionalAttributes,proto3" json:"jobCapacityWithOptionalAttributes,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}                           `json:"-"`
	XXX_unrecognized                  []byte                             `json:"-"`
	XXX_sizecache                     int32                              `json:"-"`
}

func (m *JobCapacityUpdateWithOptionalAttributes) Reset() {
	*m = JobCapacityUpdateWithOptionalAttributes{}
}
func (m *JobCapacityUpdateWithOptionalAttributes) String() string { return proto.CompactTextString(m) }
func (*JobCapacityUpdateWithOptionalAttributes) ProtoMessage()    {}
func (*JobCapacityUpdateWithOptionalAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{29}
}

func (m *JobCapacityUpdateWithOptionalAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobCapacityUpdateWithOptionalAttributes.Unmarshal(m, b)
}
func (m *JobCapacityUpdateWithOptionalAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobCapacityUpdateWithOptionalAttributes.Marshal(b, m, deterministic)
}
func (m *JobCapacityUpdateWithOptionalAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobCapacityUpdateWithOptionalAttributes.Merge(m, src)
}
func (m *JobCapacityUpdateWithOptionalAttributes) XXX_Size() int {
	return xxx_messageInfo_JobCapacityUpdateWithOptionalAttributes.Size(m)
}
func (m *JobCapacityUpdateWithOptionalAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_JobCapacityUpdateWithOptionalAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_JobCapacityUpdateWithOptionalAttributes proto.InternalMessageInfo

func (m *JobCapacityUpdateWithOptionalAttributes) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobCapacityUpdateWithOptionalAttributes) GetJobCapacityWithOptionalAttributes() *JobCapacityWithOptionalAttributes {
	if m != nil {
		return m.JobCapacityWithOptionalAttributes
	}
	return nil
}

type JobStatusUpdate struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnableStatus         bool     `protobuf:"varint,2,opt,name=enableStatus,proto3" json:"enableStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobStatusUpdate) Reset()         { *m = JobStatusUpdate{} }
func (m *JobStatusUpdate) String() string { return proto.CompactTextString(m) }
func (*JobStatusUpdate) ProtoMessage()    {}
func (*JobStatusUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{30}
}

func (m *JobStatusUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobStatusUpdate.Unmarshal(m, b)
}
func (m *JobStatusUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobStatusUpdate.Marshal(b, m, deterministic)
}
func (m *JobStatusUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStatusUpdate.Merge(m, src)
}
func (m *JobStatusUpdate) XXX_Size() int {
	return xxx_messageInfo_JobStatusUpdate.Size(m)
}
func (m *JobStatusUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStatusUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_JobStatusUpdate proto.InternalMessageInfo

func (m *JobStatusUpdate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JobStatusUpdate) GetEnableStatus() bool {
	if m != nil {
		return m.EnableStatus
	}
	return false
}

type JobProcessesUpdate struct {
	JobId                string                              `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServiceJobProcesses  *ServiceJobSpec_ServiceJobProcesses `protobuf:"bytes,2,opt,name=serviceJobProcesses,proto3" json:"serviceJobProcesses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *JobProcessesUpdate) Reset()         { *m = JobProcessesUpdate{} }
func (m *JobProcessesUpdate) String() string { return proto.CompactTextString(m) }
func (*JobProcessesUpdate) ProtoMessage()    {}
func (*JobProcessesUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{31}
}

func (m *JobProcessesUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobProcessesUpdate.Unmarshal(m, b)
}
func (m *JobProcessesUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobProcessesUpdate.Marshal(b, m, deterministic)
}
func (m *JobProcessesUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobProcessesUpdate.Merge(m, src)
}
func (m *JobProcessesUpdate) XXX_Size() int {
	return xxx_messageInfo_JobProcessesUpdate.Size(m)
}
func (m *JobProcessesUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_JobProcessesUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_JobProcessesUpdate proto.InternalMessageInfo

func (m *JobProcessesUpdate) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobProcessesUpdate) GetServiceJobProcesses() *ServiceJobSpec_ServiceJobProcesses {
	if m != nil {
		return m.ServiceJobProcesses
	}
	return nil
}

type JobDisruptionBudgetUpdate struct {
	JobId                string               `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	DisruptionBudget     *JobDisruptionBudget `protobuf:"bytes,2,opt,name=disruptionBudget,proto3" json:"disruptionBudget,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *JobDisruptionBudgetUpdate) Reset()         { *m = JobDisruptionBudgetUpdate{} }
func (m *JobDisruptionBudgetUpdate) String() string { return proto.CompactTextString(m) }
func (*JobDisruptionBudgetUpdate) ProtoMessage()    {}
func (*JobDisruptionBudgetUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{32}
}

func (m *JobDisruptionBudgetUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobDisruptionBudgetUpdate.Unmarshal(m, b)
}
func (m *JobDisruptionBudgetUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobDisruptionBudgetUpdate.Marshal(b, m, deterministic)
}
func (m *JobDisruptionBudgetUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDisruptionBudgetUpdate.Merge(m, src)
}
func (m *JobDisruptionBudgetUpdate) XXX_Size() int {
	return xxx_messageInfo_JobDisruptionBudgetUpdate.Size(m)
}
func (m *JobDisruptionBudgetUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDisruptionBudgetUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_JobDisruptionBudgetUpdate proto.InternalMessageInfo

func (m *JobDisruptionBudgetUpdate) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobDisruptionBudgetUpdate) GetDisruptionBudget() *JobDisruptionBudget {
	if m != nil {
		return m.DisruptionBudget
	}
	return nil
}

type JobAttributesUpdate struct {
	JobId                string            `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Attributes           map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *JobAttributesUpdate) Reset()         { *m = JobAttributesUpdate{} }
func (m *JobAttributesUpdate) String() string { return proto.CompactTextString(m) }
func (*JobAttributesUpdate) ProtoMessage()    {}
func (*JobAttributesUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{33}
}

func (m *JobAttributesUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobAttributesUpdate.Unmarshal(m, b)
}
func (m *JobAttributesUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobAttributesUpdate.Marshal(b, m, deterministic)
}
func (m *JobAttributesUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobAttributesUpdate.Merge(m, src)
}
func (m *JobAttributesUpdate) XXX_Size() int {
	return xxx_messageInfo_JobAttributesUpdate.Size(m)
}
func (m *JobAttributesUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_JobAttributesUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_JobAttributesUpdate proto.InternalMessageInfo

func (m *JobAttributesUpdate) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobAttributesUpdate) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type JobAttributesDeleteRequest struct {
	JobId                string   `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Keys                 []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobAttributesDeleteRequest) Reset()         { *m = JobAttributesDeleteRequest{} }
func (m *JobAttributesDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*JobAttributesDeleteRequest) ProtoMessage()    {}
func (*JobAttributesDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{34}
}

func (m *JobAttributesDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobAttributesDeleteRequest.Unmarshal(m, b)
}
func (m *JobAttributesDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobAttributesDeleteRequest.Marshal(b, m, deterministic)
}
func (m *JobAttributesDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobAttributesDeleteRequest.Merge(m, src)
}
func (m *JobAttributesDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_JobAttributesDeleteRequest.Size(m)
}
func (m *JobAttributesDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JobAttributesDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JobAttributesDeleteRequest proto.InternalMessageInfo

func (m *JobAttributesDeleteRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobAttributesDeleteRequest) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type TaskId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskId) Reset()         { *m = TaskId{} }
func (m *TaskId) String() string { return proto.CompactTextString(m) }
func (*TaskId) ProtoMessage()    {}
func (*TaskId) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{35}
}

func (m *TaskId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskId.Unmarshal(m, b)
}
func (m *TaskId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskId.Marshal(b, m, deterministic)
}
func (m *TaskId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskId.Merge(m, src)
}
func (m *TaskId) XXX_Size() int {
	return xxx_messageInfo_TaskId.Size(m)
}
func (m *TaskId) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskId.DiscardUnknown(m)
}

var xxx_messageInfo_TaskId proto.InternalMessageInfo

func (m *TaskId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TaskIds struct {
	Id                   []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskIds) Reset()         { *m = TaskIds{} }
func (m *TaskIds) String() string { return proto.CompactTextString(m) }
func (*TaskIds) ProtoMessage()    {}
func (*TaskIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{36}
}

func (m *TaskIds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskIds.Unmarshal(m, b)
}
func (m *TaskIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskIds.Marshal(b, m, deterministic)
}
func (m *TaskIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskIds.Merge(m, src)
}
func (m *TaskIds) XXX_Size() int {
	return xxx_messageInfo_TaskIds.Size(m)
}
func (m *TaskIds) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskIds.DiscardUnknown(m)
}

var xxx_messageInfo_TaskIds proto.InternalMessageInfo

func (m *TaskIds) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

// Task query request. The query result is limited to the active data set. Finished jobs/tasks are not evaluated
// when the query is executed.
type TaskQuery struct {
	/// (Required) Requested page number/size.
	Page *Page `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	/// (Optional) Collection of fields and their values for a filter.
	// Available query criteria:
	// jobIds - list of comma separated job ids
	// taskIds - list of comma separated task ids
	// owner - job owner
	// applicationName - job application name
	// imageName - image name
	// imageTag - image tag
	// capacityGroup - job assigned capacity group
	// jobGroupStack - job group stack
	// jobGroupDetail - job group details
	// jobGroupSequence - job group sequence
	// jobType - job type (batch or service)
	// attributes - comma separated job attribute key/value pairs. The same key may occur multiple times, with different
	//              values (any value matches the filter). A value may be omitted, in which case if the key
	//              occurs only once, only presence of the key is checked, without value comparison (otherwise the value
	//              is an empty string). Example filters:
	//              * 'key1' - matches, if the key is present
	//              * 'key2:value2' - matches if the attributes contain key 'key2' with value 'value2'
	//              * 'key3,key3:value3a,key3:value3b' - matches if the attributes contain key 'key3' with value '' or 'value3a' or 'value3b'
	//              All the above can be passed together as 'key1,key2:value2,key3,key3:value3a,key3:value3b'
	// attributes.op - logical 'and' or 'or' operators, which should be applied to multiple attributes specified in the query
	// jobState - job state (one)
	// taskStates - task states (multiple, comma separated). Empty value is the same as no value set.
	// taskStateReasons - reasons associated with task states (multiple, comma separated)
	// needsMigration - if set to true, return only tasks that require migration
	// skipSystemFailures - a filter for finished tasks only (does not affect non-finished tasks). If set to true,
	//                      a finished task that failed due to a system error is filtered out. System error codes
	//                      are specified in the TaskStatus type definition. These are container failures due to Titus
	//                      internal issues.
	FilteringCriteria map[string]string `protobuf:"bytes,2,rep,name=filteringCriteria,proto3" json:"filteringCriteria,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	/// (Optional) If set, only field values explicitly given in this parameter will be returned
	Fields               []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskQuery) Reset()         { *m = TaskQuery{} }
func (m *TaskQuery) String() string { return proto.CompactTextString(m) }
func (*TaskQuery) ProtoMessage()    {}
func (*TaskQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{37}
}

func (m *TaskQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskQuery.Unmarshal(m, b)
}
func (m *TaskQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskQuery.Marshal(b, m, deterministic)
}
func (m *TaskQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskQuery.Merge(m, src)
}
func (m *TaskQuery) XXX_Size() int {
	return xxx_messageInfo_TaskQuery.Size(m)
}
func (m *TaskQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskQuery.DiscardUnknown(m)
}

var xxx_messageInfo_TaskQuery proto.InternalMessageInfo

func (m *TaskQuery) GetPage() *Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *TaskQuery) GetFilteringCriteria() map[string]string {
	if m != nil {
		return m.FilteringCriteria
	}
	return nil
}

func (m *TaskQuery) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type TaskQueryResult struct {
	Items                []*Task     `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Pagination           *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *TaskQueryResult) Reset()         { *m = TaskQueryResult{} }
func (m *TaskQueryResult) String() string { return proto.CompactTextString(m) }
func (*TaskQueryResult) ProtoMessage()    {}
func (*TaskQueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{38}
}

func (m *TaskQueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskQueryResult.Unmarshal(m, b)
}
func (m *TaskQueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskQueryResult.Marshal(b, m, deterministic)
}
func (m *TaskQueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskQueryResult.Merge(m, src)
}
func (m *TaskQueryResult) XXX_Size() int {
	return xxx_messageInfo_TaskQueryResult.Size(m)
}
func (m *TaskQueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskQueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_TaskQueryResult proto.InternalMessageInfo

func (m *TaskQueryResult) GetItems() []*Task {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *TaskQueryResult) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type TaskKillRequest struct {
	/// (Required) Task to kill.
	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	/// (Optional) Should job size be reduced
	Shrink bool `protobuf:"varint,2,opt,name=shrink,proto3" json:"shrink,omitempty"`
	// (Optional) If set to true, and this is a terminate and shrink request ('shrink' set to true), reject
	// the kill request if it would cause the job size go below the current minimum size. Otherwise, the job
	// size minimum size is decremented by 1.
	PreventMinSizeUpdate bool     `protobuf:"varint,3,opt,name=preventMinSizeUpdate,proto3" json:"preventMinSizeUpdate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskKillRequest) Reset()         { *m = TaskKillRequest{} }
func (m *TaskKillRequest) String() string { return proto.CompactTextString(m) }
func (*TaskKillRequest) ProtoMessage()    {}
func (*TaskKillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{39}
}

func (m *TaskKillRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskKillRequest.Unmarshal(m, b)
}
func (m *TaskKillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskKillRequest.Marshal(b, m, deterministic)
}
func (m *TaskKillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskKillRequest.Merge(m, src)
}
func (m *TaskKillRequest) XXX_Size() int {
	return xxx_messageInfo_TaskKillRequest.Size(m)
}
func (m *TaskKillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskKillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskKillRequest proto.InternalMessageInfo

func (m *TaskKillRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskKillRequest) GetShrink() bool {
	if m != nil {
		return m.Shrink
	}
	return false
}

func (m *TaskKillRequest) GetPreventMinSizeUpdate() bool {
	if m != nil {
		return m.PreventMinSizeUpdate
	}
	return false
}

type TaskAttributesUpdate struct {
	TaskId               string            `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Attributes           map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TaskAttributesUpdate) Reset()         { *m = TaskAttributesUpdate{} }
func (m *TaskAttributesUpdate) String() string { return proto.CompactTextString(m) }
func (*TaskAttributesUpdate) ProtoMessage()    {}
func (*TaskAttributesUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{40}
}

func (m *TaskAttributesUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskAttributesUpdate.Unmarshal(m, b)
}
func (m *TaskAttributesUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskAttributesUpdate.Marshal(b, m, deterministic)
}
func (m *TaskAttributesUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskAttributesUpdate.Merge(m, src)
}
func (m *TaskAttributesUpdate) XXX_Size() int {
	return xxx_messageInfo_TaskAttributesUpdate.Size(m)
}
func (m *TaskAttributesUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskAttributesUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TaskAttributesUpdate proto.InternalMessageInfo

func (m *TaskAttributesUpdate) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskAttributesUpdate) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type TaskAttributesDeleteRequest struct {
	TaskId               string   `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Keys                 []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskAttributesDeleteRequest) Reset()         { *m = TaskAttributesDeleteRequest{} }
func (m *TaskAttributesDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*TaskAttributesDeleteRequest) ProtoMessage()    {}
func (*TaskAttributesDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{41}
}

func (m *TaskAttributesDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskAttributesDeleteRequest.Unmarshal(m, b)
}
func (m *TaskAttributesDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskAttributesDeleteRequest.Marshal(b, m, deterministic)
}
func (m *TaskAttributesDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskAttributesDeleteRequest.Merge(m, src)
}
func (m *TaskAttributesDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_TaskAttributesDeleteRequest.Size(m)
}
func (m *TaskAttributesDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskAttributesDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskAttributesDeleteRequest proto.InternalMessageInfo

func (m *TaskAttributesDeleteRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskAttributesDeleteRequest) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type TaskMoveRequest struct {
	/// (Required) Source Job(Service) distinct from target job which is the source of the task.
	SourceJobId string `protobuf:"bytes,1,opt,name=sourceJobId,proto3" json:"sourceJobId,omitempty"`
	/// (Required) Target Job(Service) distinct from source job which is the recipient of the task.
	TargetJobId string `protobuf:"bytes,2,opt,name=targetJobId,proto3" json:"targetJobId,omitempty"`
	/// (Required) Task to move. Task must be in started state.
	TaskId               string   `protobuf:"bytes,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskMoveRequest) Reset()         { *m = TaskMoveRequest{} }
func (m *TaskMoveRequest) String() string { return proto.CompactTextString(m) }
func (*TaskMoveRequest) ProtoMessage()    {}
func (*TaskMoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c07f2bd2273ea55, []int{42}
}

func (m *TaskMoveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskMoveRequest.Unmarshal(m, b)
}
func (m *TaskMoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskMoveRequest.Marshal(b, m, deterministic)
}
func (m *TaskMoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskMoveRequest.Merge(m, src)
}
func (m *TaskMoveRequest) XXX_Size() int {
	return xxx_messageInfo_TaskMoveRequest.Size(m)
}
func (m *TaskMoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskMoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskMoveRequest proto.InternalMessageInfo

func (m *TaskMoveRequest) GetSourceJobId() string {
	if m != nil {
		return m.SourceJobId
	}
	return ""
}

func (m *TaskMoveRequest) GetTargetJobId() string {
	if m != nil {
		return m.TargetJobId
	}
	return ""
}

func (m *TaskMoveRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func init() {
	proto.RegisterEnum("com.netflix.titus.JobStatus_JobState", JobStatus_JobState_name, JobStatus_JobState_value)
	proto.RegisterEnum("com.netflix.titus.TaskStatus_TaskState", TaskStatus_TaskState_name, TaskStatus_TaskState_value)
	proto.RegisterType((*Owner)(nil), "com.netflix.titus.Owner")
	proto.RegisterType((*JobGroupInfo)(nil), "com.netflix.titus.JobGroupInfo")
	proto.RegisterType((*Constraints)(nil), "com.netflix.titus.Constraints")
	proto.RegisterMapType((map[string]string)(nil), "com.netflix.titus.Constraints.ConstraintsEntry")
	proto.RegisterType((*Image)(nil), "com.netflix.titus.Image")
	proto.RegisterType((*ContainerResources)(nil), "com.netflix.titus.ContainerResources")
	proto.RegisterType((*ContainerResources_EfsMount)(nil), "com.netflix.titus.ContainerResources.EfsMount")
	proto.RegisterType((*SecurityProfile)(nil), "com.netflix.titus.SecurityProfile")
	proto.RegisterMapType((map[string]string)(nil), "com.netflix.titus.SecurityProfile.AttributesEntry")
	proto.RegisterType((*Container)(nil), "com.netflix.titus.Container")
	proto.RegisterMapType((map[string]string)(nil), "com.netflix.titus.Container.AttributesEntry")
	proto.RegisterMapType((map[string]string)(nil), "com.netflix.titus.Container.EnvEntry")
	proto.RegisterType((*Capacity)(nil), "com.netflix.titus.Capacity")
	proto.RegisterType((*JobCapacityWithOptionalAttributes)(nil), "com.netflix.titus.JobCapacityWithOptionalAttributes")
	proto.RegisterType((*JobDisruptionBudget)(nil), "com.netflix.titus.JobDisruptionBudget")
	proto.RegisterType((*JobDisruptionBudget_SelfManaged)(nil), "com.netflix.titus.JobDisruptionBudget.SelfManaged")
	proto.RegisterType((*JobDisruptionBudget_AvailabilityPercentageLimit)(nil), "com.netflix.titus.JobDisruptionBudget.AvailabilityPercentageLimit")
	proto.RegisterType((*JobDisruptionBudget_UnhealthyTasksLimit)(nil), "com.netflix.titus.JobDisruptionBudget.UnhealthyTasksLimit")
	proto.RegisterType((*JobDisruptionBudget_RelocationLimit)(nil), "com.netflix.titus.JobDisruptionBudget.RelocationLimit")
	proto.RegisterType((*JobDisruptionBudget_RateUnlimited)(nil), "com.netflix.titus.JobDisruptionBudget.RateUnlimited")
	proto.RegisterType((*JobDisruptionBudget_RatePercentagePerHour)(nil), "com.netflix.titus.JobDisruptionBudget.RatePercentagePerHour")
	proto.RegisterType((*JobDisruptionBudget_RatePerInterval)(nil), "com.netflix.titus.JobDisruptionBudget.RatePerInterval")
	proto.RegisterType((*JobDisruptionBudget_RatePercentagePerInterval)(nil), "com.netflix.titus.JobDisruptionBudget.RatePercentagePerInterval")
	proto.RegisterType((*BatchJobSpec)(nil), "com.netflix.titus.BatchJobSpec")
	proto.RegisterType((*MigrationPolicy)(nil), "com.netflix.titus.MigrationPolicy")
	proto.RegisterType((*MigrationPolicy_SystemDefault)(nil), "com.netflix.titus.MigrationPolicy.SystemDefault")
	proto.RegisterType((*MigrationPolicy_SelfManaged)(nil), "com.netflix.titus.MigrationPolicy.SelfManaged")
	proto.RegisterType((*MigrationDetails)(nil), "com.netflix.titus.MigrationDetails")
	proto.RegisterType((*ServiceJobSpec)(nil), "com.netflix.titus.ServiceJobSpec")
	proto.RegisterType((*ServiceJobSpec_ServiceJobProcesses)(nil), "com.netflix.titus.ServiceJobSpec.ServiceJobProcesses")
	proto.RegisterType((*JobDescriptor)(nil), "com.netflix.titus.JobDescriptor")
	proto.RegisterMapType((map[string]string)(nil), "com.netflix.titus.JobDescriptor.AttributesEntry")
	proto.RegisterType((*JobStatus)(nil), "com.netflix.titus.JobStatus")
	proto.RegisterType((*TaskStatus)(nil), "com.netflix.titus.TaskStatus")
	proto.RegisterType((*LogLocation)(nil), "com.netflix.titus.LogLocation")
	proto.RegisterType((*LogLocation_UI)(nil), "com.netflix.titus.LogLocation.UI")
	proto.RegisterType((*LogLocation_LiveStream)(nil), "com.netflix.titus.LogLocation.LiveStream")
	proto.RegisterType((*LogLocation_S3)(nil), "com.netflix.titus.LogLocation.S3")
	proto.RegisterType((*Task)(nil), "com.netflix.titus.Task")
	proto.RegisterMapType((map[string]string)(nil), "com.netflix.titus.Task.AttributesEntry")
	proto.RegisterMapType((map[string]string)(nil), "com.netflix.titus.Task.TaskContextEntry")
	proto.RegisterType((*Job)(nil), "com.netflix.titus.Job")
	proto.RegisterType((*JobChangeNotification)(nil), "com.netflix.titus.JobChangeNotification")
	proto.RegisterType((*JobChangeNotification_JobUpdate)(nil), "com.netflix.titus.JobChangeNotification.JobUpdate")
	proto.RegisterType((*JobChangeNotification_TaskUpdate)(nil), "com.netflix.titus.JobChangeNotification.TaskUpdate")
	proto.RegisterType((*JobChangeNotification_SnapshotEnd)(nil), "com.netflix.titus.JobChangeNotification.SnapshotEnd")
	proto.RegisterType((*JobDataRecord)(nil), "com.netflix.titus.JobDataRecord")
	proto.RegisterType((*TaskDataRecord)(nil), "com.netflix.titus.TaskDataRecord")
	proto.RegisterType((*JobId)(nil), "com.netflix.titus.JobId")
	proto.RegisterType((*JobIds)(nil), "com.netflix.titus.JobIds")
	proto.RegisterType((*JobQuery)(nil), "com.netflix.titus.JobQuery")
	proto.RegisterMapType((map[string]string)(nil), "com.netflix.titus.JobQuery.FilteringCriteriaEntry")
	proto.RegisterType((*JobQueryResult)(nil), "com.netflix.titus.JobQueryResult")
	proto.RegisterType((*ObserveJobsQuery)(nil), "com.netflix.titus.ObserveJobsQuery")
	proto.RegisterMapType((map[string]string)(nil), "com.netflix.titus.ObserveJobsQuery.FilteringCriteriaEntry")
	proto.RegisterType((*JobCapacityUpdate)(nil), "com.netflix.titus.JobCapacityUpdate")
	proto.RegisterType((*JobCapacityUpdateWithOptionalAttributes)(nil), "com.netflix.titus.JobCapacityUpdateWithOptionalAttributes")
	proto.RegisterType((*JobStatusUpdate)(nil), "com.netflix.titus.JobStatusUpdate")
	proto.RegisterType((*JobProcessesUpdate)(nil), "com.netflix.titus.JobProcessesUpdate")
	proto.RegisterType((*JobDisruptionBudgetUpdate)(nil), "com.netflix.titus.JobDisruptionBudgetUpdate")
	proto.RegisterType((*JobAttributesUpdate)(nil), "com.netflix.titus.JobAttributesUpdate")
	proto.RegisterMapType((map[string]string)(nil), "com.netflix.titus.JobAttributesUpdate.AttributesEntry")
	proto.RegisterType((*JobAttributesDeleteRequest)(nil), "com.netflix.titus.JobAttributesDeleteRequest")
	proto.RegisterType((*TaskId)(nil), "com.netflix.titus.TaskId")
	proto.RegisterType((*TaskIds)(nil), "com.netflix.titus.TaskIds")
	proto.RegisterType((*TaskQuery)(nil), "com.netflix.titus.TaskQuery")
	proto.RegisterMapType((map[string]string)(nil), "com.netflix.titus.TaskQuery.FilteringCriteriaEntry")
	proto.RegisterType((*TaskQueryResult)(nil), "com.netflix.titus.TaskQueryResult")
	proto.RegisterType((*TaskKillRequest)(nil), "com.netflix.titus.TaskKillRequest")
	proto.RegisterType((*TaskAttributesUpdate)(nil), "com.netflix.titus.TaskAttributesUpdate")
	proto.RegisterMapType((map[string]string)(nil), "com.netflix.titus.TaskAttributesUpdate.AttributesEntry")
	proto.RegisterType((*TaskAttributesDeleteRequest)(nil), "com.netflix.titus.TaskAttributesDeleteRequest")
	proto.RegisterType((*TaskMoveRequest)(nil), "com.netflix.titus.TaskMoveRequest")
}

func init() { proto.RegisterFile("netflix/titus/titus_job_api.proto", fileDescriptor_1c07f2bd2273ea55) }

var fileDescriptor_1c07f2bd2273ea55 = []byte{
	// 3454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x3a, 0x4d, 0x93, 0x1b, 0xc7,
	0x75, 0x18, 0x2c, 0x76, 0x17, 0x78, 0xd8, 0x2f, 0xf6, 0x52, 0x34, 0x08, 0x4a, 0x34, 0x39, 0xb6,
	0xc5, 0x8d, 0x23, 0x43, 0xca, 0x92, 0x22, 0x6d, 0x26, 0x54, 0xc4, 0xdd, 0x25, 0x0d, 0x6c, 0x76,
	0xc5, 0x75, 0x43, 0x2b, 0x2a, 0xae, 0x24, 0x56, 0x63, 0xa6, 0x81, 0x1d, 0x2e, 0x66, 0x06, 0x9e,
	0x6e, 0x2c, 0xb9, 0x72, 0x52, 0x4e, 0xa5, 0xca, 0xfe, 0x03, 0xf9, 0x17, 0xa9, 0x9c, 0x72, 0xf5,
	0x25, 0xe5, 0x4a, 0xe5, 0x9a, 0x4b, 0xaa, 0x72, 0xcc, 0x25, 0x1f, 0x95, 0x5f, 0x90, 0xe4, 0x94,
	0x54, 0x7f, 0xcc, 0x27, 0x66, 0x06, 0xa0, 0x24, 0xcb, 0x17, 0x54, 0xf7, 0xeb, 0xf7, 0xd1, 0xfd,
	0xde, 0xeb, 0xf7, 0xd1, 0x03, 0xb8, 0xed, 0x51, 0x3e, 0x1c, 0x3b, 0xaf, 0xde, 0xe5, 0x0e, 0x9f,
	0x32, 0xf5, 0xfb, 0x93, 0x17, 0xfe, 0xe0, 0x27, 0x64, 0xe2, 0x74, 0x26, 0x81, 0xcf, 0x7d, 0x74,
	0xc5, 0xf2, 0xdd, 0x8e, 0x46, 0xeb, 0x48, 0x84, 0xf6, 0xf5, 0x91, 0xef, 0x8f, 0xc6, 0xf4, 0x5d,
	0x89, 0x30, 0x98, 0x0e, 0xdf, 0x25, 0xde, 0xa5, 0xc2, 0x6e, 0xdf, 0xc8, 0x2e, 0x51, 0x77, 0xc2,
	0xc3, 0xc5, 0x9b, 0xd9, 0xc5, 0x97, 0x01, 0x99, 0x4c, 0x68, 0xc0, 0xc2, 0xf5, 0xbc, 0xdd, 0x0c,
	0x08, 0xa3, 0x6a, 0xdd, 0xfc, 0x0e, 0x2c, 0x3f, 0x7b, 0xe9, 0xd1, 0x00, 0xbd, 0x09, 0x0d, 0x4e,
	0x89, 0xfb, 0xc4, 0x25, 0xce, 0xb8, 0x65, 0xdc, 0x32, 0x76, 0x1a, 0x38, 0x06, 0x98, 0x9f, 0xc2,
	0xda, 0xa1, 0x3f, 0xf8, 0x61, 0xe0, 0x4f, 0x27, 0x3d, 0x6f, 0xe8, 0xa3, 0xab, 0xb0, 0xcc, 0x38,
	0xb1, 0xce, 0x35, 0xa6, 0x9a, 0xa0, 0x6b, 0xb0, 0x62, 0x53, 0x2e, 0x18, 0x54, 0x25, 0x58, 0xcf,
	0x50, 0x1b, 0xea, 0x8c, 0xfe, 0x74, 0x4a, 0x3d, 0x8b, 0xb6, 0x96, 0xe4, 0x4a, 0x34, 0x37, 0xff,
	0xde, 0x80, 0xe6, 0xbe, 0xef, 0x31, 0x1e, 0x10, 0xc7, 0xe3, 0x0c, 0xfd, 0x08, 0x9a, 0x56, 0x3c,
	0x6d, 0x19, 0xb7, 0x96, 0x76, 0x9a, 0xbb, 0xef, 0x76, 0x66, 0x34, 0xd6, 0x49, 0x10, 0x25, 0xc7,
	0x4f, 0x3c, 0x1e, 0x5c, 0xe2, 0x24, 0x0f, 0x74, 0x13, 0x80, 0xbe, 0x9a, 0x04, 0x94, 0x31, 0xc7,
	0xf7, 0xf4, 0xd6, 0x12, 0x90, 0xf6, 0x07, 0xb0, 0x95, 0x65, 0x80, 0xb6, 0x60, 0xe9, 0x9c, 0x5e,
	0xea, 0xe3, 0x89, 0xa1, 0x38, 0xf2, 0x05, 0x19, 0x4f, 0xa9, 0x66, 0xa0, 0x26, 0x0f, 0xab, 0xdf,
	0x37, 0xcc, 0x27, 0xb0, 0xdc, 0x73, 0xc9, 0x88, 0x22, 0x04, 0x35, 0x8f, 0xb8, 0x54, 0x53, 0xc9,
	0xb1, 0x60, 0xc4, 0xc9, 0x48, 0x13, 0x89, 0xa1, 0xd4, 0x92, 0x33, 0xa2, 0x8c, 0x6b, 0x5d, 0xe8,
	0x99, 0xf9, 0xab, 0x65, 0x40, 0xfb, 0xbe, 0xc7, 0x89, 0xe3, 0xd1, 0x00, 0x53, 0xe6, 0x4f, 0x03,
	0x8b, 0x32, 0xc1, 0xc0, 0x9a, 0x4c, 0x25, 0x4f, 0x03, 0x8b, 0xa1, 0x80, 0x8c, 0x26, 0x53, 0xc9,
	0x72, 0x1d, 0x8b, 0xa1, 0x50, 0xb0, 0x4b, 0x5d, 0x3f, 0xb8, 0x3c, 0xde, 0x93, 0x4c, 0xd7, 0x71,
	0x34, 0x57, 0xe2, 0xd8, 0xf9, 0xf1, 0x5e, 0xab, 0x26, 0x57, 0xf4, 0x0c, 0xdd, 0x82, 0xa6, 0x47,
	0xf9, 0x4b, 0x3f, 0x38, 0x3f, 0x1e, 0x4c, 0x58, 0x6b, 0x59, 0x2e, 0x26, 0x41, 0x42, 0x6f, 0x64,
	0x3c, 0xf6, 0x2d, 0xc2, 0x69, 0xef, 0xa4, 0xb5, 0x72, 0xcb, 0xd8, 0xa9, 0xe3, 0x04, 0x04, 0x1d,
	0x41, 0x83, 0x0e, 0xd9, 0xb1, 0x3f, 0x15, 0x86, 0x5a, 0x95, 0x86, 0xea, 0xe4, 0x1b, 0x2a, 0x73,
	0xa6, 0xce, 0x13, 0x4d, 0x86, 0x63, 0x06, 0xc2, 0x01, 0xd9, 0x99, 0xdb, 0x77, 0x3e, 0xa7, 0xc7,
	0x7b, 0xad, 0xba, 0xdc, 0x4d, 0x0c, 0x40, 0x43, 0x68, 0x31, 0x67, 0xe4, 0x51, 0xfb, 0xb1, 0x6d,
	0x0b, 0xbb, 0x3d, 0x56, 0xdb, 0x70, 0x7c, 0x8f, 0xb5, 0x1a, 0x52, 0xf4, 0x77, 0x73, 0x44, 0xf7,
	0xf3, 0x49, 0x70, 0x21, 0x2f, 0x74, 0x15, 0x6a, 0x13, 0xdf, 0x1f, 0xb7, 0x40, 0x98, 0xa6, 0x5b,
	0xc1, 0x72, 0x86, 0x9e, 0x03, 0x62, 0x9c, 0x70, 0xc7, 0xea, 0x9d, 0x68, 0x9a, 0xde, 0x01, 0x6b,
	0x35, 0x6f, 0x19, 0x3b, 0xcd, 0xdd, 0xef, 0xe4, 0xc9, 0x9d, 0x41, 0xee, 0x56, 0x70, 0x0e, 0x8b,
	0xf6, 0xdf, 0x19, 0x50, 0x0f, 0x95, 0x21, 0x3c, 0x8c, 0x0e, 0x59, 0xcf, 0x0e, 0x2f, 0x95, 0x9c,
	0x08, 0x2b, 0xb8, 0x62, 0xf9, 0xc4, 0x77, 0x3c, 0x1e, 0x7a, 0x6f, 0x0c, 0x41, 0x0f, 0xa1, 0xa1,
	0x66, 0x34, 0x70, 0xa5, 0xf1, 0x37, 0x76, 0xdf, 0xcc, 0xd9, 0xd2, 0x71, 0x88, 0x83, 0x63, 0x74,
	0x74, 0x0f, 0xde, 0xa0, 0x43, 0x86, 0xe9, 0x98, 0x70, 0xe7, 0x82, 0x1e, 0xc7, 0x62, 0x6a, 0x52,
	0x4c, 0xfe, 0xe2, 0xde, 0x36, 0x5c, 0xc9, 0x1c, 0x85, 0x32, 0xf3, 0x3f, 0x0c, 0xd8, 0xec, 0x53,
	0x6b, 0x1a, 0x38, 0xfc, 0xf2, 0x24, 0xf0, 0x87, 0xce, 0x98, 0xa2, 0xb7, 0x61, 0x83, 0x69, 0x90,
	0x0c, 0x1d, 0xea, 0x3a, 0x37, 0x70, 0x06, 0x8a, 0x5a, 0xb0, 0xea, 0x10, 0x17, 0xfb, 0xe3, 0xf0,
	0x72, 0x85, 0x53, 0x84, 0x01, 0x08, 0xe7, 0x81, 0x33, 0x98, 0x72, 0xca, 0x5a, 0x4b, 0xd2, 0xd0,
	0xbb, 0x79, 0x0a, 0x4f, 0x4b, 0xee, 0x3c, 0x8e, 0x88, 0x54, 0x3c, 0x48, 0x70, 0x69, 0x3f, 0x82,
	0xcd, 0xcc, 0xf2, 0x6b, 0xdd, 0xf6, 0x7f, 0x5e, 0x86, 0x46, 0xe4, 0xd2, 0x68, 0x1f, 0x1a, 0x41,
	0xe8, 0xd6, 0x92, 0x3e, 0xdf, 0x21, 0x66, 0xef, 0x00, 0x8e, 0xe9, 0xd0, 0x11, 0x6c, 0xb2, 0xf4,
	0x01, 0xa4, 0xd8, 0xe6, 0xae, 0x39, 0xff, 0xa8, 0x38, 0x4b, 0x8a, 0x3a, 0xb0, 0xec, 0x88, 0x70,
	0x24, 0x9d, 0xa1, 0xb9, 0xdb, 0xca, 0xe1, 0x21, 0xc3, 0x15, 0x56, 0x68, 0xe8, 0x28, 0xa5, 0xe3,
	0x9a, 0xd4, 0xf1, 0x3b, 0x65, 0x67, 0x28, 0xd3, 0xae, 0x0c, 0xb6, 0x02, 0xa8, 0xfc, 0x68, 0x59,
	0xda, 0x3b, 0x01, 0x11, 0xb6, 0xb6, 0x7c, 0xd7, 0x25, 0x9e, 0xdd, 0x5a, 0x91, 0x8b, 0xe1, 0x14,
	0x3d, 0x80, 0x25, 0xea, 0x5d, 0xe8, 0x40, 0x52, 0xaa, 0xc4, 0xce, 0x13, 0xef, 0x42, 0x49, 0x16,
	0x14, 0xa8, 0x0b, 0x9b, 0xcc, 0x1f, 0xf2, 0x44, 0x0c, 0x97, 0xf1, 0xa3, 0xb9, 0x7b, 0xb3, 0x3c,
	0x6d, 0xe0, 0x2c, 0x99, 0xe0, 0x74, 0x46, 0x02, 0x3b, 0xc9, 0xa9, 0xb1, 0x18, 0xa7, 0x0c, 0x19,
	0xfa, 0x3e, 0xac, 0xd1, 0x57, 0x13, 0x1a, 0x38, 0x2e, 0xf5, 0x38, 0x51, 0xf1, 0xa4, 0xb9, 0x7b,
	0xb5, 0xa3, 0xd2, 0x75, 0x27, 0x4c, 0xd7, 0x9d, 0xc7, 0xde, 0x25, 0x4e, 0x61, 0x7e, 0x49, 0xf7,
	0x6c, 0xdf, 0x87, 0x7a, 0xa8, 0x9d, 0xd7, 0x72, 0xeb, 0x2e, 0xd4, 0xf7, 0xc9, 0x84, 0x58, 0x0e,
	0x97, 0x74, 0xae, 0xe3, 0x49, 0xba, 0x75, 0x2c, 0x86, 0x12, 0x42, 0x5e, 0x85, 0x29, 0xc7, 0x25,
	0xaf, 0x84, 0x1d, 0x6d, 0xca, 0x9c, 0x80, 0xda, 0x3a, 0xe3, 0x84, 0x53, 0xf3, 0x57, 0x06, 0xdc,
	0x3e, 0xf4, 0x07, 0x21, 0xb7, 0xe7, 0x0e, 0x3f, 0x7b, 0x36, 0x11, 0xd1, 0x95, 0x8c, 0xe3, 0x83,
	0xa1, 0x4e, 0x2c, 0xa3, 0xb9, 0xfb, 0xe6, 0x8c, 0x5e, 0x4e, 0x7b, 0x1e, 0xbf, 0xbb, 0xfb, 0x89,
	0xd8, 0x9e, 0xda, 0x41, 0x27, 0xde, 0xc1, 0x7c, 0x7c, 0xf2, 0x0a, 0xdd, 0x4f, 0xef, 0x6f, 0x1e,
	0x4d, 0xb4, 0xfb, 0x5f, 0xaf, 0xc3, 0xf6, 0xa1, 0x3f, 0x38, 0x70, 0x58, 0x30, 0x95, 0xbb, 0xde,
	0x9b, 0xda, 0x23, 0xca, 0xd1, 0x27, 0xd0, 0x64, 0x74, 0x3c, 0x3c, 0x26, 0x1e, 0x19, 0x51, 0x5b,
	0xef, 0x3b, 0x2f, 0x14, 0xe5, 0x10, 0x77, 0xfa, 0x31, 0x65, 0xb7, 0x82, 0x93, 0x8c, 0xd0, 0x2f,
	0x0d, 0xb8, 0x41, 0x2e, 0x88, 0x33, 0x26, 0x03, 0x67, 0x2c, 0x6e, 0x31, 0x0d, 0x2c, 0xe1, 0x08,
	0x23, 0x7a, 0xe4, 0xb8, 0x0e, 0xd7, 0x07, 0xde, 0x5b, 0x50, 0xd0, 0xe3, 0x62, 0x4e, 0xdd, 0x0a,
	0x2e, 0x13, 0x84, 0x3c, 0xd8, 0x9e, 0x7a, 0x67, 0x94, 0x8c, 0xf9, 0xd9, 0xe5, 0xc7, 0x84, 0x9d,
	0x33, 0x25, 0x5f, 0x29, 0xef, 0xe1, 0x82, 0xf2, 0x4f, 0x67, 0x39, 0x74, 0x2b, 0x38, 0x8f, 0x31,
	0x1a, 0xc0, 0x66, 0x40, 0xc3, 0xc4, 0xab, 0x64, 0xd5, 0xa4, 0xac, 0xfb, 0x0b, 0xca, 0xc2, 0x69,
	0xea, 0x6e, 0x05, 0x67, 0x19, 0xa2, 0x3f, 0x81, 0xf5, 0x80, 0x70, 0x7a, 0xea, 0x8d, 0xc5, 0x94,
	0xda, 0xb2, 0xca, 0x69, 0xee, 0xde, 0x5b, 0x54, 0x42, 0x92, 0xb6, 0x6b, 0xe0, 0x34, 0x33, 0xc4,
	0xe1, 0x0d, 0x01, 0x88, 0x15, 0x79, 0x42, 0x83, 0xae, 0x3f, 0x0d, 0x64, 0xa9, 0xd4, 0xdc, 0xfd,
	0x83, 0xd7, 0x90, 0x32, 0xc3, 0xa3, 0x6b, 0xe0, 0x7c, 0xe6, 0x52, 0x6f, 0x6a, 0xa1, 0xe7, 0x71,
	0x1a, 0x5c, 0x90, 0xb1, 0x8e, 0x51, 0xf7, 0x5f, 0x4f, 0x5e, 0x48, 0xdd, 0x35, 0x70, 0x96, 0x21,
	0xfa, 0x4b, 0x03, 0xae, 0xcf, 0x48, 0x8f, 0xc4, 0xa9, 0x58, 0xf6, 0xe1, 0x17, 0x3d, 0x5e, 0x42,
	0x70, 0xb1, 0x10, 0xf4, 0x87, 0xd0, 0xe4, 0x8e, 0x4b, 0x9f, 0x3b, 0x9e, 0xed, 0xbf, 0x0c, 0xcb,
	0xcb, 0xb7, 0x72, 0x64, 0x7e, 0x1c, 0x61, 0xe1, 0x24, 0x85, 0xa8, 0x18, 0xad, 0x30, 0x61, 0x74,
	0xa5, 0xf7, 0x9d, 0x04, 0xfe, 0x85, 0x63, 0xd3, 0x40, 0xa4, 0x87, 0xa2, 0x8a, 0x71, 0x3f, 0x9f,
	0x04, 0x17, 0xf2, 0x6a, 0xff, 0x00, 0x9a, 0x89, 0xeb, 0x8d, 0xbe, 0x0b, 0x5b, 0xb1, 0x17, 0x8a,
	0xbd, 0x1d, 0xab, 0xba, 0xa0, 0x86, 0x67, 0xe0, 0x6d, 0x0b, 0x6e, 0x94, 0x5c, 0x58, 0x74, 0x00,
	0x6f, 0x4d, 0x22, 0xd0, 0xb3, 0xa1, 0x12, 0x7c, 0x19, 0xed, 0x90, 0xe9, 0x9e, 0xa0, 0x1c, 0xa9,
	0x7d, 0x0a, 0xdb, 0x39, 0xb7, 0x12, 0x7d, 0x00, 0x6d, 0xe9, 0xc7, 0xcf, 0x86, 0xd1, 0x6a, 0x86,
	0xf3, 0x3a, 0x2e, 0xc1, 0x68, 0xdf, 0x81, 0xcd, 0xcc, 0x05, 0x14, 0xc9, 0x45, 0x12, 0x68, 0x6a,
	0x35, 0x69, 0x6f, 0xc2, 0x7a, 0xea, 0x1e, 0xb5, 0x19, 0xbc, 0x91, 0xeb, 0xf2, 0xe8, 0xc7, 0xb0,
	0xe3, 0x92, 0x57, 0x27, 0x89, 0xd3, 0xc4, 0xf2, 0xb4, 0x2c, 0x6a, 0xf7, 0x3c, 0x79, 0xc5, 0xd4,
	0xd1, 0x17, 0xc6, 0x6f, 0xff, 0x29, 0x6c, 0x66, 0xfc, 0x5e, 0x54, 0x2a, 0x8e, 0x1e, 0x47, 0x36,
	0x4a, 0x40, 0x84, 0x25, 0xe5, 0x96, 0x93, 0xae, 0xaf, 0x12, 0xe0, 0x0c, 0xbc, 0xfd, 0x33, 0xb8,
	0x5e, 0xe8, 0xe7, 0x73, 0x05, 0x7d, 0x00, 0xed, 0x49, 0xda, 0xf4, 0x59, 0x91, 0x06, 0x2e, 0xc1,
	0xd8, 0xab, 0xc3, 0xca, 0x89, 0x3f, 0x76, 0xac, 0xcb, 0xbd, 0x15, 0xa8, 0x89, 0x6d, 0x88, 0xa6,
	0x7a, 0x6d, 0x8f, 0x70, 0xeb, 0xec, 0xd0, 0x1f, 0xf4, 0x27, 0xd4, 0x12, 0x9d, 0x29, 0x73, 0x3e,
	0xa7, 0xda, 0x32, 0x72, 0x8c, 0x76, 0x60, 0x33, 0x98, 0x7a, 0xe2, 0xca, 0x48, 0x8e, 0x7d, 0x6a,
	0x49, 0x59, 0x35, 0x9c, 0x05, 0xa3, 0x0f, 0xa1, 0x19, 0x50, 0x59, 0xc1, 0x09, 0x29, 0x3a, 0x25,
	0xe4, 0x95, 0x44, 0x38, 0xc6, 0xc2, 0x49, 0x12, 0xf4, 0x1e, 0x6c, 0xcb, 0xe9, 0x33, 0x0f, 0x27,
	0x78, 0xcb, 0x80, 0x5f, 0xc7, 0x79, 0x4b, 0xe6, 0x7f, 0x19, 0xb0, 0x79, 0xec, 0x8c, 0x02, 0xe9,
	0x5f, 0x9a, 0xcb, 0xa7, 0xb0, 0xce, 0x2e, 0x19, 0xa7, 0xee, 0x01, 0x1d, 0x92, 0xe9, 0x98, 0xeb,
	0x2c, 0xfc, 0x5e, 0x5e, 0xbb, 0x93, 0x26, 0xed, 0xf4, 0x93, 0x74, 0xdd, 0x0a, 0x4e, 0x33, 0x42,
	0x38, 0x9d, 0xdd, 0x55, 0xd2, 0xed, 0x2c, 0xc2, 0xb7, 0x30, 0xb3, 0x0b, 0xc7, 0x4f, 0x49, 0x6d,
	0xaf, 0xa7, 0x22, 0x45, 0x6c, 0x36, 0x73, 0x02, 0x5b, 0x11, 0xdf, 0x03, 0xf9, 0x64, 0xc2, 0x44,
	0xef, 0xe4, 0x51, 0x6a, 0xb3, 0x68, 0x41, 0x1e, 0xb6, 0x8e, 0x33, 0x50, 0xd1, 0xfa, 0xdb, 0x94,
	0xd8, 0x63, 0xc7, 0xa3, 0xda, 0x7c, 0xd1, 0x5c, 0xd4, 0x68, 0x8c, 0x93, 0x80, 0xeb, 0x1a, 0xa8,
	0x86, 0xc3, 0xa9, 0xf9, 0x6f, 0x4b, 0xb0, 0xd1, 0xa7, 0xc1, 0x85, 0x63, 0xd1, 0xd0, 0x45, 0x1e,
	0x40, 0xdd, 0xd2, 0x25, 0x9b, 0xd6, 0xeb, 0x8d, 0xbc, 0xf8, 0xa8, 0x51, 0x70, 0x84, 0x2c, 0xa4,
	0x50, 0x8f, 0x0c, 0xc6, 0x5a, 0x6f, 0x75, 0x1c, 0x4e, 0xbf, 0x02, 0xbf, 0x39, 0x82, 0x4d, 0x37,
	0xad, 0x71, 0x5d, 0x24, 0x98, 0xf3, 0x6d, 0x83, 0xb3, 0xa4, 0x68, 0x04, 0xdb, 0x2c, 0x3a, 0xf4,
	0x49, 0xe0, 0x5b, 0xb2, 0x75, 0xd5, 0x45, 0xc1, 0xfb, 0xb9, 0xbd, 0x56, 0x52, 0x45, 0x89, 0x69,
	0x44, 0x8c, 0xf3, 0x38, 0xb6, 0x7f, 0x61, 0xc0, 0x76, 0x0e, 0x32, 0xba, 0x0f, 0xd7, 0x6c, 0x87,
	0x09, 0xe5, 0xf4, 0x3c, 0x2b, 0xa0, 0x84, 0xd1, 0x03, 0x5d, 0xa3, 0x2a, 0xe3, 0x16, 0xac, 0x26,
	0xe8, 0x0e, 0x68, 0x9a, 0xae, 0x9a, 0xa2, 0xcb, 0xac, 0x9a, 0xff, 0x53, 0x83, 0x75, 0x91, 0x93,
	0x29, 0xb3, 0x02, 0x67, 0xc2, 0xfd, 0x40, 0x34, 0x87, 0xfe, 0x4b, 0x8f, 0x06, 0xda, 0xc4, 0x79,
	0xcd, 0xa1, 0x7c, 0x0f, 0xc4, 0x0a, 0x4d, 0x04, 0x09, 0x32, 0x99, 0x8c, 0x1d, 0x15, 0xe7, 0x3f,
	0x22, 0x6e, 0xf8, 0x82, 0x97, 0x05, 0xa3, 0x6f, 0xc3, 0x7a, 0xe8, 0x12, 0xb2, 0xad, 0xd7, 0x6f,
	0x08, 0x69, 0x20, 0xda, 0x87, 0xb5, 0x17, 0x89, 0x87, 0x44, 0xad, 0xfb, 0x6f, 0xe6, 0xd7, 0x12,
	0x11, 0x1a, 0x4e, 0x11, 0xa1, 0x93, 0x54, 0xc7, 0xba, 0x22, 0x93, 0xf9, 0x7b, 0x05, 0xe5, 0x48,
	0x74, 0xf4, 0xd2, 0xae, 0xf5, 0x21, 0x34, 0xa2, 0x04, 0xdf, 0x5a, 0xd5, 0xfd, 0x42, 0x59, 0x1b,
	0x1f, 0xa3, 0xa3, 0x07, 0xb0, 0x3c, 0x10, 0xb1, 0x56, 0x37, 0x9d, 0x79, 0x67, 0x49, 0xc6, 0xe2,
	0x6e, 0x05, 0x2b, 0x7c, 0xf4, 0x08, 0x56, 0xb5, 0xf3, 0xe8, 0x0a, 0xee, 0xf6, 0x5c, 0x17, 0xec,
	0x56, 0x70, 0x48, 0x83, 0x30, 0x6c, 0xd9, 0x99, 0x62, 0x4b, 0x97, 0x66, 0x6f, 0x2f, 0x56, 0x9a,
	0xe1, 0x19, 0xfa, 0x2f, 0xd9, 0x7c, 0xee, 0x35, 0x60, 0x55, 0x6f, 0xd4, 0xfc, 0x4f, 0x03, 0x1a,
	0x62, 0xcc, 0x09, 0x9f, 0x32, 0xf4, 0xfb, 0xf2, 0xbd, 0x98, 0xab, 0x04, 0xb4, 0x91, 0xdb, 0xdd,
	0x47, 0xc8, 0xe1, 0x88, 0x62, 0x45, 0x23, 0xf2, 0xa7, 0xf0, 0x6a, 0xdf, 0xdb, 0xf7, 0xed, 0x50,
	0x68, 0x02, 0x22, 0x3c, 0x4f, 0xcd, 0x8e, 0x29, 0x63, 0xe1, 0xc3, 0x47, 0x03, 0xa7, 0x81, 0xf2,
	0x81, 0xdb, 0x71, 0x29, 0xe3, 0xc4, 0x55, 0xbe, 0x59, 0xc3, 0x31, 0xc0, 0xfc, 0x01, 0xd4, 0x43,
	0xb1, 0x68, 0x0d, 0xea, 0x8f, 0x2d, 0x8b, 0x4e, 0x38, 0xb5, 0xb7, 0x2a, 0xe8, 0x0a, 0xac, 0xff,
	0x91, 0x33, 0x1e, 0xf7, 0x3c, 0x87, 0x3b, 0xa2, 0xa0, 0xd8, 0x32, 0x04, 0xc2, 0x53, 0xc7, 0x73,
	0xd8, 0x19, 0xb5, 0xb7, 0xaa, 0xe6, 0xdf, 0x56, 0x01, 0x44, 0x61, 0xa5, 0x8f, 0xfa, 0x28, 0x7d,
	0xd4, 0x3b, 0x79, 0x25, 0x6b, 0x84, 0x1d, 0x0d, 0xbf, 0xd6, 0xc3, 0xfe, 0x0c, 0x1a, 0x91, 0xdc,
	0xcc, 0x69, 0xd7, 0xa0, 0x7e, 0x44, 0xa6, 0x9e, 0x75, 0x26, 0x0f, 0x8a, 0x60, 0xa3, 0x2f, 0x32,
	0x46, 0x7c, 0xf8, 0x2a, 0x6a, 0xc2, 0x6a, 0x5f, 0x65, 0x91, 0xad, 0xa5, 0x59, 0xe5, 0xd4, 0xd0,
	0x16, 0xac, 0x1d, 0x38, 0xcc, 0xf2, 0x3d, 0x8f, 0x5a, 0x02, 0xb2, 0x9c, 0x52, 0xd7, 0x8a, 0xf9,
	0x7f, 0x55, 0x68, 0x1e, 0xf9, 0xa3, 0x23, 0x5d, 0x3a, 0xa2, 0xdf, 0x83, 0xea, 0xd4, 0xd1, 0xe1,
	0x28, 0xef, 0x02, 0x24, 0x70, 0x3b, 0xa7, 0x3d, 0x5c, 0x9d, 0x3a, 0xa8, 0x07, 0x30, 0x76, 0x2e,
	0x68, 0x9f, 0x07, 0x94, 0xb8, 0x3a, 0x59, 0xff, 0xce, 0x1c, 0xd2, 0xa3, 0x88, 0x00, 0x27, 0x88,
	0x85, 0x74, 0x76, 0x57, 0x67, 0xa6, 0x79, 0xd2, 0xfb, 0x77, 0x71, 0x95, 0xdd, 0x6d, 0x5f, 0x83,
	0xea, 0x69, 0x4f, 0x5c, 0x8b, 0x69, 0x10, 0x7e, 0x29, 0x11, 0xc3, 0xf6, 0x4d, 0x80, 0x58, 0x48,
	0xce, 0xfa, 0x2f, 0x0d, 0xa8, 0xf6, 0xef, 0xa2, 0x5b, 0xd0, 0x24, 0x96, 0xe5, 0x4f, 0x3d, 0xfe,
	0x51, 0xfc, 0xad, 0x20, 0x09, 0x12, 0xc6, 0xd3, 0xd3, 0x9e, 0xad, 0x3d, 0x20, 0x06, 0xa0, 0x6b,
	0xb0, 0x12, 0xd0, 0x91, 0x28, 0x08, 0xf4, 0xe7, 0x03, 0x35, 0x13, 0xf0, 0xc1, 0xd4, 0x3a, 0xa7,
	0xe1, 0xe3, 0xad, 0x9e, 0x85, 0xf7, 0x77, 0x39, 0xba, 0xbf, 0xe6, 0x3f, 0xd5, 0xa0, 0x26, 0xec,
	0x8f, 0x36, 0xa0, 0xea, 0x84, 0xaf, 0xcd, 0x55, 0xc7, 0x16, 0x17, 0xfb, 0x85, 0x3f, 0x88, 0x84,
	0xaa, 0x09, 0x3a, 0x84, 0x26, 0x27, 0xec, 0x5c, 0xc4, 0x3e, 0xfa, 0x8a, 0xeb, 0x47, 0xd8, 0x9d,
	0x02, 0xb7, 0x96, 0x3f, 0x1a, 0x55, 0x7f, 0x8a, 0x49, 0x10, 0xa3, 0xf7, 0x61, 0x85, 0x49, 0xc7,
	0xd7, 0x69, 0xfc, 0xad, 0xd2, 0xdb, 0x81, 0x35, 0x32, 0xda, 0x87, 0x75, 0x35, 0xea, 0x3a, 0x8c,
	0xfb, 0xc1, 0xa5, 0x7c, 0x57, 0x9c, 0x4b, 0x9d, 0xa6, 0x11, 0xd5, 0xc8, 0x38, 0xb6, 0xa6, 0x6e,
	0xd2, 0x6f, 0x96, 0xdb, 0x1c, 0x27, 0x49, 0xd0, 0x33, 0xd8, 0x72, 0x33, 0x75, 0x9a, 0x4e, 0x16,
	0xdf, 0x2a, 0x2b, 0x47, 0x34, 0x2a, 0x9e, 0x21, 0x46, 0x3f, 0x4c, 0x25, 0x32, 0xd5, 0x95, 0x16,
	0x05, 0x8c, 0xd2, 0x37, 0xed, 0x0f, 0x60, 0x2b, 0xab, 0xf8, 0xd7, 0x7a, 0x35, 0xfc, 0x92, 0x6f,
	0xe2, 0xff, 0x62, 0xc0, 0xd2, 0xa1, 0x3f, 0x98, 0x71, 0xa8, 0xa7, 0xb0, 0xfe, 0x22, 0x99, 0x83,
	0xf5, 0x5d, 0xbd, 0x35, 0x2f, 0x57, 0xe3, 0x34, 0x19, 0xba, 0x17, 0xb9, 0xcd, 0x52, 0x61, 0x6e,
	0x8e, 0xf2, 0x47, 0xe4, 0x35, 0x7b, 0x59, 0xaf, 0x51, 0x6f, 0xdb, 0xe5, 0xc4, 0x69, 0x12, 0xf3,
	0x5f, 0x97, 0xe0, 0x8d, 0x43, 0x7f, 0xb0, 0x7f, 0x46, 0xbc, 0x11, 0xfd, 0xc8, 0xe7, 0xce, 0x50,
	0xd7, 0x3c, 0x08, 0x43, 0xe3, 0x85, 0x3f, 0x38, 0x9d, 0xd8, 0x61, 0xac, 0x2f, 0x7c, 0x0e, 0x9c,
	0x25, 0x16, 0x50, 0x45, 0xd9, 0xad, 0xe0, 0x98, 0x0d, 0x3a, 0x05, 0x10, 0xb7, 0x45, 0x33, 0x55,
	0xca, 0xba, 0xbb, 0x30, 0xd3, 0x8f, 0x23, 0xd2, 0x6e, 0x05, 0x27, 0x18, 0xa1, 0x4f, 0xa1, 0xc9,
	0x3c, 0x32, 0x61, 0x67, 0x3e, 0x7f, 0xe2, 0x85, 0xef, 0xa1, 0xf7, 0x16, 0xe6, 0xdb, 0x8f, 0x69,
	0x65, 0x8f, 0x13, 0x4f, 0xdb, 0xef, 0xcb, 0x24, 0xaf, 0xc5, 0xec, 0xc0, 0xd2, 0x0b, 0x7f, 0xa0,
	0x75, 0x71, 0x2d, 0x9f, 0x3d, 0x16, 0x28, 0xed, 0x73, 0x95, 0x31, 0x35, 0xdd, 0xef, 0x42, 0x4d,
	0x6c, 0x56, 0x13, 0x7e, 0xa3, 0xc0, 0xff, 0xb1, 0x44, 0x12, 0x9d, 0xa4, 0xeb, 0x5f, 0x50, 0xfb,
	0x69, 0xe0, 0xbb, 0x8f, 0x3d, 0x9f, 0x9f, 0xd1, 0xe0, 0xd0, 0x1f, 0xe8, 0x3a, 0x38, 0x6f, 0x49,
	0xb6, 0x5d, 0xf1, 0x96, 0xf7, 0x36, 0x60, 0x2d, 0x79, 0x3a, 0xf3, 0xcf, 0x55, 0x89, 0x4c, 0x38,
	0xc1, 0xd4, 0xf2, 0x03, 0x1b, 0x3d, 0x86, 0xba, 0x4b, 0x39, 0xb1, 0x09, 0x27, 0x25, 0x5f, 0x74,
	0x62, 0x82, 0x63, 0x8d, 0x8c, 0x23, 0xb2, 0x50, 0x13, 0xd5, 0xb9, 0x9a, 0x30, 0xff, 0xc6, 0x80,
	0x0d, 0x71, 0xba, 0xdf, 0x92, 0xfc, 0x48, 0xf7, 0x4b, 0x0b, 0xe8, 0xde, 0xfc, 0x06, 0x2c, 0x1f,
	0xca, 0x94, 0x90, 0xb9, 0xe7, 0x66, 0x0b, 0x56, 0xe4, 0x02, 0x8b, 0x56, 0x96, 0xf4, 0xca, 0x7f,
	0x1b, 0xb2, 0xb0, 0xfa, 0xd1, 0x94, 0x06, 0x97, 0x42, 0xd8, 0x44, 0x94, 0x2c, 0xc5, 0x86, 0x3e,
	0x21, 0x23, 0x8a, 0x25, 0x12, 0xfa, 0x0c, 0xae, 0x0c, 0x9d, 0x31, 0xa7, 0x81, 0xe3, 0x8d, 0xf6,
	0x03, 0x47, 0x0c, 0x48, 0xab, 0x5a, 0xf8, 0x05, 0x30, 0x14, 0xd2, 0x79, 0x9a, 0x25, 0x52, 0xd1,
	0x72, 0x96, 0x99, 0xc8, 0x98, 0x43, 0x87, 0x8e, 0x6d, 0xa6, 0x3f, 0x53, 0xe9, 0x59, 0xfb, 0x00,
	0xae, 0xe5, 0x33, 0x79, 0xad, 0x98, 0xf8, 0x17, 0xb0, 0x11, 0xee, 0x09, 0x53, 0x36, 0x1d, 0x73,
	0xf4, 0x0e, 0x2c, 0x3b, 0x9c, 0xba, 0xe1, 0x9f, 0x1a, 0x8a, 0xec, 0xa2, 0x90, 0xd0, 0x23, 0x80,
	0x09, 0x19, 0x39, 0x9e, 0xca, 0x56, 0xd5, 0xc2, 0x74, 0x79, 0x12, 0x21, 0xe1, 0x04, 0x81, 0xf9,
	0x6b, 0x03, 0xb6, 0x9e, 0x0d, 0x44, 0xaf, 0x20, 0x7a, 0x07, 0xa6, 0x0c, 0x70, 0x96, 0xa7, 0x53,
	0xb5, 0x9b, 0xbc, 0x17, 0xfe, 0x2c, 0xfd, 0xe2, 0xba, 0xfd, 0x8a, 0x74, 0x38, 0x80, 0x2b, 0x89,
	0x2f, 0x49, 0x3a, 0x5c, 0x44, 0x55, 0x8a, 0x91, 0xac, 0x52, 0x1e, 0xc4, 0xdf, 0xaf, 0xb4, 0xb2,
	0xca, 0x9f, 0x2f, 0xc2, 0x91, 0xf9, 0x0f, 0x06, 0xdc, 0x99, 0x11, 0x52, 0xf0, 0xd1, 0x2a, 0x5f,
	0xf4, 0x5f, 0x19, 0x70, 0xfb, 0xc5, 0xbc, 0x0f, 0x5e, 0x7a, 0x53, 0x45, 0x51, 0xb7, 0x94, 0x16,
	0xcf, 0x67, 0x6f, 0x3e, 0x81, 0xcd, 0x28, 0x89, 0x69, 0x45, 0x65, 0xb3, 0xb1, 0x09, 0x6b, 0xea,
	0x65, 0x46, 0x61, 0xe9, 0x98, 0x99, 0x82, 0x99, 0x7f, 0x6d, 0x00, 0x4a, 0x3e, 0x59, 0x94, 0xea,
	0xbc, 0xe0, 0x3d, 0xa5, 0xfa, 0x55, 0xbf, 0xa7, 0x98, 0xbf, 0x30, 0xe0, 0x7a, 0x4e, 0x03, 0x5b,
	0xba, 0xb9, 0xbc, 0xf6, 0xb8, 0xfa, 0xe5, 0xda, 0x63, 0x71, 0xa9, 0xb6, 0x0f, 0xfd, 0x41, 0xac,
	0xf6, 0xd2, 0x1d, 0x7c, 0x92, 0xaa, 0xee, 0x54, 0xe8, 0x2a, 0xf8, 0x48, 0x93, 0xe5, 0xf8, 0x9b,
	0xfc, 0x03, 0xc3, 0x53, 0x68, 0xa7, 0x24, 0x1e, 0xd0, 0x31, 0xe5, 0x14, 0xd3, 0x9f, 0x4e, 0x29,
	0xe3, 0x05, 0x47, 0x41, 0x50, 0x3b, 0xa7, 0x97, 0xea, 0x10, 0x0d, 0x2c, 0xc7, 0x22, 0xe8, 0x8b,
	0xdc, 0x90, 0x93, 0x0e, 0xae, 0xc3, 0xaa, 0x5a, 0x99, 0xcd, 0x07, 0xff, 0x6b, 0xa8, 0xde, 0xf3,
	0x0b, 0x24, 0x04, 0x52, 0x9c, 0x10, 0xee, 0x16, 0xe4, 0xad, 0x2f, 0x9e, 0x11, 0x96, 0x7e, 0x03,
	0x19, 0xe1, 0xe7, 0xb0, 0x19, 0x6d, 0x4a, 0xa7, 0x84, 0xef, 0xa5, 0x53, 0x42, 0x61, 0xfe, 0xfd,
	0x6a, 0x72, 0xc2, 0x54, 0x6d, 0x40, 0x74, 0xec, 0xa1, 0xb9, 0xaf, 0xc1, 0x0a, 0x97, 0xa6, 0xd2,
	0x47, 0xd0, 0x33, 0x01, 0x67, 0x67, 0x81, 0xe3, 0x9d, 0xeb, 0x28, 0xa1, 0x67, 0x68, 0x17, 0xae,
	0x4e, 0x02, 0x7a, 0x41, 0x3d, 0x7e, 0xec, 0x78, 0x7d, 0xe7, 0x73, 0xaa, 0x6b, 0xd5, 0x25, 0x89,
	0x95, 0xbb, 0x66, 0xfe, 0xa3, 0x01, 0x57, 0x85, 0xdc, 0x99, 0x6b, 0x53, 0x24, 0xfc, 0x79, 0xce,
	0xc5, 0x79, 0x50, 0xa0, 0x9a, 0xaf, 0xf3, 0xe6, 0xf4, 0xe0, 0x46, 0x5a, 0x64, 0xfa, 0xea, 0x14,
	0x1d, 0x27, 0xef, 0xf2, 0xb8, 0xca, 0x14, 0xc7, 0xfe, 0x45, 0x44, 0x7e, 0x0b, 0x9a, 0xea, 0x0f,
	0x41, 0x87, 0x89, 0xfb, 0x97, 0x04, 0x09, 0x0c, 0x4e, 0x82, 0x11, 0xe5, 0x87, 0x89, 0x2e, 0x3d,
	0x09, 0x4a, 0x6c, 0x61, 0x29, 0xb9, 0x85, 0xdd, 0x7f, 0x5f, 0x83, 0xab, 0x87, 0xfe, 0x40, 0x7d,
	0x7a, 0x70, 0xa9, 0xc7, 0x75, 0xe8, 0x45, 0x3d, 0x68, 0xec, 0x07, 0x94, 0x70, 0x21, 0x01, 0xcd,
	0xed, 0xcb, 0xda, 0xad, 0x7c, 0x8c, 0x9e, 0x6d, 0x56, 0x50, 0x1f, 0xae, 0x28, 0x13, 0x24, 0xf2,
	0x19, 0xfa, 0x76, 0x79, 0xbe, 0x53, 0x04, 0xed, 0x6b, 0x33, 0xff, 0xcd, 0x78, 0xe2, 0x4e, 0xf8,
	0xa5, 0x59, 0x41, 0x3f, 0x87, 0x3b, 0x33, 0x4c, 0x0b, 0x92, 0xf3, 0xc3, 0x45, 0x44, 0xe5, 0xd3,
	0x96, 0x6c, 0xe0, 0x19, 0x6c, 0x46, 0x1b, 0xd0, 0x2f, 0x7c, 0x66, 0x59, 0x03, 0x39, 0xf7, 0x44,
	0xa7, 0x80, 0x22, 0x86, 0xf1, 0x97, 0x81, 0x82, 0x17, 0xd1, 0x4c, 0x1e, 0x2e, 0x61, 0x6b, 0xc1,
	0xf5, 0x88, 0xed, 0xcc, 0x9f, 0x57, 0xde, 0x59, 0x2c, 0xe3, 0xcd, 0x15, 0x72, 0x24, 0x5f, 0xf2,
	0x6c, 0x51, 0x10, 0xa2, 0x1b, 0x25, 0x45, 0x78, 0xfb, 0x76, 0xc9, 0xa2, 0x0a, 0x7d, 0x66, 0x05,
	0x3d, 0x82, 0x55, 0xcd, 0x0d, 0x15, 0xfa, 0x55, 0xbb, 0xa0, 0x4a, 0x36, 0x2b, 0xe8, 0x63, 0x80,
	0xb8, 0x40, 0x2d, 0xe1, 0xb0, 0xb3, 0x68, 0xa3, 0x6b, 0x56, 0xde, 0x33, 0xd0, 0x67, 0xd0, 0x4c,
	0x94, 0xbd, 0xe8, 0x5b, 0x0b, 0x94, 0xc5, 0xaf, 0x29, 0xe1, 0x11, 0xac, 0x8a, 0x08, 0x3c, 0xef,
	0xd8, 0x45, 0x36, 0x78, 0x0e, 0xdb, 0x91, 0xa1, 0x13, 0xde, 0xff, 0xf6, 0x62, 0x85, 0x45, 0x09,
	0xe3, 0x3f, 0x83, 0x6d, 0x15, 0xcf, 0xd2, 0x8c, 0xbf, 0x37, 0x8f, 0x71, 0x2a, 0x08, 0x96, 0xf0,
	0xff, 0x50, 0x39, 0x8f, 0x7c, 0x79, 0xbc, 0x5e, 0x10, 0xcd, 0x7b, 0x76, 0xbb, 0x28, 0x07, 0xca,
	0xbb, 0xd8, 0x08, 0x39, 0x30, 0xf4, 0x66, 0x59, 0xce, 0x6f, 0x9b, 0x65, 0xab, 0x91, 0x07, 0x76,
	0xa1, 0x2e, 0x4c, 0x21, 0xb7, 0x54, 0x44, 0x91, 0xc8, 0x96, 0x25, 0x87, 0xfb, 0x63, 0xb8, 0xaa,
	0x14, 0x9c, 0x4e, 0x10, 0xe8, 0xce, 0x82, 0x69, 0xab, 0x84, 0xf5, 0x67, 0x70, 0x55, 0xa9, 0x38,
	0xc3, 0xba, 0x33, 0x97, 0xf5, 0xa2, 0x96, 0xe9, 0x42, 0x5d, 0x24, 0xa2, 0x52, 0x35, 0x24, 0x32,
	0x55, 0x31, 0xa7, 0xbd, 0x7b, 0xf0, 0xcd, 0x59, 0xf2, 0x51, 0x30, 0xb1, 0x14, 0xea, 0x88, 0x7a,
	0x7b, 0x75, 0x15, 0xd6, 0xb8, 0x7f, 0x62, 0xfc, 0x78, 0x59, 0x22, 0x0c, 0x56, 0xe4, 0xe2, 0xdd,
	0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x96, 0x96, 0x9b, 0xd5, 0x3b, 0x31, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JobManagementServiceClient is the client API for JobManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobManagementServiceClient interface {
	/// Create a new job
	CreateJob(ctx context.Context, in *JobDescriptor, opts ...grpc.CallOption) (*JobId, error)
	/// Modify the number of instances for a service job.
	UpdateJobCapacity(ctx context.Context, in *JobCapacityUpdate, opts ...grpc.CallOption) (*empty.Empty, error)
	/// Modify job capacity for a service job. It allows you to specify only values (min / max / desired) that need to be updated.
	UpdateJobCapacityWithOptionalAttributes(ctx context.Context, in *JobCapacityUpdateWithOptionalAttributes, opts ...grpc.CallOption) (*empty.Empty, error)
	/// Mark a job as enabled or disabled. Disabled jobs are not auto-scaled.
	UpdateJobStatus(ctx context.Context, in *JobStatusUpdate, opts ...grpc.CallOption) (*empty.Empty, error)
	/// Update service job processes such as disable increase/decrease instance count
	UpdateJobProcesses(ctx context.Context, in *JobProcessesUpdate, opts ...grpc.CallOption) (*empty.Empty, error)
	/// Update a job disruption budget.
	UpdateJobDisruptionBudget(ctx context.Context, in *JobDisruptionBudgetUpdate, opts ...grpc.CallOption) (*empty.Empty, error)
	// Return a collection of jobs matching the given criteria. The query result is limited to the active data set.
	// Finished jobs/tasks are not evaluated when the query is executed.
	FindJobs(ctx context.Context, in *JobQuery, opts ...grpc.CallOption) (*JobQueryResult, error)
	/// Return a job with given id.
	FindJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*Job, error)
	/// On subscription, sends complete job (definition and active tasks). Next, send distinct job definition
	// or task state chage notifications. The stream is closed by the server only when the job is finished, which
	// happens after the 'JobFinished' notification is delivered.
	ObserveJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (JobManagementService_ObserveJobClient, error)
	/// Equivalent to ObserveJob, applied to all active jobs. This stream never completes.
	ObserveJobs(ctx context.Context, in *ObserveJobsQuery, opts ...grpc.CallOption) (JobManagementService_ObserveJobsClient, error)
	/// Terminate all running tasks of a job, and than terminate the job.
	KillJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*empty.Empty, error)
	/// Update the attributes of a job. This will either create new attributes or replace existing ones with the same key.
	UpdateJobAttributes(ctx context.Context, in *JobAttributesUpdate, opts ...grpc.CallOption) (*empty.Empty, error)
	/// Delete the attributes of a job.
	DeleteJobAttributes(ctx context.Context, in *JobAttributesDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	/// Get a task with the specified id.
	FindTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error)
	// Return a collection of tasks specified in the 'TaskQuery' request matching the given criteria. The query result is
	// limited to the active data set. Finished jobs/tasks are not evaluated when the query is executed.
	FindTasks(ctx context.Context, in *TaskQuery, opts ...grpc.CallOption) (*TaskQueryResult, error)
	/// Terminate a task with the given id. Depending on job type, the task might be immediately restarted/replaced with a new one.
	KillTask(ctx context.Context, in *TaskKillRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	/// Update the attributes of a task. This will either create new attributes or replace existing ones with the same key.
	UpdateTaskAttributes(ctx context.Context, in *TaskAttributesUpdate, opts ...grpc.CallOption) (*empty.Empty, error)
	/// Delete the attributes of a task.
	DeleteTaskAttributes(ctx context.Context, in *TaskAttributesDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	/// Move a task from one service job to another. Source and destination jobs must be service jobs, and compatible.
	// Jobs are compatible when their JobDescriptors are identical, ignoring the following values:
	//
	// * owner
	// * applicationName
	// * jobGroupInfo (stack, details, sequence)
	// * disruptionBudget
	// * Any attributes not prefixed with `titus.` or `titusParameter.`
	// * Any container.attributes not prefixed with `titus.` or `titusParameter.`
	// * All information specific to service jobs (JobSpec): Capacity, RetryPolicy, MigrationPolicy, etc
	MoveTask(ctx context.Context, in *TaskMoveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type jobManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobManagementServiceClient(cc grpc.ClientConnInterface) JobManagementServiceClient {
	return &jobManagementServiceClient{cc}
}

func (c *jobManagementServiceClient) CreateJob(ctx context.Context, in *JobDescriptor, opts ...grpc.CallOption) (*JobId, error) {
	out := new(JobId)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateJobCapacity(ctx context.Context, in *JobCapacityUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateJobCapacity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateJobCapacityWithOptionalAttributes(ctx context.Context, in *JobCapacityUpdateWithOptionalAttributes, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateJobCapacityWithOptionalAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateJobStatus(ctx context.Context, in *JobStatusUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateJobProcesses(ctx context.Context, in *JobProcessesUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateJobProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateJobDisruptionBudget(ctx context.Context, in *JobDisruptionBudgetUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateJobDisruptionBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) FindJobs(ctx context.Context, in *JobQuery, opts ...grpc.CallOption) (*JobQueryResult, error) {
	out := new(JobQueryResult)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/FindJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) FindJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/FindJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) ObserveJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (JobManagementService_ObserveJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JobManagementService_serviceDesc.Streams[0], "/com.netflix.titus.JobManagementService/ObserveJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobManagementServiceObserveJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobManagementService_ObserveJobClient interface {
	Recv() (*JobChangeNotification, error)
	grpc.ClientStream
}

type jobManagementServiceObserveJobClient struct {
	grpc.ClientStream
}

func (x *jobManagementServiceObserveJobClient) Recv() (*JobChangeNotification, error) {
	m := new(JobChangeNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobManagementServiceClient) ObserveJobs(ctx context.Context, in *ObserveJobsQuery, opts ...grpc.CallOption) (JobManagementService_ObserveJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JobManagementService_serviceDesc.Streams[1], "/com.netflix.titus.JobManagementService/ObserveJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobManagementServiceObserveJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobManagementService_ObserveJobsClient interface {
	Recv() (*JobChangeNotification, error)
	grpc.ClientStream
}

type jobManagementServiceObserveJobsClient struct {
	grpc.ClientStream
}

func (x *jobManagementServiceObserveJobsClient) Recv() (*JobChangeNotification, error) {
	m := new(JobChangeNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobManagementServiceClient) KillJob(ctx context.Context, in *JobId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/KillJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateJobAttributes(ctx context.Context, in *JobAttributesUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateJobAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) DeleteJobAttributes(ctx context.Context, in *JobAttributesDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/DeleteJobAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) FindTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/FindTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) FindTasks(ctx context.Context, in *TaskQuery, opts ...grpc.CallOption) (*TaskQueryResult, error) {
	out := new(TaskQueryResult)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/FindTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) KillTask(ctx context.Context, in *TaskKillRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/KillTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) UpdateTaskAttributes(ctx context.Context, in *TaskAttributesUpdate, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/UpdateTaskAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) DeleteTaskAttributes(ctx context.Context, in *TaskAttributesDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/DeleteTaskAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementServiceClient) MoveTask(ctx context.Context, in *TaskMoveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.JobManagementService/MoveTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobManagementServiceServer is the server API for JobManagementService service.
type JobManagementServiceServer interface {
	/// Create a new job
	CreateJob(context.Context, *JobDescriptor) (*JobId, error)
	/// Modify the number of instances for a service job.
	UpdateJobCapacity(context.Context, *JobCapacityUpdate) (*empty.Empty, error)
	/// Modify job capacity for a service job. It allows you to specify only values (min / max / desired) that need to be updated.
	UpdateJobCapacityWithOptionalAttributes(context.Context, *JobCapacityUpdateWithOptionalAttributes) (*empty.Empty, error)
	/// Mark a job as enabled or disabled. Disabled jobs are not auto-scaled.
	UpdateJobStatus(context.Context, *JobStatusUpdate) (*empty.Empty, error)
	/// Update service job processes such as disable increase/decrease instance count
	UpdateJobProcesses(context.Context, *JobProcessesUpdate) (*empty.Empty, error)
	/// Update a job disruption budget.
	UpdateJobDisruptionBudget(context.Context, *JobDisruptionBudgetUpdate) (*empty.Empty, error)
	// Return a collection of jobs matching the given criteria. The query result is limited to the active data set.
	// Finished jobs/tasks are not evaluated when the query is executed.
	FindJobs(context.Context, *JobQuery) (*JobQueryResult, error)
	/// Return a job with given id.
	FindJob(context.Context, *JobId) (*Job, error)
	/// On subscription, sends complete job (definition and active tasks). Next, send distinct job definition
	// or task state chage notifications. The stream is closed by the server only when the job is finished, which
	// happens after the 'JobFinished' notification is delivered.
	ObserveJob(*JobId, JobManagementService_ObserveJobServer) error
	/// Equivalent to ObserveJob, applied to all active jobs. This stream never completes.
	ObserveJobs(*ObserveJobsQuery, JobManagementService_ObserveJobsServer) error
	/// Terminate all running tasks of a job, and than terminate the job.
	KillJob(context.Context, *JobId) (*empty.Empty, error)
	/// Update the attributes of a job. This will either create new attributes or replace existing ones with the same key.
	UpdateJobAttributes(context.Context, *JobAttributesUpdate) (*empty.Empty, error)
	/// Delete the attributes of a job.
	DeleteJobAttributes(context.Context, *JobAttributesDeleteRequest) (*empty.Empty, error)
	/// Get a task with the specified id.
	FindTask(context.Context, *TaskId) (*Task, error)
	// Return a collection of tasks specified in the 'TaskQuery' request matching the given criteria. The query result is
	// limited to the active data set. Finished jobs/tasks are not evaluated when the query is executed.
	FindTasks(context.Context, *TaskQuery) (*TaskQueryResult, error)
	/// Terminate a task with the given id. Depending on job type, the task might be immediately restarted/replaced with a new one.
	KillTask(context.Context, *TaskKillRequest) (*empty.Empty, error)
	/// Update the attributes of a task. This will either create new attributes or replace existing ones with the same key.
	UpdateTaskAttributes(context.Context, *TaskAttributesUpdate) (*empty.Empty, error)
	/// Delete the attributes of a task.
	DeleteTaskAttributes(context.Context, *TaskAttributesDeleteRequest) (*empty.Empty, error)
	/// Move a task from one service job to another. Source and destination jobs must be service jobs, and compatible.
	// Jobs are compatible when their JobDescriptors are identical, ignoring the following values:
	//
	// * owner
	// * applicationName
	// * jobGroupInfo (stack, details, sequence)
	// * disruptionBudget
	// * Any attributes not prefixed with `titus.` or `titusParameter.`
	// * Any container.attributes not prefixed with `titus.` or `titusParameter.`
	// * All information specific to service jobs (JobSpec): Capacity, RetryPolicy, MigrationPolicy, etc
	MoveTask(context.Context, *TaskMoveRequest) (*empty.Empty, error)
}

// UnimplementedJobManagementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedJobManagementServiceServer struct {
}

func (*UnimplementedJobManagementServiceServer) CreateJob(ctx context.Context, req *JobDescriptor) (*JobId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (*UnimplementedJobManagementServiceServer) UpdateJobCapacity(ctx context.Context, req *JobCapacityUpdate) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobCapacity not implemented")
}
func (*UnimplementedJobManagementServiceServer) UpdateJobCapacityWithOptionalAttributes(ctx context.Context, req *JobCapacityUpdateWithOptionalAttributes) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobCapacityWithOptionalAttributes not implemented")
}
func (*UnimplementedJobManagementServiceServer) UpdateJobStatus(ctx context.Context, req *JobStatusUpdate) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobStatus not implemented")
}
func (*UnimplementedJobManagementServiceServer) UpdateJobProcesses(ctx context.Context, req *JobProcessesUpdate) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobProcesses not implemented")
}
func (*UnimplementedJobManagementServiceServer) UpdateJobDisruptionBudget(ctx context.Context, req *JobDisruptionBudgetUpdate) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobDisruptionBudget not implemented")
}
func (*UnimplementedJobManagementServiceServer) FindJobs(ctx context.Context, req *JobQuery) (*JobQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindJobs not implemented")
}
func (*UnimplementedJobManagementServiceServer) FindJob(ctx context.Context, req *JobId) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindJob not implemented")
}
func (*UnimplementedJobManagementServiceServer) ObserveJob(req *JobId, srv JobManagementService_ObserveJobServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveJob not implemented")
}
func (*UnimplementedJobManagementServiceServer) ObserveJobs(req *ObserveJobsQuery, srv JobManagementService_ObserveJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveJobs not implemented")
}
func (*UnimplementedJobManagementServiceServer) KillJob(ctx context.Context, req *JobId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillJob not implemented")
}
func (*UnimplementedJobManagementServiceServer) UpdateJobAttributes(ctx context.Context, req *JobAttributesUpdate) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobAttributes not implemented")
}
func (*UnimplementedJobManagementServiceServer) DeleteJobAttributes(ctx context.Context, req *JobAttributesDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobAttributes not implemented")
}
func (*UnimplementedJobManagementServiceServer) FindTask(ctx context.Context, req *TaskId) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTask not implemented")
}
func (*UnimplementedJobManagementServiceServer) FindTasks(ctx context.Context, req *TaskQuery) (*TaskQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTasks not implemented")
}
func (*UnimplementedJobManagementServiceServer) KillTask(ctx context.Context, req *TaskKillRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillTask not implemented")
}
func (*UnimplementedJobManagementServiceServer) UpdateTaskAttributes(ctx context.Context, req *TaskAttributesUpdate) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskAttributes not implemented")
}
func (*UnimplementedJobManagementServiceServer) DeleteTaskAttributes(ctx context.Context, req *TaskAttributesDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskAttributes not implemented")
}
func (*UnimplementedJobManagementServiceServer) MoveTask(ctx context.Context, req *TaskMoveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveTask not implemented")
}

func RegisterJobManagementServiceServer(s *grpc.Server, srv JobManagementServiceServer) {
	s.RegisterService(&_JobManagementService_serviceDesc, srv)
}

func _JobManagementService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).CreateJob(ctx, req.(*JobDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateJobCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCapacityUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateJobCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateJobCapacity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateJobCapacity(ctx, req.(*JobCapacityUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateJobCapacityWithOptionalAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobCapacityUpdateWithOptionalAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateJobCapacityWithOptionalAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateJobCapacityWithOptionalAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateJobCapacityWithOptionalAttributes(ctx, req.(*JobCapacityUpdateWithOptionalAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatusUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateJobStatus(ctx, req.(*JobStatusUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateJobProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobProcessesUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateJobProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateJobProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateJobProcesses(ctx, req.(*JobProcessesUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateJobDisruptionBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDisruptionBudgetUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateJobDisruptionBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateJobDisruptionBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateJobDisruptionBudget(ctx, req.(*JobDisruptionBudgetUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_FindJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).FindJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/FindJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).FindJobs(ctx, req.(*JobQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_FindJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).FindJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/FindJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).FindJob(ctx, req.(*JobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_ObserveJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobManagementServiceServer).ObserveJob(m, &jobManagementServiceObserveJobServer{stream})
}

type JobManagementService_ObserveJobServer interface {
	Send(*JobChangeNotification) error
	grpc.ServerStream
}

type jobManagementServiceObserveJobServer struct {
	grpc.ServerStream
}

func (x *jobManagementServiceObserveJobServer) Send(m *JobChangeNotification) error {
	return x.ServerStream.SendMsg(m)
}

func _JobManagementService_ObserveJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveJobsQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobManagementServiceServer).ObserveJobs(m, &jobManagementServiceObserveJobsServer{stream})
}

type JobManagementService_ObserveJobsServer interface {
	Send(*JobChangeNotification) error
	grpc.ServerStream
}

type jobManagementServiceObserveJobsServer struct {
	grpc.ServerStream
}

func (x *jobManagementServiceObserveJobsServer) Send(m *JobChangeNotification) error {
	return x.ServerStream.SendMsg(m)
}

func _JobManagementService_KillJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).KillJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/KillJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).KillJob(ctx, req.(*JobId))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateJobAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobAttributesUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateJobAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateJobAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateJobAttributes(ctx, req.(*JobAttributesUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_DeleteJobAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobAttributesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).DeleteJobAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/DeleteJobAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).DeleteJobAttributes(ctx, req.(*JobAttributesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_FindTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).FindTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/FindTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).FindTask(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_FindTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).FindTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/FindTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).FindTasks(ctx, req.(*TaskQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_KillTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskKillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).KillTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/KillTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).KillTask(ctx, req.(*TaskKillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_UpdateTaskAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAttributesUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).UpdateTaskAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/UpdateTaskAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).UpdateTaskAttributes(ctx, req.(*TaskAttributesUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_DeleteTaskAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAttributesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).DeleteTaskAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/DeleteTaskAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).DeleteTaskAttributes(ctx, req.(*TaskAttributesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagementService_MoveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServiceServer).MoveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.JobManagementService/MoveTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServiceServer).MoveTask(ctx, req.(*TaskMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.netflix.titus.JobManagementService",
	HandlerType: (*JobManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _JobManagementService_CreateJob_Handler,
		},
		{
			MethodName: "UpdateJobCapacity",
			Handler:    _JobManagementService_UpdateJobCapacity_Handler,
		},
		{
			MethodName: "UpdateJobCapacityWithOptionalAttributes",
			Handler:    _JobManagementService_UpdateJobCapacityWithOptionalAttributes_Handler,
		},
		{
			MethodName: "UpdateJobStatus",
			Handler:    _JobManagementService_UpdateJobStatus_Handler,
		},
		{
			MethodName: "UpdateJobProcesses",
			Handler:    _JobManagementService_UpdateJobProcesses_Handler,
		},
		{
			MethodName: "UpdateJobDisruptionBudget",
			Handler:    _JobManagementService_UpdateJobDisruptionBudget_Handler,
		},
		{
			MethodName: "FindJobs",
			Handler:    _JobManagementService_FindJobs_Handler,
		},
		{
			MethodName: "FindJob",
			Handler:    _JobManagementService_FindJob_Handler,
		},
		{
			MethodName: "KillJob",
			Handler:    _JobManagementService_KillJob_Handler,
		},
		{
			MethodName: "UpdateJobAttributes",
			Handler:    _JobManagementService_UpdateJobAttributes_Handler,
		},
		{
			MethodName: "DeleteJobAttributes",
			Handler:    _JobManagementService_DeleteJobAttributes_Handler,
		},
		{
			MethodName: "FindTask",
			Handler:    _JobManagementService_FindTask_Handler,
		},
		{
			MethodName: "FindTasks",
			Handler:    _JobManagementService_FindTasks_Handler,
		},
		{
			MethodName: "KillTask",
			Handler:    _JobManagementService_KillTask_Handler,
		},
		{
			MethodName: "UpdateTaskAttributes",
			Handler:    _JobManagementService_UpdateTaskAttributes_Handler,
		},
		{
			MethodName: "DeleteTaskAttributes",
			Handler:    _JobManagementService_DeleteTaskAttributes_Handler,
		},
		{
			MethodName: "MoveTask",
			Handler:    _JobManagementService_MoveTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveJob",
			Handler:       _JobManagementService_ObserveJob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveJobs",
			Handler:       _JobManagementService_ObserveJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "netflix/titus/titus_job_api.proto",
}

syntax = "proto3";
package com.netflix.titus.executor.vpc;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "netflix/titus/titus_base.proto";

option go_package = "github.com/Netflix/titus-executor/vpc/api";

message Address {
    string address = 1;
}

// This is embedded in responses / replies so that a given IP Service Server may cache data from AWS. Since the client
// is the only one ever going to make requests for that given ENI, it can take a lock on that ENI. If the cache version
// the client presents is not present, or it is different from the one the server has, the server must refresh its
// state from AWS
message CacheVersion {
    bytes uuid = 1;
}

message NetworkInterfaceAttachment {
    // 0-indexed
    uint32 deviceIndex = 1;
    string id = 2;
};

message NetworkInterface {
    string subnetId = 1;
    string availabilityZone = 2;
    string macAddress = 3;
    string networkInterfaceId = 4;
    string ownerAccountId = 5;
    NetworkInterfaceAttachment networkInterfaceAttachment = 7;
    string vpcId = 8;
};

message InstanceIdentity {
    // This is duplicated data , but we include it for verification beyond Metatron. No containers should run
    // on the instance prior to this API call being completed. We can then rely on the instance
    // identity document for further verification.
    string instanceIdentityDocument = 1;
    string instanceIdentitySignature = 2;
    string instanceID = 3;
    string region = 4;
    string accountID = 5;
    string instanceType = 6;
}

// ProvisionInstanceRequest is called when the instance is first initialized, in order to configure its interfaces,
// and other network capabilities.
// The provisioning service decides which account / subnet / VPC the interface will live in.
message ProvisionInstanceRequest {
    InstanceIdentity instanceIdentity = 1;
    // If accountID and subnetID are not specified then the titusvpcservice will decide on their behalf
    string accountID = 2;
    string subnetID = 3;
};

message ProvisionInstanceResponse {
    // In this, the deviceIndex, macAddress, and networkInterfaceId must be unique in this list.
    repeated NetworkInterface networkInterfaces = 1;
    CacheVersion cacheVersion = 2;
};

message ProvisionInstanceRequestV3 {
    InstanceIdentity instanceIdentity = 1;
}

message ProvisionInstanceResponseV3 {
    NetworkInterface trunkNetworkInterface = 1;
};

message UtilizedAddress {
    Address address = 1;
    google.protobuf.Timestamp lastUsedTime = 2;
}

message AssignIPRequest {
    CacheVersion cacheVersion = 1;
    NetworkInterfaceAttachment networkInterfaceAttachment = 3;
    repeated string securityGroupIds = 4;
    bool ipv6AddressRequested = 5;
    repeated UtilizedAddress utilizedAddresses = 6;
    InstanceIdentity instanceIdentity = 7;
    bool allowSecurityGroupChange = 8;
    // This is optional. If it is not specified then we will assign a "random" IP to the interface
    repeated com.netflix.titus.SignedAddressAllocation signedAddressAllocations = 9;
};

message AssignIPResponse {
    CacheVersion cacheVersion = 1;
    // A batch of IPs may be given back. It is up to the client to figure out what IPs it can use.
    repeated UsableAddress usableAddresses = 2;
    NetworkInterface networkInterface = 3;
    repeated string securityGroupIds = 4;
};

message elasticAddressSet {
    repeated string elasticAddresses = 1;
};

message AssignIPRequestV3 {
    string taskId = 1;
    repeated string securityGroupIds = 2;
    oneof ipv6 {
        bool ipv6AddressRequested = 3;
        google.protobuf.Empty noIPv6AddressRequested = 19;
    }
    oneof ipv4 {
        bool ipv4AddressRequested = 4;
        com.netflix.titus.SignedAddressAllocation ipv4SignedAddressAllocation = 5;
        google.protobuf.Empty transitionRequested = 17;
    }
    repeated string subnets = 7;
    // This identifies the trunk ENI
    InstanceIdentity instanceIdentity = 8;
    string accountID = 9;
    oneof elasticAddress {
        google.protobuf.Empty empty = 10;
        elasticAddressSet elasticAdddresses  = 11;
        string groupName = 12;
    }

    // If this assignment ID already exists in the database, then return that assignment.
    // If that assignment was not completed, then we will try to unassign it and re-assign it.
    bool idempotent = 13;
    // Jumbo: I want "default routes" with an MTU of "Jumbo"
    bool jumbo = 14;
    bool burst = 15;
    // bandwidth is in bits per second
    uint64 bandwidth = 16;
};

message ElasticAddress {
    string ip = 1;
    string allocationId = 2;
    string associationdId = 3;
}

message AssignIPResponseV3 {
    // Right now this is just to over-ride the MTU per-route.
    message Route {
        enum Family {
            IPv4 = 0;
            IPv6 = 1;
        }
        // Destination, formatted as CIDR, like 10.0.0.0/8. Unfortunately, this is somewhat ambigious
        // because say 10.0.250.0/8 is kind of equivalent from a routing perspective
        string destination = 1;
        // mtu of 0 is default
        uint32 mtu = 2;
        Family family = 3;
    }
    message Bandwidth {
        // bandwidth is in bits per second
        uint64 bandwidth = 1;
        // burst is the HTB class's ceil in bits per second
        uint64 burst = 2;
    }
    message TransitionAssignment {
        string assignmentId = 1;
        // TODO: Add mark.
        repeated Route routes = 2;
        UsableAddress ipv4address = 3;
    }

    UsableAddress ipv4address = 1;
    UsableAddress ipv6address = 2;
    NetworkInterface branchNetworkInterface = 3;
    NetworkInterface trunkNetworkInterface = 4;
    uint32 vlanId = 5;
    ElasticAddress elasticAddress = 6;
    uint32 classId = 7;
    // Routes act as overrides. There may be an override for default, but it if it not present, one should still be
    // assigned.
    repeated Route routes = 9;
    Bandwidth bandwidth = 10;
    TransitionAssignment transitionAssignment = 11;
};

message Error {
    string error = 1;
}

// This is for storage of an assignment in the titus executor.
message Assignment {
    oneof assignment {
        AssignIPResponseV3 assignIPResponseV3 = 1;
    }
}

// This is the serialized output of the VPC Tool
message VPCToolResult {
    oneof result {
        Assignment assignment = 1;
        Error error = 2;
    }
}

message UnassignIPRequestV3 {
    string taskId = 1;
};

message UnassignIPResponseV3 {
};

message UsableAddress {
    Address address = 1;
    uint32 prefixLength = 2;
};

// AddressGCMetadata is sent when the instance requests that the IP Service GC it. It's basically a way to
// indicate when the IP was last used, and we can GC it based on that metadata.
message GCRequest {
    CacheVersion cacheVersion = 1;
    InstanceIdentity instanceIdentity = 2;
    NetworkInterfaceAttachment networkInterfaceAttachment = 3;
    // unallocatedAddresses are addresses we were able to take a lock on
    repeated UtilizedAddress unallocatedAddresses = 4;
    // nonviableAddresses are addresses which we found found in the store, but we decided not to nominate
    // for GC, because they've been bumped recently
    repeated UtilizedAddress nonviableAddresses = 5;
    // allocatedAddresses are addresses currently in use.
    repeated UtilizedAddress allocatedAddresses = 6;
}

message GCResponse {
    CacheVersion cacheVersion = 1;
    repeated Address addressToBump = 2;
    repeated Address addressToDelete = 3;
}

message GCRequestV3 {
    InstanceIdentity instanceIdentity = 1;
    repeated string runningTaskIDs = 2;
    // Soft indicates that do not perform the actual GC, only return the task IDs that would be GC'd
    bool soft = 3 [deprecated = true];
}

message GCResponseV3 {
    // assignmentsToRemove returns which assignments *should be* removed.
    repeated string assignmentsToRemove = 1;
}

message RefreshIPRequest {
    repeated UtilizedAddress utilizedAddress = 1;
    NetworkInterface branchNetworkInterface = 2;
}

message RefreshIPResponse {
    google.protobuf.Duration nextRefresh = 1;
}

message GCSetupRequest {
    InstanceIdentity instanceIdentity = 1;
}

message GCSetupResponse {
    repeated NetworkInterfaceAttachment networkInterfaceAttachment = 1;
}

message GCLegacySetupRequest {
    InstanceIdentity instanceIdentity = 1;
}

message GCLegacySetupResponse {
    repeated NetworkInterfaceAttachment networkInterfaceAttachment = 1;
}

message LockId {
    int64 id = 1;
}

message Lock {
    int64 id = 1;
    string lockName = 2;
    string heldBy = 3;
    google.protobuf.Timestamp heldUntil = 4;
}

message GetLocksRequest {

}

message GetLocksResponse {
    repeated Lock locks = 1;
}

message PreemptLockRequest {
    string lockName = 1;
}

message AssociateTrunkNetworkInterfaceRequest {
    oneof trunkNetworkInterfaceIdentifier {
        InstanceIdentity instanceIdentity = 1;
        string trunkENI = 2;
    }
    string branchENI = 3;
    uint64 vlanId = 4;
}

message AssociateTrunkNetworkInterfaceResponse {
    string associationId = 1;
}

message DisassociateTrunkNetworkInterfaceRequest {
    oneof key {
        string associationId = 1;
    }
    bool force = 2;
}

message DisassociateTrunkNetworkInterfaceResponse {
}

message DescribeTrunkNetworkInterfaceRequest {
    oneof trunkNetworkInterfaceIdentifier {
        InstanceIdentity instanceIdentity = 1;
        string trunkENI = 2;
    }
}

message DescribeTrunkNetworkInterfaceResponse {
    message TrunkENI {
        string id = 1;
        string accountId = 2;
        string az = 3;
        google.protobuf.Timestamp createdAt = 4;
        string subnetId = 5;
        string vpcId = 6;
        string region = 7;
    }

    message BranchENI {
        string id = 1;
        google.protobuf.Timestamp createdAt = 2;
        string accountId = 3;
        string subnetId = 4;
        string vpcId = 5;
        repeated string securityGroupIds = 6;
        google.protobuf.Timestamp modifiedAt = 7;
        google.protobuf.Timestamp lastAssignedTo = 8;
    }

    message TrunkNetworkInterfaceAssociation {
        uint64 vlanId = 1;
        string associationId = 2;
        BranchENI branchENI = 3;
    }

    TrunkENI trunkENI = 1;
    repeated TrunkNetworkInterfaceAssociation associations = 2;
}

message DetachBranchNetworkInterfaceRequest {
    oneof trunkNetworkInterfaceIdentifier {
        InstanceIdentity instanceIdentity = 1;
    }
}

message DetachBranchNetworkInterfaceResponse {
    uint64 vlanId = 1;
    string branchENI = 2;
    string associationID = 3;
}

message GetAssignmentRequest {
    string taskId = 1;
}

message GetAssignmentResponse {
    AssignIPResponseV3 assignment = 1;
}

message SecurityGroupRequest {
    string sgId = 1;
}

service TitusAgentVPCService {
    // This ProvisionInstance function has to be called at startup of the instance, and it is idempotent.
    rpc ProvisionInstance (ProvisionInstanceRequest) returns (ProvisionInstanceResponse);
    rpc ProvisionInstanceV3 (ProvisionInstanceRequestV3) returns (ProvisionInstanceResponseV3);

    rpc AssignIP (AssignIPRequest) returns (AssignIPResponse);
    rpc AssignIPV3 (AssignIPRequestV3) returns (AssignIPResponseV3);
    rpc UnassignIPV3 (UnassignIPRequestV3) returns (UnassignIPResponseV3);
    rpc GetAssignment (GetAssignmentRequest) returns (GetAssignmentResponse);
    rpc GCV3 (GCRequestV3) returns (GCResponseV3);

    // Lock Management
    rpc GetLocks(GetLocksRequest) returns (GetLocksResponse);
    rpc GetLock(LockId) returns (Lock);
    rpc DeleteLock(LockId) returns (google.protobuf.Empty);
    rpc PreemptLock(PreemptLockRequest) returns (google.protobuf.Empty);
    // These are internal APIs that should really only be used by operators
    rpc AssociateTrunkNetworkInterface (AssociateTrunkNetworkInterfaceRequest) returns (AssociateTrunkNetworkInterfaceResponse);
    rpc DisassociateTrunkNetworkInterface (DisassociateTrunkNetworkInterfaceRequest) returns (DisassociateTrunkNetworkInterfaceResponse);
    rpc DescribeTrunkNetworkInterface (DescribeTrunkNetworkInterfaceRequest) returns (DescribeTrunkNetworkInterfaceResponse);
    rpc DetachBranchNetworkInterface (DetachBranchNetworkInterfaceRequest) returns (DetachBranchNetworkInterfaceResponse);
    rpc ResetSecurityGroup(SecurityGroupRequest) returns (None);
}

message PrivateKey {
    string hostname = 1;
    google.protobuf.Timestamp generated = 2;
    message Ed25519Key {
        bytes rfc8032key = 1;
    };
    oneof key {
        Ed25519Key ed25519Key = 3;
    };
}

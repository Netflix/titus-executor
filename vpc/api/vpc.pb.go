// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: vpc.proto

package api

import (
	reflect "reflect"
	sync "sync"

	titus "github.com/Netflix/titus-executor/api/netflix/titus"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssignIPResponseV3_Route_Family int32

const (
	AssignIPResponseV3_Route_IPv4 AssignIPResponseV3_Route_Family = 0
	AssignIPResponseV3_Route_IPv6 AssignIPResponseV3_Route_Family = 1
)

// Enum value maps for AssignIPResponseV3_Route_Family.
var (
	AssignIPResponseV3_Route_Family_name = map[int32]string{
		0: "IPv4",
		1: "IPv6",
	}
	AssignIPResponseV3_Route_Family_value = map[string]int32{
		"IPv4": 0,
		"IPv6": 1,
	}
)

func (x AssignIPResponseV3_Route_Family) Enum() *AssignIPResponseV3_Route_Family {
	p := new(AssignIPResponseV3_Route_Family)
	*p = x
	return p
}

func (x AssignIPResponseV3_Route_Family) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssignIPResponseV3_Route_Family) Descriptor() protoreflect.EnumDescriptor {
	return file_vpc_proto_enumTypes[0].Descriptor()
}

func (AssignIPResponseV3_Route_Family) Type() protoreflect.EnumType {
	return &file_vpc_proto_enumTypes[0]
}

func (x AssignIPResponseV3_Route_Family) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssignIPResponseV3_Route_Family.Descriptor instead.
func (AssignIPResponseV3_Route_Family) EnumDescriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{15, 0, 0}
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// This is embedded in responses / replies so that a given IP Service Server may cache data from AWS. Since the client
// is the only one ever going to make requests for that given ENI, it can take a lock on that ENI. If the cache version
// the client presents is not present, or it is different from the one the server has, the server must refresh its
// state from AWS
type CacheVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *CacheVersion) Reset() {
	*x = CacheVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheVersion) ProtoMessage() {}

func (x *CacheVersion) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheVersion.ProtoReflect.Descriptor instead.
func (*CacheVersion) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{1}
}

func (x *CacheVersion) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

type NetworkInterfaceAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0-indexed
	DeviceIndex uint32 `protobuf:"varint,1,opt,name=deviceIndex,proto3" json:"deviceIndex,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NetworkInterfaceAttachment) Reset() {
	*x = NetworkInterfaceAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterfaceAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterfaceAttachment) ProtoMessage() {}

func (x *NetworkInterfaceAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterfaceAttachment.ProtoReflect.Descriptor instead.
func (*NetworkInterfaceAttachment) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkInterfaceAttachment) GetDeviceIndex() uint32 {
	if x != nil {
		return x.DeviceIndex
	}
	return 0
}

func (x *NetworkInterfaceAttachment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type NetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId                   string                      `protobuf:"bytes,1,opt,name=subnetId,proto3" json:"subnetId,omitempty"`
	AvailabilityZone           string                      `protobuf:"bytes,2,opt,name=availabilityZone,proto3" json:"availabilityZone,omitempty"`
	MacAddress                 string                      `protobuf:"bytes,3,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	NetworkInterfaceId         string                      `protobuf:"bytes,4,opt,name=networkInterfaceId,proto3" json:"networkInterfaceId,omitempty"`
	OwnerAccountId             string                      `protobuf:"bytes,5,opt,name=ownerAccountId,proto3" json:"ownerAccountId,omitempty"`
	NetworkInterfaceAttachment *NetworkInterfaceAttachment `protobuf:"bytes,7,opt,name=networkInterfaceAttachment,proto3" json:"networkInterfaceAttachment,omitempty"`
	VpcId                      string                      `protobuf:"bytes,8,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{3}
}

func (x *NetworkInterface) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *NetworkInterface) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *NetworkInterface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *NetworkInterface) GetNetworkInterfaceId() string {
	if x != nil {
		return x.NetworkInterfaceId
	}
	return ""
}

func (x *NetworkInterface) GetOwnerAccountId() string {
	if x != nil {
		return x.OwnerAccountId
	}
	return ""
}

func (x *NetworkInterface) GetNetworkInterfaceAttachment() *NetworkInterfaceAttachment {
	if x != nil {
		return x.NetworkInterfaceAttachment
	}
	return nil
}

func (x *NetworkInterface) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

type InstanceIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is duplicated data , but we include it for verification beyond Metatron. No containers should run
	// on the instance prior to this API call being completed. We can then rely on the instance
	// identity document for further verification.
	InstanceIdentityDocument  string `protobuf:"bytes,1,opt,name=instanceIdentityDocument,proto3" json:"instanceIdentityDocument,omitempty"`
	InstanceIdentitySignature string `protobuf:"bytes,2,opt,name=instanceIdentitySignature,proto3" json:"instanceIdentitySignature,omitempty"`
	InstanceID                string `protobuf:"bytes,3,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Region                    string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	AccountID                 string `protobuf:"bytes,5,opt,name=accountID,proto3" json:"accountID,omitempty"`
	InstanceType              string `protobuf:"bytes,6,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
}

func (x *InstanceIdentity) Reset() {
	*x = InstanceIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceIdentity) ProtoMessage() {}

func (x *InstanceIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceIdentity.ProtoReflect.Descriptor instead.
func (*InstanceIdentity) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{4}
}

func (x *InstanceIdentity) GetInstanceIdentityDocument() string {
	if x != nil {
		return x.InstanceIdentityDocument
	}
	return ""
}

func (x *InstanceIdentity) GetInstanceIdentitySignature() string {
	if x != nil {
		return x.InstanceIdentitySignature
	}
	return ""
}

func (x *InstanceIdentity) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *InstanceIdentity) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *InstanceIdentity) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *InstanceIdentity) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

// ProvisionInstanceRequest is called when the instance is first initialized, in order to configure its interfaces,
// and other network capabilities.
// The provisioning service decides which account / subnet / VPC the interface will live in.
type ProvisionInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceIdentity *InstanceIdentity `protobuf:"bytes,1,opt,name=instanceIdentity,proto3" json:"instanceIdentity,omitempty"`
	// If accountID and subnetID are not specified then the titusvpcservice will decide on their behalf
	AccountID string `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
	SubnetID  string `protobuf:"bytes,3,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
}

func (x *ProvisionInstanceRequest) Reset() {
	*x = ProvisionInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionInstanceRequest) ProtoMessage() {}

func (x *ProvisionInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionInstanceRequest.ProtoReflect.Descriptor instead.
func (*ProvisionInstanceRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{5}
}

func (x *ProvisionInstanceRequest) GetInstanceIdentity() *InstanceIdentity {
	if x != nil {
		return x.InstanceIdentity
	}
	return nil
}

func (x *ProvisionInstanceRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *ProvisionInstanceRequest) GetSubnetID() string {
	if x != nil {
		return x.SubnetID
	}
	return ""
}

type ProvisionInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In this, the deviceIndex, macAddress, and networkInterfaceId must be unique in this list.
	NetworkInterfaces []*NetworkInterface `protobuf:"bytes,1,rep,name=networkInterfaces,proto3" json:"networkInterfaces,omitempty"`
	CacheVersion      *CacheVersion       `protobuf:"bytes,2,opt,name=cacheVersion,proto3" json:"cacheVersion,omitempty"`
}

func (x *ProvisionInstanceResponse) Reset() {
	*x = ProvisionInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionInstanceResponse) ProtoMessage() {}

func (x *ProvisionInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionInstanceResponse.ProtoReflect.Descriptor instead.
func (*ProvisionInstanceResponse) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{6}
}

func (x *ProvisionInstanceResponse) GetNetworkInterfaces() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *ProvisionInstanceResponse) GetCacheVersion() *CacheVersion {
	if x != nil {
		return x.CacheVersion
	}
	return nil
}

type ProvisionInstanceRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceIdentity *InstanceIdentity `protobuf:"bytes,1,opt,name=instanceIdentity,proto3" json:"instanceIdentity,omitempty"`
}

func (x *ProvisionInstanceRequestV3) Reset() {
	*x = ProvisionInstanceRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionInstanceRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionInstanceRequestV3) ProtoMessage() {}

func (x *ProvisionInstanceRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionInstanceRequestV3.ProtoReflect.Descriptor instead.
func (*ProvisionInstanceRequestV3) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{7}
}

func (x *ProvisionInstanceRequestV3) GetInstanceIdentity() *InstanceIdentity {
	if x != nil {
		return x.InstanceIdentity
	}
	return nil
}

type ProvisionInstanceResponseV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrunkNetworkInterface *NetworkInterface `protobuf:"bytes,1,opt,name=trunkNetworkInterface,proto3" json:"trunkNetworkInterface,omitempty"`
}

func (x *ProvisionInstanceResponseV3) Reset() {
	*x = ProvisionInstanceResponseV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionInstanceResponseV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionInstanceResponseV3) ProtoMessage() {}

func (x *ProvisionInstanceResponseV3) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionInstanceResponseV3.ProtoReflect.Descriptor instead.
func (*ProvisionInstanceResponseV3) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{8}
}

func (x *ProvisionInstanceResponseV3) GetTrunkNetworkInterface() *NetworkInterface {
	if x != nil {
		return x.TrunkNetworkInterface
	}
	return nil
}

type UtilizedAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      *Address               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	LastUsedTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=lastUsedTime,proto3" json:"lastUsedTime,omitempty"`
}

func (x *UtilizedAddress) Reset() {
	*x = UtilizedAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtilizedAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtilizedAddress) ProtoMessage() {}

func (x *UtilizedAddress) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtilizedAddress.ProtoReflect.Descriptor instead.
func (*UtilizedAddress) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{9}
}

func (x *UtilizedAddress) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UtilizedAddress) GetLastUsedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUsedTime
	}
	return nil
}

type AssignIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheVersion               *CacheVersion               `protobuf:"bytes,1,opt,name=cacheVersion,proto3" json:"cacheVersion,omitempty"`
	NetworkInterfaceAttachment *NetworkInterfaceAttachment `protobuf:"bytes,3,opt,name=networkInterfaceAttachment,proto3" json:"networkInterfaceAttachment,omitempty"`
	SecurityGroupIds           []string                    `protobuf:"bytes,4,rep,name=securityGroupIds,proto3" json:"securityGroupIds,omitempty"`
	Ipv6AddressRequested       bool                        `protobuf:"varint,5,opt,name=ipv6AddressRequested,proto3" json:"ipv6AddressRequested,omitempty"`
	UtilizedAddresses          []*UtilizedAddress          `protobuf:"bytes,6,rep,name=utilizedAddresses,proto3" json:"utilizedAddresses,omitempty"`
	InstanceIdentity           *InstanceIdentity           `protobuf:"bytes,7,opt,name=instanceIdentity,proto3" json:"instanceIdentity,omitempty"`
	AllowSecurityGroupChange   bool                        `protobuf:"varint,8,opt,name=allowSecurityGroupChange,proto3" json:"allowSecurityGroupChange,omitempty"`
	// This is optional. If it is not specified then we will assign a "random" IP to the interface
	SignedAddressAllocations []*titus.SignedAddressAllocation `protobuf:"bytes,9,rep,name=signedAddressAllocations,proto3" json:"signedAddressAllocations,omitempty"`
}

func (x *AssignIPRequest) Reset() {
	*x = AssignIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignIPRequest) ProtoMessage() {}

func (x *AssignIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignIPRequest.ProtoReflect.Descriptor instead.
func (*AssignIPRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{10}
}

func (x *AssignIPRequest) GetCacheVersion() *CacheVersion {
	if x != nil {
		return x.CacheVersion
	}
	return nil
}

func (x *AssignIPRequest) GetNetworkInterfaceAttachment() *NetworkInterfaceAttachment {
	if x != nil {
		return x.NetworkInterfaceAttachment
	}
	return nil
}

func (x *AssignIPRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *AssignIPRequest) GetIpv6AddressRequested() bool {
	if x != nil {
		return x.Ipv6AddressRequested
	}
	return false
}

func (x *AssignIPRequest) GetUtilizedAddresses() []*UtilizedAddress {
	if x != nil {
		return x.UtilizedAddresses
	}
	return nil
}

func (x *AssignIPRequest) GetInstanceIdentity() *InstanceIdentity {
	if x != nil {
		return x.InstanceIdentity
	}
	return nil
}

func (x *AssignIPRequest) GetAllowSecurityGroupChange() bool {
	if x != nil {
		return x.AllowSecurityGroupChange
	}
	return false
}

func (x *AssignIPRequest) GetSignedAddressAllocations() []*titus.SignedAddressAllocation {
	if x != nil {
		return x.SignedAddressAllocations
	}
	return nil
}

type AssignIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheVersion *CacheVersion `protobuf:"bytes,1,opt,name=cacheVersion,proto3" json:"cacheVersion,omitempty"`
	// A batch of IPs may be given back. It is up to the client to figure out what IPs it can use.
	UsableAddresses  []*UsableAddress  `protobuf:"bytes,2,rep,name=usableAddresses,proto3" json:"usableAddresses,omitempty"`
	NetworkInterface *NetworkInterface `protobuf:"bytes,3,opt,name=networkInterface,proto3" json:"networkInterface,omitempty"`
	SecurityGroupIds []string          `protobuf:"bytes,4,rep,name=securityGroupIds,proto3" json:"securityGroupIds,omitempty"`
}

func (x *AssignIPResponse) Reset() {
	*x = AssignIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignIPResponse) ProtoMessage() {}

func (x *AssignIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignIPResponse.ProtoReflect.Descriptor instead.
func (*AssignIPResponse) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{11}
}

func (x *AssignIPResponse) GetCacheVersion() *CacheVersion {
	if x != nil {
		return x.CacheVersion
	}
	return nil
}

func (x *AssignIPResponse) GetUsableAddresses() []*UsableAddress {
	if x != nil {
		return x.UsableAddresses
	}
	return nil
}

func (x *AssignIPResponse) GetNetworkInterface() *NetworkInterface {
	if x != nil {
		return x.NetworkInterface
	}
	return nil
}

func (x *AssignIPResponse) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

type ElasticAddressSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElasticAddresses []string `protobuf:"bytes,1,rep,name=elasticAddresses,proto3" json:"elasticAddresses,omitempty"`
}

func (x *ElasticAddressSet) Reset() {
	*x = ElasticAddressSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticAddressSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticAddressSet) ProtoMessage() {}

func (x *ElasticAddressSet) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticAddressSet.ProtoReflect.Descriptor instead.
func (*ElasticAddressSet) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{12}
}

func (x *ElasticAddressSet) GetElasticAddresses() []string {
	if x != nil {
		return x.ElasticAddresses
	}
	return nil
}

type AssignIPRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId           string   `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	SecurityGroupIds []string `protobuf:"bytes,2,rep,name=securityGroupIds,proto3" json:"securityGroupIds,omitempty"`
	// Types that are assignable to Ipv6:
	//	*AssignIPRequestV3_Ipv6AddressRequested
	//	*AssignIPRequestV3_NoIPv6AddressRequested
	Ipv6 isAssignIPRequestV3_Ipv6 `protobuf_oneof:"ipv6"`
	// Types that are assignable to Ipv4:
	//	*AssignIPRequestV3_Ipv4AddressRequested
	//	*AssignIPRequestV3_Ipv4SignedAddressAllocation
	//	*AssignIPRequestV3_TransitionRequested
	Ipv4    isAssignIPRequestV3_Ipv4 `protobuf_oneof:"ipv4"`
	Subnets []string                 `protobuf:"bytes,7,rep,name=subnets,proto3" json:"subnets,omitempty"`
	// This identifies the trunk ENI
	InstanceIdentity *InstanceIdentity `protobuf:"bytes,8,opt,name=instanceIdentity,proto3" json:"instanceIdentity,omitempty"`
	AccountID        string            `protobuf:"bytes,9,opt,name=accountID,proto3" json:"accountID,omitempty"`
	// Types that are assignable to ElasticAddress:
	//	*AssignIPRequestV3_Empty
	//	*AssignIPRequestV3_ElasticAdddresses
	//	*AssignIPRequestV3_GroupName
	ElasticAddress isAssignIPRequestV3_ElasticAddress `protobuf_oneof:"elasticAddress"`
	// If this assignment ID already exists in the database, then return that assignment.
	// If that assignment was not completed, then we will try to unassign it and re-assign it.
	Idempotent bool `protobuf:"varint,13,opt,name=idempotent,proto3" json:"idempotent,omitempty"`
	// Jumbo: I want "default routes" with an MTU of "Jumbo"
	Jumbo bool `protobuf:"varint,14,opt,name=jumbo,proto3" json:"jumbo,omitempty"`
	Burst bool `protobuf:"varint,15,opt,name=burst,proto3" json:"burst,omitempty"`
	// bandwidth is in bits per second
	Bandwidth uint64 `protobuf:"varint,16,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (x *AssignIPRequestV3) Reset() {
	*x = AssignIPRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignIPRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignIPRequestV3) ProtoMessage() {}

func (x *AssignIPRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignIPRequestV3.ProtoReflect.Descriptor instead.
func (*AssignIPRequestV3) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{13}
}

func (x *AssignIPRequestV3) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *AssignIPRequestV3) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (m *AssignIPRequestV3) GetIpv6() isAssignIPRequestV3_Ipv6 {
	if m != nil {
		return m.Ipv6
	}
	return nil
}

func (x *AssignIPRequestV3) GetIpv6AddressRequested() bool {
	if x, ok := x.GetIpv6().(*AssignIPRequestV3_Ipv6AddressRequested); ok {
		return x.Ipv6AddressRequested
	}
	return false
}

func (x *AssignIPRequestV3) GetNoIPv6AddressRequested() *emptypb.Empty {
	if x, ok := x.GetIpv6().(*AssignIPRequestV3_NoIPv6AddressRequested); ok {
		return x.NoIPv6AddressRequested
	}
	return nil
}

func (m *AssignIPRequestV3) GetIpv4() isAssignIPRequestV3_Ipv4 {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

func (x *AssignIPRequestV3) GetIpv4AddressRequested() bool {
	if x, ok := x.GetIpv4().(*AssignIPRequestV3_Ipv4AddressRequested); ok {
		return x.Ipv4AddressRequested
	}
	return false
}

func (x *AssignIPRequestV3) GetIpv4SignedAddressAllocation() *titus.SignedAddressAllocation {
	if x, ok := x.GetIpv4().(*AssignIPRequestV3_Ipv4SignedAddressAllocation); ok {
		return x.Ipv4SignedAddressAllocation
	}
	return nil
}

func (x *AssignIPRequestV3) GetTransitionRequested() *emptypb.Empty {
	if x, ok := x.GetIpv4().(*AssignIPRequestV3_TransitionRequested); ok {
		return x.TransitionRequested
	}
	return nil
}

func (x *AssignIPRequestV3) GetSubnets() []string {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *AssignIPRequestV3) GetInstanceIdentity() *InstanceIdentity {
	if x != nil {
		return x.InstanceIdentity
	}
	return nil
}

func (x *AssignIPRequestV3) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (m *AssignIPRequestV3) GetElasticAddress() isAssignIPRequestV3_ElasticAddress {
	if m != nil {
		return m.ElasticAddress
	}
	return nil
}

func (x *AssignIPRequestV3) GetEmpty() *emptypb.Empty {
	if x, ok := x.GetElasticAddress().(*AssignIPRequestV3_Empty); ok {
		return x.Empty
	}
	return nil
}

func (x *AssignIPRequestV3) GetElasticAdddresses() *ElasticAddressSet {
	if x, ok := x.GetElasticAddress().(*AssignIPRequestV3_ElasticAdddresses); ok {
		return x.ElasticAdddresses
	}
	return nil
}

func (x *AssignIPRequestV3) GetGroupName() string {
	if x, ok := x.GetElasticAddress().(*AssignIPRequestV3_GroupName); ok {
		return x.GroupName
	}
	return ""
}

func (x *AssignIPRequestV3) GetIdempotent() bool {
	if x != nil {
		return x.Idempotent
	}
	return false
}

func (x *AssignIPRequestV3) GetJumbo() bool {
	if x != nil {
		return x.Jumbo
	}
	return false
}

func (x *AssignIPRequestV3) GetBurst() bool {
	if x != nil {
		return x.Burst
	}
	return false
}

func (x *AssignIPRequestV3) GetBandwidth() uint64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

type isAssignIPRequestV3_Ipv6 interface {
	isAssignIPRequestV3_Ipv6()
}

type AssignIPRequestV3_Ipv6AddressRequested struct {
	Ipv6AddressRequested bool `protobuf:"varint,3,opt,name=ipv6AddressRequested,proto3,oneof"`
}

type AssignIPRequestV3_NoIPv6AddressRequested struct {
	NoIPv6AddressRequested *emptypb.Empty `protobuf:"bytes,19,opt,name=noIPv6AddressRequested,proto3,oneof"`
}

func (*AssignIPRequestV3_Ipv6AddressRequested) isAssignIPRequestV3_Ipv6() {}

func (*AssignIPRequestV3_NoIPv6AddressRequested) isAssignIPRequestV3_Ipv6() {}

type isAssignIPRequestV3_Ipv4 interface {
	isAssignIPRequestV3_Ipv4()
}

type AssignIPRequestV3_Ipv4AddressRequested struct {
	Ipv4AddressRequested bool `protobuf:"varint,4,opt,name=ipv4AddressRequested,proto3,oneof"`
}

type AssignIPRequestV3_Ipv4SignedAddressAllocation struct {
	Ipv4SignedAddressAllocation *titus.SignedAddressAllocation `protobuf:"bytes,5,opt,name=ipv4SignedAddressAllocation,proto3,oneof"`
}

type AssignIPRequestV3_TransitionRequested struct {
	TransitionRequested *emptypb.Empty `protobuf:"bytes,17,opt,name=transitionRequested,proto3,oneof"`
}

func (*AssignIPRequestV3_Ipv4AddressRequested) isAssignIPRequestV3_Ipv4() {}

func (*AssignIPRequestV3_Ipv4SignedAddressAllocation) isAssignIPRequestV3_Ipv4() {}

func (*AssignIPRequestV3_TransitionRequested) isAssignIPRequestV3_Ipv4() {}

type isAssignIPRequestV3_ElasticAddress interface {
	isAssignIPRequestV3_ElasticAddress()
}

type AssignIPRequestV3_Empty struct {
	Empty *emptypb.Empty `protobuf:"bytes,10,opt,name=empty,proto3,oneof"`
}

type AssignIPRequestV3_ElasticAdddresses struct {
	ElasticAdddresses *ElasticAddressSet `protobuf:"bytes,11,opt,name=elasticAdddresses,proto3,oneof"`
}

type AssignIPRequestV3_GroupName struct {
	GroupName string `protobuf:"bytes,12,opt,name=groupName,proto3,oneof"`
}

func (*AssignIPRequestV3_Empty) isAssignIPRequestV3_ElasticAddress() {}

func (*AssignIPRequestV3_ElasticAdddresses) isAssignIPRequestV3_ElasticAddress() {}

func (*AssignIPRequestV3_GroupName) isAssignIPRequestV3_ElasticAddress() {}

type ElasticAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip             string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	AllocationId   string `protobuf:"bytes,2,opt,name=allocationId,proto3" json:"allocationId,omitempty"`
	AssociationdId string `protobuf:"bytes,3,opt,name=associationdId,proto3" json:"associationdId,omitempty"`
}

func (x *ElasticAddress) Reset() {
	*x = ElasticAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticAddress) ProtoMessage() {}

func (x *ElasticAddress) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticAddress.ProtoReflect.Descriptor instead.
func (*ElasticAddress) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{14}
}

func (x *ElasticAddress) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ElasticAddress) GetAllocationId() string {
	if x != nil {
		return x.AllocationId
	}
	return ""
}

func (x *ElasticAddress) GetAssociationdId() string {
	if x != nil {
		return x.AssociationdId
	}
	return ""
}

type AssignIPResponseV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Address            *UsableAddress    `protobuf:"bytes,1,opt,name=ipv4address,proto3" json:"ipv4address,omitempty"`
	Ipv6Address            *UsableAddress    `protobuf:"bytes,2,opt,name=ipv6address,proto3" json:"ipv6address,omitempty"`
	BranchNetworkInterface *NetworkInterface `protobuf:"bytes,3,opt,name=branchNetworkInterface,proto3" json:"branchNetworkInterface,omitempty"`
	TrunkNetworkInterface  *NetworkInterface `protobuf:"bytes,4,opt,name=trunkNetworkInterface,proto3" json:"trunkNetworkInterface,omitempty"`
	VlanId                 uint32            `protobuf:"varint,5,opt,name=vlanId,proto3" json:"vlanId,omitempty"`
	ElasticAddress         *ElasticAddress   `protobuf:"bytes,6,opt,name=elasticAddress,proto3" json:"elasticAddress,omitempty"`
	ClassId                uint32            `protobuf:"varint,7,opt,name=classId,proto3" json:"classId,omitempty"`
	// Routes act as overrides. There may be an override for default, but it if it not present, one should still be
	// assigned.
	Routes               []*AssignIPResponseV3_Route              `protobuf:"bytes,9,rep,name=routes,proto3" json:"routes,omitempty"`
	Bandwidth            *AssignIPResponseV3_Bandwidth            `protobuf:"bytes,10,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	TransitionAssignment *AssignIPResponseV3_TransitionAssignment `protobuf:"bytes,11,opt,name=transitionAssignment,proto3" json:"transitionAssignment,omitempty"`
}

func (x *AssignIPResponseV3) Reset() {
	*x = AssignIPResponseV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignIPResponseV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignIPResponseV3) ProtoMessage() {}

func (x *AssignIPResponseV3) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignIPResponseV3.ProtoReflect.Descriptor instead.
func (*AssignIPResponseV3) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{15}
}

func (x *AssignIPResponseV3) GetIpv4Address() *UsableAddress {
	if x != nil {
		return x.Ipv4Address
	}
	return nil
}

func (x *AssignIPResponseV3) GetIpv6Address() *UsableAddress {
	if x != nil {
		return x.Ipv6Address
	}
	return nil
}

func (x *AssignIPResponseV3) GetBranchNetworkInterface() *NetworkInterface {
	if x != nil {
		return x.BranchNetworkInterface
	}
	return nil
}

func (x *AssignIPResponseV3) GetTrunkNetworkInterface() *NetworkInterface {
	if x != nil {
		return x.TrunkNetworkInterface
	}
	return nil
}

func (x *AssignIPResponseV3) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *AssignIPResponseV3) GetElasticAddress() *ElasticAddress {
	if x != nil {
		return x.ElasticAddress
	}
	return nil
}

func (x *AssignIPResponseV3) GetClassId() uint32 {
	if x != nil {
		return x.ClassId
	}
	return 0
}

func (x *AssignIPResponseV3) GetRoutes() []*AssignIPResponseV3_Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *AssignIPResponseV3) GetBandwidth() *AssignIPResponseV3_Bandwidth {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

func (x *AssignIPResponseV3) GetTransitionAssignment() *AssignIPResponseV3_TransitionAssignment {
	if x != nil {
		return x.TransitionAssignment
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{16}
}

func (x *Error) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// This is for storage of an assignment in the titus executor.
type Assignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Assignment:
	//	*Assignment_AssignIPResponseV3
	Assignment isAssignment_Assignment `protobuf_oneof:"assignment"`
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{17}
}

func (m *Assignment) GetAssignment() isAssignment_Assignment {
	if m != nil {
		return m.Assignment
	}
	return nil
}

func (x *Assignment) GetAssignIPResponseV3() *AssignIPResponseV3 {
	if x, ok := x.GetAssignment().(*Assignment_AssignIPResponseV3); ok {
		return x.AssignIPResponseV3
	}
	return nil
}

type isAssignment_Assignment interface {
	isAssignment_Assignment()
}

type Assignment_AssignIPResponseV3 struct {
	AssignIPResponseV3 *AssignIPResponseV3 `protobuf:"bytes,1,opt,name=assignIPResponseV3,proto3,oneof"`
}

func (*Assignment_AssignIPResponseV3) isAssignment_Assignment() {}

// This is the serialized output of the VPC Tool
type VPCToolResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*VPCToolResult_Assignment
	//	*VPCToolResult_Error
	Result isVPCToolResult_Result `protobuf_oneof:"result"`
}

func (x *VPCToolResult) Reset() {
	*x = VPCToolResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPCToolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPCToolResult) ProtoMessage() {}

func (x *VPCToolResult) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPCToolResult.ProtoReflect.Descriptor instead.
func (*VPCToolResult) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{18}
}

func (m *VPCToolResult) GetResult() isVPCToolResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *VPCToolResult) GetAssignment() *Assignment {
	if x, ok := x.GetResult().(*VPCToolResult_Assignment); ok {
		return x.Assignment
	}
	return nil
}

func (x *VPCToolResult) GetError() *Error {
	if x, ok := x.GetResult().(*VPCToolResult_Error); ok {
		return x.Error
	}
	return nil
}

type isVPCToolResult_Result interface {
	isVPCToolResult_Result()
}

type VPCToolResult_Assignment struct {
	Assignment *Assignment `protobuf:"bytes,1,opt,name=assignment,proto3,oneof"`
}

type VPCToolResult_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*VPCToolResult_Assignment) isVPCToolResult_Result() {}

func (*VPCToolResult_Error) isVPCToolResult_Result() {}

type UnassignIPRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *UnassignIPRequestV3) Reset() {
	*x = UnassignIPRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnassignIPRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignIPRequestV3) ProtoMessage() {}

func (x *UnassignIPRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignIPRequestV3.ProtoReflect.Descriptor instead.
func (*UnassignIPRequestV3) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{19}
}

func (x *UnassignIPRequestV3) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type UnassignIPResponseV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnassignIPResponseV3) Reset() {
	*x = UnassignIPResponseV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnassignIPResponseV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnassignIPResponseV3) ProtoMessage() {}

func (x *UnassignIPResponseV3) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnassignIPResponseV3.ProtoReflect.Descriptor instead.
func (*UnassignIPResponseV3) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{20}
}

type UsableAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PrefixLength uint32   `protobuf:"varint,2,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`
}

func (x *UsableAddress) Reset() {
	*x = UsableAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsableAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsableAddress) ProtoMessage() {}

func (x *UsableAddress) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsableAddress.ProtoReflect.Descriptor instead.
func (*UsableAddress) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{21}
}

func (x *UsableAddress) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *UsableAddress) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

// AddressGCMetadata is sent when the instance requests that the IP Service GC it. It's basically a way to
// indicate when the IP was last used, and we can GC it based on that metadata.
type GCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheVersion               *CacheVersion               `protobuf:"bytes,1,opt,name=cacheVersion,proto3" json:"cacheVersion,omitempty"`
	InstanceIdentity           *InstanceIdentity           `protobuf:"bytes,2,opt,name=instanceIdentity,proto3" json:"instanceIdentity,omitempty"`
	NetworkInterfaceAttachment *NetworkInterfaceAttachment `protobuf:"bytes,3,opt,name=networkInterfaceAttachment,proto3" json:"networkInterfaceAttachment,omitempty"`
	// unallocatedAddresses are addresses we were able to take a lock on
	UnallocatedAddresses []*UtilizedAddress `protobuf:"bytes,4,rep,name=unallocatedAddresses,proto3" json:"unallocatedAddresses,omitempty"`
	// nonviableAddresses are addresses which we found found in the store, but we decided not to nominate
	// for GC, because they've been bumped recently
	NonviableAddresses []*UtilizedAddress `protobuf:"bytes,5,rep,name=nonviableAddresses,proto3" json:"nonviableAddresses,omitempty"`
	// allocatedAddresses are addresses currently in use.
	AllocatedAddresses []*UtilizedAddress `protobuf:"bytes,6,rep,name=allocatedAddresses,proto3" json:"allocatedAddresses,omitempty"`
}

func (x *GCRequest) Reset() {
	*x = GCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCRequest) ProtoMessage() {}

func (x *GCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCRequest.ProtoReflect.Descriptor instead.
func (*GCRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{22}
}

func (x *GCRequest) GetCacheVersion() *CacheVersion {
	if x != nil {
		return x.CacheVersion
	}
	return nil
}

func (x *GCRequest) GetInstanceIdentity() *InstanceIdentity {
	if x != nil {
		return x.InstanceIdentity
	}
	return nil
}

func (x *GCRequest) GetNetworkInterfaceAttachment() *NetworkInterfaceAttachment {
	if x != nil {
		return x.NetworkInterfaceAttachment
	}
	return nil
}

func (x *GCRequest) GetUnallocatedAddresses() []*UtilizedAddress {
	if x != nil {
		return x.UnallocatedAddresses
	}
	return nil
}

func (x *GCRequest) GetNonviableAddresses() []*UtilizedAddress {
	if x != nil {
		return x.NonviableAddresses
	}
	return nil
}

func (x *GCRequest) GetAllocatedAddresses() []*UtilizedAddress {
	if x != nil {
		return x.AllocatedAddresses
	}
	return nil
}

type GCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheVersion    *CacheVersion `protobuf:"bytes,1,opt,name=cacheVersion,proto3" json:"cacheVersion,omitempty"`
	AddressToBump   []*Address    `protobuf:"bytes,2,rep,name=addressToBump,proto3" json:"addressToBump,omitempty"`
	AddressToDelete []*Address    `protobuf:"bytes,3,rep,name=addressToDelete,proto3" json:"addressToDelete,omitempty"`
}

func (x *GCResponse) Reset() {
	*x = GCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCResponse) ProtoMessage() {}

func (x *GCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCResponse.ProtoReflect.Descriptor instead.
func (*GCResponse) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{23}
}

func (x *GCResponse) GetCacheVersion() *CacheVersion {
	if x != nil {
		return x.CacheVersion
	}
	return nil
}

func (x *GCResponse) GetAddressToBump() []*Address {
	if x != nil {
		return x.AddressToBump
	}
	return nil
}

func (x *GCResponse) GetAddressToDelete() []*Address {
	if x != nil {
		return x.AddressToDelete
	}
	return nil
}

type GCRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceIdentity *InstanceIdentity `protobuf:"bytes,1,opt,name=instanceIdentity,proto3" json:"instanceIdentity,omitempty"`
	RunningTaskIDs   []string          `protobuf:"bytes,2,rep,name=runningTaskIDs,proto3" json:"runningTaskIDs,omitempty"`
	// Soft indicates that do not perform the actual GC, only return the task IDs that would be GC'd
	//
	// Deprecated: Do not use.
	Soft bool `protobuf:"varint,3,opt,name=soft,proto3" json:"soft,omitempty"`
}

func (x *GCRequestV3) Reset() {
	*x = GCRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCRequestV3) ProtoMessage() {}

func (x *GCRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCRequestV3.ProtoReflect.Descriptor instead.
func (*GCRequestV3) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{24}
}

func (x *GCRequestV3) GetInstanceIdentity() *InstanceIdentity {
	if x != nil {
		return x.InstanceIdentity
	}
	return nil
}

func (x *GCRequestV3) GetRunningTaskIDs() []string {
	if x != nil {
		return x.RunningTaskIDs
	}
	return nil
}

// Deprecated: Do not use.
func (x *GCRequestV3) GetSoft() bool {
	if x != nil {
		return x.Soft
	}
	return false
}

type GCResponseV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assignmentsToRemove returns which assignments *should be* removed.
	AssignmentsToRemove []string `protobuf:"bytes,1,rep,name=assignmentsToRemove,proto3" json:"assignmentsToRemove,omitempty"`
}

func (x *GCResponseV3) Reset() {
	*x = GCResponseV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCResponseV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCResponseV3) ProtoMessage() {}

func (x *GCResponseV3) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCResponseV3.ProtoReflect.Descriptor instead.
func (*GCResponseV3) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{25}
}

func (x *GCResponseV3) GetAssignmentsToRemove() []string {
	if x != nil {
		return x.AssignmentsToRemove
	}
	return nil
}

type RefreshIPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UtilizedAddress        []*UtilizedAddress `protobuf:"bytes,1,rep,name=utilizedAddress,proto3" json:"utilizedAddress,omitempty"`
	BranchNetworkInterface *NetworkInterface  `protobuf:"bytes,2,opt,name=branchNetworkInterface,proto3" json:"branchNetworkInterface,omitempty"`
}

func (x *RefreshIPRequest) Reset() {
	*x = RefreshIPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshIPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshIPRequest) ProtoMessage() {}

func (x *RefreshIPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshIPRequest.ProtoReflect.Descriptor instead.
func (*RefreshIPRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{26}
}

func (x *RefreshIPRequest) GetUtilizedAddress() []*UtilizedAddress {
	if x != nil {
		return x.UtilizedAddress
	}
	return nil
}

func (x *RefreshIPRequest) GetBranchNetworkInterface() *NetworkInterface {
	if x != nil {
		return x.BranchNetworkInterface
	}
	return nil
}

type RefreshIPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextRefresh *durationpb.Duration `protobuf:"bytes,1,opt,name=nextRefresh,proto3" json:"nextRefresh,omitempty"`
}

func (x *RefreshIPResponse) Reset() {
	*x = RefreshIPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshIPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshIPResponse) ProtoMessage() {}

func (x *RefreshIPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshIPResponse.ProtoReflect.Descriptor instead.
func (*RefreshIPResponse) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{27}
}

func (x *RefreshIPResponse) GetNextRefresh() *durationpb.Duration {
	if x != nil {
		return x.NextRefresh
	}
	return nil
}

type GCSetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceIdentity *InstanceIdentity `protobuf:"bytes,1,opt,name=instanceIdentity,proto3" json:"instanceIdentity,omitempty"`
}

func (x *GCSetupRequest) Reset() {
	*x = GCSetupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCSetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCSetupRequest) ProtoMessage() {}

func (x *GCSetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCSetupRequest.ProtoReflect.Descriptor instead.
func (*GCSetupRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{28}
}

func (x *GCSetupRequest) GetInstanceIdentity() *InstanceIdentity {
	if x != nil {
		return x.InstanceIdentity
	}
	return nil
}

type GCSetupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkInterfaceAttachment []*NetworkInterfaceAttachment `protobuf:"bytes,1,rep,name=networkInterfaceAttachment,proto3" json:"networkInterfaceAttachment,omitempty"`
}

func (x *GCSetupResponse) Reset() {
	*x = GCSetupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCSetupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCSetupResponse) ProtoMessage() {}

func (x *GCSetupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCSetupResponse.ProtoReflect.Descriptor instead.
func (*GCSetupResponse) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{29}
}

func (x *GCSetupResponse) GetNetworkInterfaceAttachment() []*NetworkInterfaceAttachment {
	if x != nil {
		return x.NetworkInterfaceAttachment
	}
	return nil
}

type GCLegacySetupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceIdentity *InstanceIdentity `protobuf:"bytes,1,opt,name=instanceIdentity,proto3" json:"instanceIdentity,omitempty"`
}

func (x *GCLegacySetupRequest) Reset() {
	*x = GCLegacySetupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCLegacySetupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCLegacySetupRequest) ProtoMessage() {}

func (x *GCLegacySetupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCLegacySetupRequest.ProtoReflect.Descriptor instead.
func (*GCLegacySetupRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{30}
}

func (x *GCLegacySetupRequest) GetInstanceIdentity() *InstanceIdentity {
	if x != nil {
		return x.InstanceIdentity
	}
	return nil
}

type GCLegacySetupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkInterfaceAttachment []*NetworkInterfaceAttachment `protobuf:"bytes,1,rep,name=networkInterfaceAttachment,proto3" json:"networkInterfaceAttachment,omitempty"`
}

func (x *GCLegacySetupResponse) Reset() {
	*x = GCLegacySetupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCLegacySetupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCLegacySetupResponse) ProtoMessage() {}

func (x *GCLegacySetupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCLegacySetupResponse.ProtoReflect.Descriptor instead.
func (*GCLegacySetupResponse) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{31}
}

func (x *GCLegacySetupResponse) GetNetworkInterfaceAttachment() []*NetworkInterfaceAttachment {
	if x != nil {
		return x.NetworkInterfaceAttachment
	}
	return nil
}

type LockId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LockId) Reset() {
	*x = LockId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockId) ProtoMessage() {}

func (x *LockId) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockId.ProtoReflect.Descriptor instead.
func (*LockId) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{32}
}

func (x *LockId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Lock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LockName  string                 `protobuf:"bytes,2,opt,name=lockName,proto3" json:"lockName,omitempty"`
	HeldBy    string                 `protobuf:"bytes,3,opt,name=heldBy,proto3" json:"heldBy,omitempty"`
	HeldUntil *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=heldUntil,proto3" json:"heldUntil,omitempty"`
}

func (x *Lock) Reset() {
	*x = Lock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lock) ProtoMessage() {}

func (x *Lock) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lock.ProtoReflect.Descriptor instead.
func (*Lock) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{33}
}

func (x *Lock) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Lock) GetLockName() string {
	if x != nil {
		return x.LockName
	}
	return ""
}

func (x *Lock) GetHeldBy() string {
	if x != nil {
		return x.HeldBy
	}
	return ""
}

func (x *Lock) GetHeldUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.HeldUntil
	}
	return nil
}

type GetLocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLocksRequest) Reset() {
	*x = GetLocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocksRequest) ProtoMessage() {}

func (x *GetLocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocksRequest.ProtoReflect.Descriptor instead.
func (*GetLocksRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{34}
}

type GetLocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locks []*Lock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks,omitempty"`
}

func (x *GetLocksResponse) Reset() {
	*x = GetLocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocksResponse) ProtoMessage() {}

func (x *GetLocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocksResponse.ProtoReflect.Descriptor instead.
func (*GetLocksResponse) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{35}
}

func (x *GetLocksResponse) GetLocks() []*Lock {
	if x != nil {
		return x.Locks
	}
	return nil
}

type PreemptLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockName string `protobuf:"bytes,1,opt,name=lockName,proto3" json:"lockName,omitempty"`
}

func (x *PreemptLockRequest) Reset() {
	*x = PreemptLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreemptLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreemptLockRequest) ProtoMessage() {}

func (x *PreemptLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreemptLockRequest.ProtoReflect.Descriptor instead.
func (*PreemptLockRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{36}
}

func (x *PreemptLockRequest) GetLockName() string {
	if x != nil {
		return x.LockName
	}
	return ""
}

type AssociateTrunkNetworkInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TrunkNetworkInterfaceIdentifier:
	//	*AssociateTrunkNetworkInterfaceRequest_InstanceIdentity
	//	*AssociateTrunkNetworkInterfaceRequest_TrunkENI
	TrunkNetworkInterfaceIdentifier isAssociateTrunkNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier `protobuf_oneof:"trunkNetworkInterfaceIdentifier"`
	BranchENI                       string                                                                  `protobuf:"bytes,3,opt,name=branchENI,proto3" json:"branchENI,omitempty"`
	VlanId                          uint64                                                                  `protobuf:"varint,4,opt,name=vlanId,proto3" json:"vlanId,omitempty"`
}

func (x *AssociateTrunkNetworkInterfaceRequest) Reset() {
	*x = AssociateTrunkNetworkInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociateTrunkNetworkInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociateTrunkNetworkInterfaceRequest) ProtoMessage() {}

func (x *AssociateTrunkNetworkInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociateTrunkNetworkInterfaceRequest.ProtoReflect.Descriptor instead.
func (*AssociateTrunkNetworkInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{37}
}

func (m *AssociateTrunkNetworkInterfaceRequest) GetTrunkNetworkInterfaceIdentifier() isAssociateTrunkNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier {
	if m != nil {
		return m.TrunkNetworkInterfaceIdentifier
	}
	return nil
}

func (x *AssociateTrunkNetworkInterfaceRequest) GetInstanceIdentity() *InstanceIdentity {
	if x, ok := x.GetTrunkNetworkInterfaceIdentifier().(*AssociateTrunkNetworkInterfaceRequest_InstanceIdentity); ok {
		return x.InstanceIdentity
	}
	return nil
}

func (x *AssociateTrunkNetworkInterfaceRequest) GetTrunkENI() string {
	if x, ok := x.GetTrunkNetworkInterfaceIdentifier().(*AssociateTrunkNetworkInterfaceRequest_TrunkENI); ok {
		return x.TrunkENI
	}
	return ""
}

func (x *AssociateTrunkNetworkInterfaceRequest) GetBranchENI() string {
	if x != nil {
		return x.BranchENI
	}
	return ""
}

func (x *AssociateTrunkNetworkInterfaceRequest) GetVlanId() uint64 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

type isAssociateTrunkNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier interface {
	isAssociateTrunkNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier()
}

type AssociateTrunkNetworkInterfaceRequest_InstanceIdentity struct {
	InstanceIdentity *InstanceIdentity `protobuf:"bytes,1,opt,name=instanceIdentity,proto3,oneof"`
}

type AssociateTrunkNetworkInterfaceRequest_TrunkENI struct {
	TrunkENI string `protobuf:"bytes,2,opt,name=trunkENI,proto3,oneof"`
}

func (*AssociateTrunkNetworkInterfaceRequest_InstanceIdentity) isAssociateTrunkNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier() {
}

func (*AssociateTrunkNetworkInterfaceRequest_TrunkENI) isAssociateTrunkNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier() {
}

type AssociateTrunkNetworkInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssociationId string `protobuf:"bytes,1,opt,name=associationId,proto3" json:"associationId,omitempty"`
}

func (x *AssociateTrunkNetworkInterfaceResponse) Reset() {
	*x = AssociateTrunkNetworkInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociateTrunkNetworkInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociateTrunkNetworkInterfaceResponse) ProtoMessage() {}

func (x *AssociateTrunkNetworkInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociateTrunkNetworkInterfaceResponse.ProtoReflect.Descriptor instead.
func (*AssociateTrunkNetworkInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{38}
}

func (x *AssociateTrunkNetworkInterfaceResponse) GetAssociationId() string {
	if x != nil {
		return x.AssociationId
	}
	return ""
}

type DisassociateTrunkNetworkInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//	*DisassociateTrunkNetworkInterfaceRequest_AssociationId
	Key   isDisassociateTrunkNetworkInterfaceRequest_Key `protobuf_oneof:"key"`
	Force bool                                           `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DisassociateTrunkNetworkInterfaceRequest) Reset() {
	*x = DisassociateTrunkNetworkInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisassociateTrunkNetworkInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisassociateTrunkNetworkInterfaceRequest) ProtoMessage() {}

func (x *DisassociateTrunkNetworkInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisassociateTrunkNetworkInterfaceRequest.ProtoReflect.Descriptor instead.
func (*DisassociateTrunkNetworkInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{39}
}

func (m *DisassociateTrunkNetworkInterfaceRequest) GetKey() isDisassociateTrunkNetworkInterfaceRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *DisassociateTrunkNetworkInterfaceRequest) GetAssociationId() string {
	if x, ok := x.GetKey().(*DisassociateTrunkNetworkInterfaceRequest_AssociationId); ok {
		return x.AssociationId
	}
	return ""
}

func (x *DisassociateTrunkNetworkInterfaceRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type isDisassociateTrunkNetworkInterfaceRequest_Key interface {
	isDisassociateTrunkNetworkInterfaceRequest_Key()
}

type DisassociateTrunkNetworkInterfaceRequest_AssociationId struct {
	AssociationId string `protobuf:"bytes,1,opt,name=associationId,proto3,oneof"`
}

func (*DisassociateTrunkNetworkInterfaceRequest_AssociationId) isDisassociateTrunkNetworkInterfaceRequest_Key() {
}

type DisassociateTrunkNetworkInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisassociateTrunkNetworkInterfaceResponse) Reset() {
	*x = DisassociateTrunkNetworkInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisassociateTrunkNetworkInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisassociateTrunkNetworkInterfaceResponse) ProtoMessage() {}

func (x *DisassociateTrunkNetworkInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisassociateTrunkNetworkInterfaceResponse.ProtoReflect.Descriptor instead.
func (*DisassociateTrunkNetworkInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{40}
}

type DescribeTrunkNetworkInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TrunkNetworkInterfaceIdentifier:
	//	*DescribeTrunkNetworkInterfaceRequest_InstanceIdentity
	//	*DescribeTrunkNetworkInterfaceRequest_TrunkENI
	TrunkNetworkInterfaceIdentifier isDescribeTrunkNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier `protobuf_oneof:"trunkNetworkInterfaceIdentifier"`
}

func (x *DescribeTrunkNetworkInterfaceRequest) Reset() {
	*x = DescribeTrunkNetworkInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTrunkNetworkInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTrunkNetworkInterfaceRequest) ProtoMessage() {}

func (x *DescribeTrunkNetworkInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTrunkNetworkInterfaceRequest.ProtoReflect.Descriptor instead.
func (*DescribeTrunkNetworkInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{41}
}

func (m *DescribeTrunkNetworkInterfaceRequest) GetTrunkNetworkInterfaceIdentifier() isDescribeTrunkNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier {
	if m != nil {
		return m.TrunkNetworkInterfaceIdentifier
	}
	return nil
}

func (x *DescribeTrunkNetworkInterfaceRequest) GetInstanceIdentity() *InstanceIdentity {
	if x, ok := x.GetTrunkNetworkInterfaceIdentifier().(*DescribeTrunkNetworkInterfaceRequest_InstanceIdentity); ok {
		return x.InstanceIdentity
	}
	return nil
}

func (x *DescribeTrunkNetworkInterfaceRequest) GetTrunkENI() string {
	if x, ok := x.GetTrunkNetworkInterfaceIdentifier().(*DescribeTrunkNetworkInterfaceRequest_TrunkENI); ok {
		return x.TrunkENI
	}
	return ""
}

type isDescribeTrunkNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier interface {
	isDescribeTrunkNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier()
}

type DescribeTrunkNetworkInterfaceRequest_InstanceIdentity struct {
	InstanceIdentity *InstanceIdentity `protobuf:"bytes,1,opt,name=instanceIdentity,proto3,oneof"`
}

type DescribeTrunkNetworkInterfaceRequest_TrunkENI struct {
	TrunkENI string `protobuf:"bytes,2,opt,name=trunkENI,proto3,oneof"`
}

func (*DescribeTrunkNetworkInterfaceRequest_InstanceIdentity) isDescribeTrunkNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier() {
}

func (*DescribeTrunkNetworkInterfaceRequest_TrunkENI) isDescribeTrunkNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier() {
}

type DescribeTrunkNetworkInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrunkENI     *DescribeTrunkNetworkInterfaceResponse_TrunkENI                           `protobuf:"bytes,1,opt,name=trunkENI,proto3" json:"trunkENI,omitempty"`
	Associations []*DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation `protobuf:"bytes,2,rep,name=associations,proto3" json:"associations,omitempty"`
}

func (x *DescribeTrunkNetworkInterfaceResponse) Reset() {
	*x = DescribeTrunkNetworkInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTrunkNetworkInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTrunkNetworkInterfaceResponse) ProtoMessage() {}

func (x *DescribeTrunkNetworkInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTrunkNetworkInterfaceResponse.ProtoReflect.Descriptor instead.
func (*DescribeTrunkNetworkInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{42}
}

func (x *DescribeTrunkNetworkInterfaceResponse) GetTrunkENI() *DescribeTrunkNetworkInterfaceResponse_TrunkENI {
	if x != nil {
		return x.TrunkENI
	}
	return nil
}

func (x *DescribeTrunkNetworkInterfaceResponse) GetAssociations() []*DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation {
	if x != nil {
		return x.Associations
	}
	return nil
}

type DetachBranchNetworkInterfaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TrunkNetworkInterfaceIdentifier:
	//	*DetachBranchNetworkInterfaceRequest_InstanceIdentity
	TrunkNetworkInterfaceIdentifier isDetachBranchNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier `protobuf_oneof:"trunkNetworkInterfaceIdentifier"`
}

func (x *DetachBranchNetworkInterfaceRequest) Reset() {
	*x = DetachBranchNetworkInterfaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachBranchNetworkInterfaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachBranchNetworkInterfaceRequest) ProtoMessage() {}

func (x *DetachBranchNetworkInterfaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachBranchNetworkInterfaceRequest.ProtoReflect.Descriptor instead.
func (*DetachBranchNetworkInterfaceRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{43}
}

func (m *DetachBranchNetworkInterfaceRequest) GetTrunkNetworkInterfaceIdentifier() isDetachBranchNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier {
	if m != nil {
		return m.TrunkNetworkInterfaceIdentifier
	}
	return nil
}

func (x *DetachBranchNetworkInterfaceRequest) GetInstanceIdentity() *InstanceIdentity {
	if x, ok := x.GetTrunkNetworkInterfaceIdentifier().(*DetachBranchNetworkInterfaceRequest_InstanceIdentity); ok {
		return x.InstanceIdentity
	}
	return nil
}

type isDetachBranchNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier interface {
	isDetachBranchNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier()
}

type DetachBranchNetworkInterfaceRequest_InstanceIdentity struct {
	InstanceIdentity *InstanceIdentity `protobuf:"bytes,1,opt,name=instanceIdentity,proto3,oneof"`
}

func (*DetachBranchNetworkInterfaceRequest_InstanceIdentity) isDetachBranchNetworkInterfaceRequest_TrunkNetworkInterfaceIdentifier() {
}

type DetachBranchNetworkInterfaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId        uint64 `protobuf:"varint,1,opt,name=vlanId,proto3" json:"vlanId,omitempty"`
	BranchENI     string `protobuf:"bytes,2,opt,name=branchENI,proto3" json:"branchENI,omitempty"`
	AssociationID string `protobuf:"bytes,3,opt,name=associationID,proto3" json:"associationID,omitempty"`
}

func (x *DetachBranchNetworkInterfaceResponse) Reset() {
	*x = DetachBranchNetworkInterfaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachBranchNetworkInterfaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachBranchNetworkInterfaceResponse) ProtoMessage() {}

func (x *DetachBranchNetworkInterfaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachBranchNetworkInterfaceResponse.ProtoReflect.Descriptor instead.
func (*DetachBranchNetworkInterfaceResponse) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{44}
}

func (x *DetachBranchNetworkInterfaceResponse) GetVlanId() uint64 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *DetachBranchNetworkInterfaceResponse) GetBranchENI() string {
	if x != nil {
		return x.BranchENI
	}
	return ""
}

func (x *DetachBranchNetworkInterfaceResponse) GetAssociationID() string {
	if x != nil {
		return x.AssociationID
	}
	return ""
}

type GetAssignmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetAssignmentRequest) Reset() {
	*x = GetAssignmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssignmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssignmentRequest) ProtoMessage() {}

func (x *GetAssignmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssignmentRequest.ProtoReflect.Descriptor instead.
func (*GetAssignmentRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{45}
}

func (x *GetAssignmentRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetAssignmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assignment *AssignIPResponseV3 `protobuf:"bytes,1,opt,name=assignment,proto3" json:"assignment,omitempty"`
}

func (x *GetAssignmentResponse) Reset() {
	*x = GetAssignmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssignmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssignmentResponse) ProtoMessage() {}

func (x *GetAssignmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssignmentResponse.ProtoReflect.Descriptor instead.
func (*GetAssignmentResponse) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{46}
}

func (x *GetAssignmentResponse) GetAssignment() *AssignIPResponseV3 {
	if x != nil {
		return x.Assignment
	}
	return nil
}

type SecurityGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SgId string `protobuf:"bytes,1,opt,name=sgId,proto3" json:"sgId,omitempty"`
}

func (x *SecurityGroupRequest) Reset() {
	*x = SecurityGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityGroupRequest) ProtoMessage() {}

func (x *SecurityGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityGroupRequest.ProtoReflect.Descriptor instead.
func (*SecurityGroupRequest) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{47}
}

func (x *SecurityGroupRequest) GetSgId() string {
	if x != nil {
		return x.SgId
	}
	return ""
}

type PrivateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname  string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Generated *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=generated,proto3" json:"generated,omitempty"`
	// Types that are assignable to Key:
	//	*PrivateKey_Ed25519Key_
	Key isPrivateKey_Key `protobuf_oneof:"key"`
}

func (x *PrivateKey) Reset() {
	*x = PrivateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKey) ProtoMessage() {}

func (x *PrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKey.ProtoReflect.Descriptor instead.
func (*PrivateKey) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{48}
}

func (x *PrivateKey) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *PrivateKey) GetGenerated() *timestamppb.Timestamp {
	if x != nil {
		return x.Generated
	}
	return nil
}

func (m *PrivateKey) GetKey() isPrivateKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *PrivateKey) GetEd25519Key() *PrivateKey_Ed25519Key {
	if x, ok := x.GetKey().(*PrivateKey_Ed25519Key_); ok {
		return x.Ed25519Key
	}
	return nil
}

type isPrivateKey_Key interface {
	isPrivateKey_Key()
}

type PrivateKey_Ed25519Key_ struct {
	Ed25519Key *PrivateKey_Ed25519Key `protobuf:"bytes,3,opt,name=ed25519Key,proto3,oneof"`
}

func (*PrivateKey_Ed25519Key_) isPrivateKey_Key() {}

// Right now this is just to over-ride the MTU per-route.
type AssignIPResponseV3_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Destination, formatted as CIDR, like 10.0.0.0/8. Unfortunately, this is somewhat ambigious
	// because say 10.0.250.0/8 is kind of equivalent from a routing perspective
	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// mtu of 0 is default
	Mtu    uint32                          `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Family AssignIPResponseV3_Route_Family `protobuf:"varint,3,opt,name=family,proto3,enum=com.netflix.titus.executor.vpc.AssignIPResponseV3_Route_Family" json:"family,omitempty"`
}

func (x *AssignIPResponseV3_Route) Reset() {
	*x = AssignIPResponseV3_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignIPResponseV3_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignIPResponseV3_Route) ProtoMessage() {}

func (x *AssignIPResponseV3_Route) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignIPResponseV3_Route.ProtoReflect.Descriptor instead.
func (*AssignIPResponseV3_Route) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{15, 0}
}

func (x *AssignIPResponseV3_Route) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *AssignIPResponseV3_Route) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *AssignIPResponseV3_Route) GetFamily() AssignIPResponseV3_Route_Family {
	if x != nil {
		return x.Family
	}
	return AssignIPResponseV3_Route_IPv4
}

type AssignIPResponseV3_Bandwidth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bandwidth is in bits per second
	Bandwidth uint64 `protobuf:"varint,1,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// burst is the HTB class's ceil in bits per second
	Burst uint64 `protobuf:"varint,2,opt,name=burst,proto3" json:"burst,omitempty"`
}

func (x *AssignIPResponseV3_Bandwidth) Reset() {
	*x = AssignIPResponseV3_Bandwidth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignIPResponseV3_Bandwidth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignIPResponseV3_Bandwidth) ProtoMessage() {}

func (x *AssignIPResponseV3_Bandwidth) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignIPResponseV3_Bandwidth.ProtoReflect.Descriptor instead.
func (*AssignIPResponseV3_Bandwidth) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{15, 1}
}

func (x *AssignIPResponseV3_Bandwidth) GetBandwidth() uint64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *AssignIPResponseV3_Bandwidth) GetBurst() uint64 {
	if x != nil {
		return x.Burst
	}
	return 0
}

type AssignIPResponseV3_TransitionAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignmentId string `protobuf:"bytes,1,opt,name=assignmentId,proto3" json:"assignmentId,omitempty"`
	// TODO: Add mark.
	Routes      []*AssignIPResponseV3_Route `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	Ipv4Address *UsableAddress              `protobuf:"bytes,3,opt,name=ipv4address,proto3" json:"ipv4address,omitempty"`
}

func (x *AssignIPResponseV3_TransitionAssignment) Reset() {
	*x = AssignIPResponseV3_TransitionAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignIPResponseV3_TransitionAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignIPResponseV3_TransitionAssignment) ProtoMessage() {}

func (x *AssignIPResponseV3_TransitionAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignIPResponseV3_TransitionAssignment.ProtoReflect.Descriptor instead.
func (*AssignIPResponseV3_TransitionAssignment) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{15, 2}
}

func (x *AssignIPResponseV3_TransitionAssignment) GetAssignmentId() string {
	if x != nil {
		return x.AssignmentId
	}
	return ""
}

func (x *AssignIPResponseV3_TransitionAssignment) GetRoutes() []*AssignIPResponseV3_Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *AssignIPResponseV3_TransitionAssignment) GetIpv4Address() *UsableAddress {
	if x != nil {
		return x.Ipv4Address
	}
	return nil
}

type DescribeTrunkNetworkInterfaceResponse_TrunkENI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId string                 `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Az        string                 `protobuf:"bytes,3,opt,name=az,proto3" json:"az,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	SubnetId  string                 `protobuf:"bytes,5,opt,name=subnetId,proto3" json:"subnetId,omitempty"`
	VpcId     string                 `protobuf:"bytes,6,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	Region    string                 `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkENI) Reset() {
	*x = DescribeTrunkNetworkInterfaceResponse_TrunkENI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkENI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTrunkNetworkInterfaceResponse_TrunkENI) ProtoMessage() {}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkENI) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTrunkNetworkInterfaceResponse_TrunkENI.ProtoReflect.Descriptor instead.
func (*DescribeTrunkNetworkInterfaceResponse_TrunkENI) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{42, 0}
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkENI) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkENI) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkENI) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkENI) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkENI) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkENI) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkENI) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type DescribeTrunkNetworkInterfaceResponse_BranchENI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	AccountId        string                 `protobuf:"bytes,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	SubnetId         string                 `protobuf:"bytes,4,opt,name=subnetId,proto3" json:"subnetId,omitempty"`
	VpcId            string                 `protobuf:"bytes,5,opt,name=vpcId,proto3" json:"vpcId,omitempty"`
	SecurityGroupIds []string               `protobuf:"bytes,6,rep,name=securityGroupIds,proto3" json:"securityGroupIds,omitempty"`
	ModifiedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=modifiedAt,proto3" json:"modifiedAt,omitempty"`
	LastAssignedTo   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=lastAssignedTo,proto3" json:"lastAssignedTo,omitempty"`
}

func (x *DescribeTrunkNetworkInterfaceResponse_BranchENI) Reset() {
	*x = DescribeTrunkNetworkInterfaceResponse_BranchENI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTrunkNetworkInterfaceResponse_BranchENI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTrunkNetworkInterfaceResponse_BranchENI) ProtoMessage() {}

func (x *DescribeTrunkNetworkInterfaceResponse_BranchENI) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTrunkNetworkInterfaceResponse_BranchENI.ProtoReflect.Descriptor instead.
func (*DescribeTrunkNetworkInterfaceResponse_BranchENI) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{42, 1}
}

func (x *DescribeTrunkNetworkInterfaceResponse_BranchENI) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DescribeTrunkNetworkInterfaceResponse_BranchENI) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DescribeTrunkNetworkInterfaceResponse_BranchENI) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *DescribeTrunkNetworkInterfaceResponse_BranchENI) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *DescribeTrunkNetworkInterfaceResponse_BranchENI) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *DescribeTrunkNetworkInterfaceResponse_BranchENI) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *DescribeTrunkNetworkInterfaceResponse_BranchENI) GetModifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedAt
	}
	return nil
}

func (x *DescribeTrunkNetworkInterfaceResponse_BranchENI) GetLastAssignedTo() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAssignedTo
	}
	return nil
}

type DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId        uint64                                           `protobuf:"varint,1,opt,name=vlanId,proto3" json:"vlanId,omitempty"`
	AssociationId string                                           `protobuf:"bytes,2,opt,name=associationId,proto3" json:"associationId,omitempty"`
	BranchENI     *DescribeTrunkNetworkInterfaceResponse_BranchENI `protobuf:"bytes,3,opt,name=branchENI,proto3" json:"branchENI,omitempty"`
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation) Reset() {
	*x = DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation) ProtoMessage() {}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation.ProtoReflect.Descriptor instead.
func (*DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{42, 2}
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation) GetVlanId() uint64 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation) GetAssociationId() string {
	if x != nil {
		return x.AssociationId
	}
	return ""
}

func (x *DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation) GetBranchENI() *DescribeTrunkNetworkInterfaceResponse_BranchENI {
	if x != nil {
		return x.BranchENI
	}
	return nil
}

type PrivateKey_Ed25519Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rfc8032Key []byte `protobuf:"bytes,1,opt,name=rfc8032key,proto3" json:"rfc8032key,omitempty"`
}

func (x *PrivateKey_Ed25519Key) Reset() {
	*x = PrivateKey_Ed25519Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateKey_Ed25519Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKey_Ed25519Key) ProtoMessage() {}

func (x *PrivateKey_Ed25519Key) ProtoReflect() protoreflect.Message {
	mi := &file_vpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKey_Ed25519Key.ProtoReflect.Descriptor instead.
func (*PrivateKey_Ed25519Key) Descriptor() ([]byte, []int) {
	return file_vpc_proto_rawDescGZIP(), []int{48, 0}
}

func (x *PrivateKey_Ed25519Key) GetRfc8032Key() []byte {
	if x != nil {
		return x.Rfc8032Key
	}
	return nil
}

var File_vpc_proto protoreflect.FileDescriptor

var file_vpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x76, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x65, 0x74, 0x66, 0x6c,
	0x69, 0x78, 0x2f, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2f, 0x74, 0x69, 0x74, 0x75, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x22,
	0x0a, 0x0c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x22, 0x4e, 0x0a, 0x1a, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xe4, 0x02, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x7a, 0x0a, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x10, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3a,
	0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5c, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x22, 0xcd, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70,
	0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x56, 0x33, 0x12, 0x5c, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x56, 0x33, 0x12, 0x66, 0x0a, 0x15, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x15, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0f,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x41, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70,
	0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xa0, 0x05, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x1a, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x11, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63,
	0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x11, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x66, 0x0a,
	0x18, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc7, 0x02, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70,
	0x63, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0f,
	0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x22,
	0x3f, 0x0a, 0x11, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x22, 0xa6, 0x07, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x14, 0x69, 0x70,
	0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x14, 0x69, 0x70, 0x76, 0x36,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x50, 0x0a, 0x16, 0x6e, 0x6f, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x16, 0x6e, 0x6f, 0x49, 0x50,
	0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x01, 0x52, 0x14, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x1b, 0x69, 0x70, 0x76, 0x34,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x1b, 0x69, 0x70, 0x76,
	0x34, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x01, 0x52,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x5c,
	0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x11, 0x65, 0x6c,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x48, 0x02, 0x52, 0x11, 0x65, 0x6c, 0x61, 0x73,
	0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6a, 0x75, 0x6d, 0x62, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6a, 0x75,
	0x6d, 0x62, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x42,
	0x06, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x42, 0x10, 0x0a, 0x0e, 0x65, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6c, 0x0a, 0x0e, 0x45, 0x6c, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x93, 0x0a, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x12, 0x4f,
	0x0a, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x4f, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c,
	0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x68, 0x0a, 0x16, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70,
	0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x52, 0x16, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x74, 0x72,
	0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x15, 0x74, 0x72, 0x75,
	0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0e, 0x65, 0x6c,
	0x61, 0x73, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x70, 0x63, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0e, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5a,
	0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x56, 0x33, 0x2e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52,
	0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x7b, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xb2, 0x01, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x57, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x50, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0x1c,
	0x0a, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x34,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x36, 0x10, 0x01, 0x1a, 0x3f, 0x0a, 0x09,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x1a, 0xdd, 0x01,
	0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0b,
	0x69, 0x70, 0x76, 0x34, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x70, 0x63, 0x2e, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1d, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x80, 0x01, 0x0a,
	0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x12, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x48, 0x00, 0x52, 0x12, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x33, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xa6, 0x01, 0x0a, 0x0d, 0x56, 0x50, 0x43, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x08,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2d, 0x0a, 0x13, 0x55, 0x6e, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x6e, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x22,
	0x76, 0x0a, 0x0d, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x41, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xde, 0x04, 0x0a, 0x09, 0x47, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x7a, 0x0a, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x63, 0x0a, 0x14, 0x75, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63,
	0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x14, 0x75, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x76, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x70, 0x63, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x76, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x70, 0x63, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x0a, 0x47, 0x43, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0d, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x42, 0x75, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70,
	0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x42, 0x75, 0x6d, 0x70, 0x12, 0x51, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x70, 0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0b,
	0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x12, 0x5c, 0x0a, 0x10, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x73, 0x12, 0x16, 0x0a, 0x04, 0x73, 0x6f, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x66, 0x74, 0x22, 0x40, 0x0a, 0x0c, 0x47, 0x43, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x10,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x59, 0x0a, 0x0f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x68, 0x0a, 0x16, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x16, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0x6e, 0x0a, 0x0e, 0x47, 0x43, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x47, 0x43, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x1a, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x14, 0x47, 0x43, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5c, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x93, 0x01,
	0x0a, 0x15, 0x47, 0x43, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x18, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x84, 0x01,
	0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x6c, 0x64, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x6c, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x68, 0x65,
	0x6c, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x64, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x05, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x30, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x25, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x4e, 0x49, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x4e,
	0x49, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x45, 0x4e, 0x49, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x45, 0x4e, 0x49, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x42, 0x21, 0x0a, 0x1f, 0x74, 0x72, 0x75, 0x6e, 0x6b,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x26, 0x41, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x28, 0x44, 0x69,
	0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x2b, 0x0a, 0x29, 0x44,
	0x69, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5e, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x4e, 0x49, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x4e, 0x49, 0x42,
	0x21, 0x0a, 0x1f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0x95, 0x08, 0x0a, 0x25, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x08,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x4e, 0x49, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x4e, 0x49, 0x52, 0x08,
	0x74, 0x72, 0x75, 0x6e, 0x6b, 0x45, 0x4e, 0x49, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xcc, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x45,
	0x4e, 0x49, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x61, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x7a,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x1a, 0xd1, 0x02, 0x0a, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x45,
	0x4e, 0x49, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x1a, 0xcf, 0x01, 0x0a, 0x20, 0x54, 0x72, 0x75,
	0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x09, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x45, 0x4e, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x45, 0x4e, 0x49, 0x52,
	0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x45, 0x4e, 0x49, 0x22, 0xa8, 0x01, 0x0a, 0x23, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5e, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x42, 0x21, 0x0a, 0x1f, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x82, 0x01, 0x0a, 0x24, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x45, 0x4e, 0x49, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x45, 0x4e, 0x49, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49,
	0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x67, 0x49, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x0a, 0x65, 0x64, 0x32, 0x35,
	0x35, 0x31, 0x39, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73,
	0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x2e, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x4b, 0x65,
	0x79, 0x1a, 0x2c, 0x0a, 0x0a, 0x45, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x4b, 0x65, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x66, 0x63, 0x38, 0x30, 0x33, 0x32, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x66, 0x63, 0x38, 0x30, 0x33, 0x32, 0x6b, 0x65, 0x79, 0x42,
	0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x9e, 0x10, 0x0a, 0x14, 0x54, 0x69, 0x74, 0x75, 0x73,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x50, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x88, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x13, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x56, 0x33, 0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78,
	0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x1a, 0x3b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x12, 0x6d, 0x0a, 0x08, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x50, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x0a, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x49, 0x50, 0x56, 0x33, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x1a, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x49, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x12,
	0x79, 0x0a, 0x0c, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x50, 0x56, 0x33, 0x12,
	0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63,
	0x2e, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x33, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c,
	0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x50,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x12, 0x7c, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x04, 0x47, 0x43, 0x56, 0x33,
	0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70,
	0x63, 0x2e, 0x47, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x1a, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x47,
	0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x33, 0x12, 0x6d, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65,
	0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x1a, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75,
	0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x4c,
	0x6f, 0x63, 0x6b, 0x12, 0x4c, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x59, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x6b,
	0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0xaf, 0x01, 0x0a,
	0x1e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63,
	0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
	0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xb8,
	0x01, 0x0a, 0x21, 0x44, 0x69, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c,
	0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x54, 0x72, 0x75, 0x6e,
	0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x1d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x44, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e,
	0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x70, 0x63, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x74,
	0x61, 0x63, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63,
	0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74,
	0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74, 0x69, 0x74, 0x75, 0x73, 0x2e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2e, 0x74,
	0x69, 0x74, 0x75, 0x73, 0x2e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x70,
	0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x78, 0x2f, 0x74, 0x69,
	0x74, 0x75, 0x73, 0x2d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x70, 0x63,
	0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vpc_proto_rawDescOnce sync.Once
	file_vpc_proto_rawDescData = file_vpc_proto_rawDesc
)

func file_vpc_proto_rawDescGZIP() []byte {
	file_vpc_proto_rawDescOnce.Do(func() {
		file_vpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_vpc_proto_rawDescData)
	})
	return file_vpc_proto_rawDescData
}

var file_vpc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vpc_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_vpc_proto_goTypes = []interface{}{
	(AssignIPResponseV3_Route_Family)(0),                    // 0: com.netflix.titus.executor.vpc.AssignIPResponseV3.Route.Family
	(*Address)(nil),                                         // 1: com.netflix.titus.executor.vpc.Address
	(*CacheVersion)(nil),                                    // 2: com.netflix.titus.executor.vpc.CacheVersion
	(*NetworkInterfaceAttachment)(nil),                      // 3: com.netflix.titus.executor.vpc.NetworkInterfaceAttachment
	(*NetworkInterface)(nil),                                // 4: com.netflix.titus.executor.vpc.NetworkInterface
	(*InstanceIdentity)(nil),                                // 5: com.netflix.titus.executor.vpc.InstanceIdentity
	(*ProvisionInstanceRequest)(nil),                        // 6: com.netflix.titus.executor.vpc.ProvisionInstanceRequest
	(*ProvisionInstanceResponse)(nil),                       // 7: com.netflix.titus.executor.vpc.ProvisionInstanceResponse
	(*ProvisionInstanceRequestV3)(nil),                      // 8: com.netflix.titus.executor.vpc.ProvisionInstanceRequestV3
	(*ProvisionInstanceResponseV3)(nil),                     // 9: com.netflix.titus.executor.vpc.ProvisionInstanceResponseV3
	(*UtilizedAddress)(nil),                                 // 10: com.netflix.titus.executor.vpc.UtilizedAddress
	(*AssignIPRequest)(nil),                                 // 11: com.netflix.titus.executor.vpc.AssignIPRequest
	(*AssignIPResponse)(nil),                                // 12: com.netflix.titus.executor.vpc.AssignIPResponse
	(*ElasticAddressSet)(nil),                               // 13: com.netflix.titus.executor.vpc.elasticAddressSet
	(*AssignIPRequestV3)(nil),                               // 14: com.netflix.titus.executor.vpc.AssignIPRequestV3
	(*ElasticAddress)(nil),                                  // 15: com.netflix.titus.executor.vpc.ElasticAddress
	(*AssignIPResponseV3)(nil),                              // 16: com.netflix.titus.executor.vpc.AssignIPResponseV3
	(*Error)(nil),                                           // 17: com.netflix.titus.executor.vpc.Error
	(*Assignment)(nil),                                      // 18: com.netflix.titus.executor.vpc.Assignment
	(*VPCToolResult)(nil),                                   // 19: com.netflix.titus.executor.vpc.VPCToolResult
	(*UnassignIPRequestV3)(nil),                             // 20: com.netflix.titus.executor.vpc.UnassignIPRequestV3
	(*UnassignIPResponseV3)(nil),                            // 21: com.netflix.titus.executor.vpc.UnassignIPResponseV3
	(*UsableAddress)(nil),                                   // 22: com.netflix.titus.executor.vpc.UsableAddress
	(*GCRequest)(nil),                                       // 23: com.netflix.titus.executor.vpc.GCRequest
	(*GCResponse)(nil),                                      // 24: com.netflix.titus.executor.vpc.GCResponse
	(*GCRequestV3)(nil),                                     // 25: com.netflix.titus.executor.vpc.GCRequestV3
	(*GCResponseV3)(nil),                                    // 26: com.netflix.titus.executor.vpc.GCResponseV3
	(*RefreshIPRequest)(nil),                                // 27: com.netflix.titus.executor.vpc.RefreshIPRequest
	(*RefreshIPResponse)(nil),                               // 28: com.netflix.titus.executor.vpc.RefreshIPResponse
	(*GCSetupRequest)(nil),                                  // 29: com.netflix.titus.executor.vpc.GCSetupRequest
	(*GCSetupResponse)(nil),                                 // 30: com.netflix.titus.executor.vpc.GCSetupResponse
	(*GCLegacySetupRequest)(nil),                            // 31: com.netflix.titus.executor.vpc.GCLegacySetupRequest
	(*GCLegacySetupResponse)(nil),                           // 32: com.netflix.titus.executor.vpc.GCLegacySetupResponse
	(*LockId)(nil),                                          // 33: com.netflix.titus.executor.vpc.LockId
	(*Lock)(nil),                                            // 34: com.netflix.titus.executor.vpc.Lock
	(*GetLocksRequest)(nil),                                 // 35: com.netflix.titus.executor.vpc.GetLocksRequest
	(*GetLocksResponse)(nil),                                // 36: com.netflix.titus.executor.vpc.GetLocksResponse
	(*PreemptLockRequest)(nil),                              // 37: com.netflix.titus.executor.vpc.PreemptLockRequest
	(*AssociateTrunkNetworkInterfaceRequest)(nil),           // 38: com.netflix.titus.executor.vpc.AssociateTrunkNetworkInterfaceRequest
	(*AssociateTrunkNetworkInterfaceResponse)(nil),          // 39: com.netflix.titus.executor.vpc.AssociateTrunkNetworkInterfaceResponse
	(*DisassociateTrunkNetworkInterfaceRequest)(nil),        // 40: com.netflix.titus.executor.vpc.DisassociateTrunkNetworkInterfaceRequest
	(*DisassociateTrunkNetworkInterfaceResponse)(nil),       // 41: com.netflix.titus.executor.vpc.DisassociateTrunkNetworkInterfaceResponse
	(*DescribeTrunkNetworkInterfaceRequest)(nil),            // 42: com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceRequest
	(*DescribeTrunkNetworkInterfaceResponse)(nil),           // 43: com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse
	(*DetachBranchNetworkInterfaceRequest)(nil),             // 44: com.netflix.titus.executor.vpc.DetachBranchNetworkInterfaceRequest
	(*DetachBranchNetworkInterfaceResponse)(nil),            // 45: com.netflix.titus.executor.vpc.DetachBranchNetworkInterfaceResponse
	(*GetAssignmentRequest)(nil),                            // 46: com.netflix.titus.executor.vpc.GetAssignmentRequest
	(*GetAssignmentResponse)(nil),                           // 47: com.netflix.titus.executor.vpc.GetAssignmentResponse
	(*SecurityGroupRequest)(nil),                            // 48: com.netflix.titus.executor.vpc.SecurityGroupRequest
	(*PrivateKey)(nil),                                      // 49: com.netflix.titus.executor.vpc.PrivateKey
	(*AssignIPResponseV3_Route)(nil),                        // 50: com.netflix.titus.executor.vpc.AssignIPResponseV3.Route
	(*AssignIPResponseV3_Bandwidth)(nil),                    // 51: com.netflix.titus.executor.vpc.AssignIPResponseV3.Bandwidth
	(*AssignIPResponseV3_TransitionAssignment)(nil),         // 52: com.netflix.titus.executor.vpc.AssignIPResponseV3.TransitionAssignment
	(*DescribeTrunkNetworkInterfaceResponse_TrunkENI)(nil),  // 53: com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse.TrunkENI
	(*DescribeTrunkNetworkInterfaceResponse_BranchENI)(nil), // 54: com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse.BranchENI
	(*DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation)(nil), // 55: com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse.TrunkNetworkInterfaceAssociation
	(*PrivateKey_Ed25519Key)(nil),         // 56: com.netflix.titus.executor.vpc.PrivateKey.Ed25519Key
	(*timestamppb.Timestamp)(nil),         // 57: google.protobuf.Timestamp
	(*titus.SignedAddressAllocation)(nil), // 58: com.netflix.titus.SignedAddressAllocation
	(*emptypb.Empty)(nil),                 // 59: google.protobuf.Empty
	(*durationpb.Duration)(nil),           // 60: google.protobuf.Duration
}
var file_vpc_proto_depIdxs = []int32{
	3,  // 0: com.netflix.titus.executor.vpc.NetworkInterface.networkInterfaceAttachment:type_name -> com.netflix.titus.executor.vpc.NetworkInterfaceAttachment
	5,  // 1: com.netflix.titus.executor.vpc.ProvisionInstanceRequest.instanceIdentity:type_name -> com.netflix.titus.executor.vpc.InstanceIdentity
	4,  // 2: com.netflix.titus.executor.vpc.ProvisionInstanceResponse.networkInterfaces:type_name -> com.netflix.titus.executor.vpc.NetworkInterface
	2,  // 3: com.netflix.titus.executor.vpc.ProvisionInstanceResponse.cacheVersion:type_name -> com.netflix.titus.executor.vpc.CacheVersion
	5,  // 4: com.netflix.titus.executor.vpc.ProvisionInstanceRequestV3.instanceIdentity:type_name -> com.netflix.titus.executor.vpc.InstanceIdentity
	4,  // 5: com.netflix.titus.executor.vpc.ProvisionInstanceResponseV3.trunkNetworkInterface:type_name -> com.netflix.titus.executor.vpc.NetworkInterface
	1,  // 6: com.netflix.titus.executor.vpc.UtilizedAddress.address:type_name -> com.netflix.titus.executor.vpc.Address
	57, // 7: com.netflix.titus.executor.vpc.UtilizedAddress.lastUsedTime:type_name -> google.protobuf.Timestamp
	2,  // 8: com.netflix.titus.executor.vpc.AssignIPRequest.cacheVersion:type_name -> com.netflix.titus.executor.vpc.CacheVersion
	3,  // 9: com.netflix.titus.executor.vpc.AssignIPRequest.networkInterfaceAttachment:type_name -> com.netflix.titus.executor.vpc.NetworkInterfaceAttachment
	10, // 10: com.netflix.titus.executor.vpc.AssignIPRequest.utilizedAddresses:type_name -> com.netflix.titus.executor.vpc.UtilizedAddress
	5,  // 11: com.netflix.titus.executor.vpc.AssignIPRequest.instanceIdentity:type_name -> com.netflix.titus.executor.vpc.InstanceIdentity
	58, // 12: com.netflix.titus.executor.vpc.AssignIPRequest.signedAddressAllocations:type_name -> com.netflix.titus.SignedAddressAllocation
	2,  // 13: com.netflix.titus.executor.vpc.AssignIPResponse.cacheVersion:type_name -> com.netflix.titus.executor.vpc.CacheVersion
	22, // 14: com.netflix.titus.executor.vpc.AssignIPResponse.usableAddresses:type_name -> com.netflix.titus.executor.vpc.UsableAddress
	4,  // 15: com.netflix.titus.executor.vpc.AssignIPResponse.networkInterface:type_name -> com.netflix.titus.executor.vpc.NetworkInterface
	59, // 16: com.netflix.titus.executor.vpc.AssignIPRequestV3.noIPv6AddressRequested:type_name -> google.protobuf.Empty
	58, // 17: com.netflix.titus.executor.vpc.AssignIPRequestV3.ipv4SignedAddressAllocation:type_name -> com.netflix.titus.SignedAddressAllocation
	59, // 18: com.netflix.titus.executor.vpc.AssignIPRequestV3.transitionRequested:type_name -> google.protobuf.Empty
	5,  // 19: com.netflix.titus.executor.vpc.AssignIPRequestV3.instanceIdentity:type_name -> com.netflix.titus.executor.vpc.InstanceIdentity
	59, // 20: com.netflix.titus.executor.vpc.AssignIPRequestV3.empty:type_name -> google.protobuf.Empty
	13, // 21: com.netflix.titus.executor.vpc.AssignIPRequestV3.elasticAdddresses:type_name -> com.netflix.titus.executor.vpc.elasticAddressSet
	22, // 22: com.netflix.titus.executor.vpc.AssignIPResponseV3.ipv4address:type_name -> com.netflix.titus.executor.vpc.UsableAddress
	22, // 23: com.netflix.titus.executor.vpc.AssignIPResponseV3.ipv6address:type_name -> com.netflix.titus.executor.vpc.UsableAddress
	4,  // 24: com.netflix.titus.executor.vpc.AssignIPResponseV3.branchNetworkInterface:type_name -> com.netflix.titus.executor.vpc.NetworkInterface
	4,  // 25: com.netflix.titus.executor.vpc.AssignIPResponseV3.trunkNetworkInterface:type_name -> com.netflix.titus.executor.vpc.NetworkInterface
	15, // 26: com.netflix.titus.executor.vpc.AssignIPResponseV3.elasticAddress:type_name -> com.netflix.titus.executor.vpc.ElasticAddress
	50, // 27: com.netflix.titus.executor.vpc.AssignIPResponseV3.routes:type_name -> com.netflix.titus.executor.vpc.AssignIPResponseV3.Route
	51, // 28: com.netflix.titus.executor.vpc.AssignIPResponseV3.bandwidth:type_name -> com.netflix.titus.executor.vpc.AssignIPResponseV3.Bandwidth
	52, // 29: com.netflix.titus.executor.vpc.AssignIPResponseV3.transitionAssignment:type_name -> com.netflix.titus.executor.vpc.AssignIPResponseV3.TransitionAssignment
	16, // 30: com.netflix.titus.executor.vpc.Assignment.assignIPResponseV3:type_name -> com.netflix.titus.executor.vpc.AssignIPResponseV3
	18, // 31: com.netflix.titus.executor.vpc.VPCToolResult.assignment:type_name -> com.netflix.titus.executor.vpc.Assignment
	17, // 32: com.netflix.titus.executor.vpc.VPCToolResult.error:type_name -> com.netflix.titus.executor.vpc.Error
	1,  // 33: com.netflix.titus.executor.vpc.UsableAddress.address:type_name -> com.netflix.titus.executor.vpc.Address
	2,  // 34: com.netflix.titus.executor.vpc.GCRequest.cacheVersion:type_name -> com.netflix.titus.executor.vpc.CacheVersion
	5,  // 35: com.netflix.titus.executor.vpc.GCRequest.instanceIdentity:type_name -> com.netflix.titus.executor.vpc.InstanceIdentity
	3,  // 36: com.netflix.titus.executor.vpc.GCRequest.networkInterfaceAttachment:type_name -> com.netflix.titus.executor.vpc.NetworkInterfaceAttachment
	10, // 37: com.netflix.titus.executor.vpc.GCRequest.unallocatedAddresses:type_name -> com.netflix.titus.executor.vpc.UtilizedAddress
	10, // 38: com.netflix.titus.executor.vpc.GCRequest.nonviableAddresses:type_name -> com.netflix.titus.executor.vpc.UtilizedAddress
	10, // 39: com.netflix.titus.executor.vpc.GCRequest.allocatedAddresses:type_name -> com.netflix.titus.executor.vpc.UtilizedAddress
	2,  // 40: com.netflix.titus.executor.vpc.GCResponse.cacheVersion:type_name -> com.netflix.titus.executor.vpc.CacheVersion
	1,  // 41: com.netflix.titus.executor.vpc.GCResponse.addressToBump:type_name -> com.netflix.titus.executor.vpc.Address
	1,  // 42: com.netflix.titus.executor.vpc.GCResponse.addressToDelete:type_name -> com.netflix.titus.executor.vpc.Address
	5,  // 43: com.netflix.titus.executor.vpc.GCRequestV3.instanceIdentity:type_name -> com.netflix.titus.executor.vpc.InstanceIdentity
	10, // 44: com.netflix.titus.executor.vpc.RefreshIPRequest.utilizedAddress:type_name -> com.netflix.titus.executor.vpc.UtilizedAddress
	4,  // 45: com.netflix.titus.executor.vpc.RefreshIPRequest.branchNetworkInterface:type_name -> com.netflix.titus.executor.vpc.NetworkInterface
	60, // 46: com.netflix.titus.executor.vpc.RefreshIPResponse.nextRefresh:type_name -> google.protobuf.Duration
	5,  // 47: com.netflix.titus.executor.vpc.GCSetupRequest.instanceIdentity:type_name -> com.netflix.titus.executor.vpc.InstanceIdentity
	3,  // 48: com.netflix.titus.executor.vpc.GCSetupResponse.networkInterfaceAttachment:type_name -> com.netflix.titus.executor.vpc.NetworkInterfaceAttachment
	5,  // 49: com.netflix.titus.executor.vpc.GCLegacySetupRequest.instanceIdentity:type_name -> com.netflix.titus.executor.vpc.InstanceIdentity
	3,  // 50: com.netflix.titus.executor.vpc.GCLegacySetupResponse.networkInterfaceAttachment:type_name -> com.netflix.titus.executor.vpc.NetworkInterfaceAttachment
	57, // 51: com.netflix.titus.executor.vpc.Lock.heldUntil:type_name -> google.protobuf.Timestamp
	34, // 52: com.netflix.titus.executor.vpc.GetLocksResponse.locks:type_name -> com.netflix.titus.executor.vpc.Lock
	5,  // 53: com.netflix.titus.executor.vpc.AssociateTrunkNetworkInterfaceRequest.instanceIdentity:type_name -> com.netflix.titus.executor.vpc.InstanceIdentity
	5,  // 54: com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceRequest.instanceIdentity:type_name -> com.netflix.titus.executor.vpc.InstanceIdentity
	53, // 55: com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse.trunkENI:type_name -> com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse.TrunkENI
	55, // 56: com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse.associations:type_name -> com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse.TrunkNetworkInterfaceAssociation
	5,  // 57: com.netflix.titus.executor.vpc.DetachBranchNetworkInterfaceRequest.instanceIdentity:type_name -> com.netflix.titus.executor.vpc.InstanceIdentity
	16, // 58: com.netflix.titus.executor.vpc.GetAssignmentResponse.assignment:type_name -> com.netflix.titus.executor.vpc.AssignIPResponseV3
	57, // 59: com.netflix.titus.executor.vpc.PrivateKey.generated:type_name -> google.protobuf.Timestamp
	56, // 60: com.netflix.titus.executor.vpc.PrivateKey.ed25519Key:type_name -> com.netflix.titus.executor.vpc.PrivateKey.Ed25519Key
	0,  // 61: com.netflix.titus.executor.vpc.AssignIPResponseV3.Route.family:type_name -> com.netflix.titus.executor.vpc.AssignIPResponseV3.Route.Family
	50, // 62: com.netflix.titus.executor.vpc.AssignIPResponseV3.TransitionAssignment.routes:type_name -> com.netflix.titus.executor.vpc.AssignIPResponseV3.Route
	22, // 63: com.netflix.titus.executor.vpc.AssignIPResponseV3.TransitionAssignment.ipv4address:type_name -> com.netflix.titus.executor.vpc.UsableAddress
	57, // 64: com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse.TrunkENI.createdAt:type_name -> google.protobuf.Timestamp
	57, // 65: com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse.BranchENI.createdAt:type_name -> google.protobuf.Timestamp
	57, // 66: com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse.BranchENI.modifiedAt:type_name -> google.protobuf.Timestamp
	57, // 67: com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse.BranchENI.lastAssignedTo:type_name -> google.protobuf.Timestamp
	54, // 68: com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse.TrunkNetworkInterfaceAssociation.branchENI:type_name -> com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse.BranchENI
	6,  // 69: com.netflix.titus.executor.vpc.TitusAgentVPCService.ProvisionInstance:input_type -> com.netflix.titus.executor.vpc.ProvisionInstanceRequest
	8,  // 70: com.netflix.titus.executor.vpc.TitusAgentVPCService.ProvisionInstanceV3:input_type -> com.netflix.titus.executor.vpc.ProvisionInstanceRequestV3
	11, // 71: com.netflix.titus.executor.vpc.TitusAgentVPCService.AssignIP:input_type -> com.netflix.titus.executor.vpc.AssignIPRequest
	14, // 72: com.netflix.titus.executor.vpc.TitusAgentVPCService.AssignIPV3:input_type -> com.netflix.titus.executor.vpc.AssignIPRequestV3
	20, // 73: com.netflix.titus.executor.vpc.TitusAgentVPCService.UnassignIPV3:input_type -> com.netflix.titus.executor.vpc.UnassignIPRequestV3
	46, // 74: com.netflix.titus.executor.vpc.TitusAgentVPCService.GetAssignment:input_type -> com.netflix.titus.executor.vpc.GetAssignmentRequest
	25, // 75: com.netflix.titus.executor.vpc.TitusAgentVPCService.GCV3:input_type -> com.netflix.titus.executor.vpc.GCRequestV3
	35, // 76: com.netflix.titus.executor.vpc.TitusAgentVPCService.GetLocks:input_type -> com.netflix.titus.executor.vpc.GetLocksRequest
	33, // 77: com.netflix.titus.executor.vpc.TitusAgentVPCService.GetLock:input_type -> com.netflix.titus.executor.vpc.LockId
	33, // 78: com.netflix.titus.executor.vpc.TitusAgentVPCService.DeleteLock:input_type -> com.netflix.titus.executor.vpc.LockId
	37, // 79: com.netflix.titus.executor.vpc.TitusAgentVPCService.PreemptLock:input_type -> com.netflix.titus.executor.vpc.PreemptLockRequest
	38, // 80: com.netflix.titus.executor.vpc.TitusAgentVPCService.AssociateTrunkNetworkInterface:input_type -> com.netflix.titus.executor.vpc.AssociateTrunkNetworkInterfaceRequest
	40, // 81: com.netflix.titus.executor.vpc.TitusAgentVPCService.DisassociateTrunkNetworkInterface:input_type -> com.netflix.titus.executor.vpc.DisassociateTrunkNetworkInterfaceRequest
	42, // 82: com.netflix.titus.executor.vpc.TitusAgentVPCService.DescribeTrunkNetworkInterface:input_type -> com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceRequest
	44, // 83: com.netflix.titus.executor.vpc.TitusAgentVPCService.DetachBranchNetworkInterface:input_type -> com.netflix.titus.executor.vpc.DetachBranchNetworkInterfaceRequest
	48, // 84: com.netflix.titus.executor.vpc.TitusAgentVPCService.ResetSecurityGroup:input_type -> com.netflix.titus.executor.vpc.SecurityGroupRequest
	7,  // 85: com.netflix.titus.executor.vpc.TitusAgentVPCService.ProvisionInstance:output_type -> com.netflix.titus.executor.vpc.ProvisionInstanceResponse
	9,  // 86: com.netflix.titus.executor.vpc.TitusAgentVPCService.ProvisionInstanceV3:output_type -> com.netflix.titus.executor.vpc.ProvisionInstanceResponseV3
	12, // 87: com.netflix.titus.executor.vpc.TitusAgentVPCService.AssignIP:output_type -> com.netflix.titus.executor.vpc.AssignIPResponse
	16, // 88: com.netflix.titus.executor.vpc.TitusAgentVPCService.AssignIPV3:output_type -> com.netflix.titus.executor.vpc.AssignIPResponseV3
	21, // 89: com.netflix.titus.executor.vpc.TitusAgentVPCService.UnassignIPV3:output_type -> com.netflix.titus.executor.vpc.UnassignIPResponseV3
	47, // 90: com.netflix.titus.executor.vpc.TitusAgentVPCService.GetAssignment:output_type -> com.netflix.titus.executor.vpc.GetAssignmentResponse
	26, // 91: com.netflix.titus.executor.vpc.TitusAgentVPCService.GCV3:output_type -> com.netflix.titus.executor.vpc.GCResponseV3
	36, // 92: com.netflix.titus.executor.vpc.TitusAgentVPCService.GetLocks:output_type -> com.netflix.titus.executor.vpc.GetLocksResponse
	34, // 93: com.netflix.titus.executor.vpc.TitusAgentVPCService.GetLock:output_type -> com.netflix.titus.executor.vpc.Lock
	59, // 94: com.netflix.titus.executor.vpc.TitusAgentVPCService.DeleteLock:output_type -> google.protobuf.Empty
	59, // 95: com.netflix.titus.executor.vpc.TitusAgentVPCService.PreemptLock:output_type -> google.protobuf.Empty
	39, // 96: com.netflix.titus.executor.vpc.TitusAgentVPCService.AssociateTrunkNetworkInterface:output_type -> com.netflix.titus.executor.vpc.AssociateTrunkNetworkInterfaceResponse
	41, // 97: com.netflix.titus.executor.vpc.TitusAgentVPCService.DisassociateTrunkNetworkInterface:output_type -> com.netflix.titus.executor.vpc.DisassociateTrunkNetworkInterfaceResponse
	43, // 98: com.netflix.titus.executor.vpc.TitusAgentVPCService.DescribeTrunkNetworkInterface:output_type -> com.netflix.titus.executor.vpc.DescribeTrunkNetworkInterfaceResponse
	45, // 99: com.netflix.titus.executor.vpc.TitusAgentVPCService.DetachBranchNetworkInterface:output_type -> com.netflix.titus.executor.vpc.DetachBranchNetworkInterfaceResponse
	17, // 100: com.netflix.titus.executor.vpc.TitusAgentVPCService.ResetSecurityGroup:output_type -> com.netflix.titus.executor.vpc.Error
	85, // [85:101] is the sub-list for method output_type
	69, // [69:85] is the sub-list for method input_type
	69, // [69:69] is the sub-list for extension type_name
	69, // [69:69] is the sub-list for extension extendee
	0,  // [0:69] is the sub-list for field type_name
}

func init() { file_vpc_proto_init() }
func file_vpc_proto_init() {
	if File_vpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterfaceAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionInstanceRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionInstanceResponseV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtilizedAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticAddressSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignIPRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignIPResponseV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPCToolResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnassignIPRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnassignIPResponseV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsableAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCResponseV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshIPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshIPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCSetupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCSetupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCLegacySetupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCLegacySetupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreemptLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociateTrunkNetworkInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociateTrunkNetworkInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisassociateTrunkNetworkInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisassociateTrunkNetworkInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTrunkNetworkInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTrunkNetworkInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetachBranchNetworkInterfaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetachBranchNetworkInterfaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssignmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssignmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignIPResponseV3_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignIPResponseV3_Bandwidth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignIPResponseV3_TransitionAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTrunkNetworkInterfaceResponse_TrunkENI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTrunkNetworkInterfaceResponse_BranchENI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeTrunkNetworkInterfaceResponse_TrunkNetworkInterfaceAssociation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateKey_Ed25519Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vpc_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*AssignIPRequestV3_Ipv6AddressRequested)(nil),
		(*AssignIPRequestV3_NoIPv6AddressRequested)(nil),
		(*AssignIPRequestV3_Ipv4AddressRequested)(nil),
		(*AssignIPRequestV3_Ipv4SignedAddressAllocation)(nil),
		(*AssignIPRequestV3_TransitionRequested)(nil),
		(*AssignIPRequestV3_Empty)(nil),
		(*AssignIPRequestV3_ElasticAdddresses)(nil),
		(*AssignIPRequestV3_GroupName)(nil),
	}
	file_vpc_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Assignment_AssignIPResponseV3)(nil),
	}
	file_vpc_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*VPCToolResult_Assignment)(nil),
		(*VPCToolResult_Error)(nil),
	}
	file_vpc_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*AssociateTrunkNetworkInterfaceRequest_InstanceIdentity)(nil),
		(*AssociateTrunkNetworkInterfaceRequest_TrunkENI)(nil),
	}
	file_vpc_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*DisassociateTrunkNetworkInterfaceRequest_AssociationId)(nil),
	}
	file_vpc_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*DescribeTrunkNetworkInterfaceRequest_InstanceIdentity)(nil),
		(*DescribeTrunkNetworkInterfaceRequest_TrunkENI)(nil),
	}
	file_vpc_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*DetachBranchNetworkInterfaceRequest_InstanceIdentity)(nil),
	}
	file_vpc_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*PrivateKey_Ed25519Key_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vpc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vpc_proto_goTypes,
		DependencyIndexes: file_vpc_proto_depIdxs,
		EnumInfos:         file_vpc_proto_enumTypes,
		MessageInfos:      file_vpc_proto_msgTypes,
	}.Build()
	File_vpc_proto = out.File
	file_vpc_proto_rawDesc = nil
	file_vpc_proto_goTypes = nil
	file_vpc_proto_depIdxs = nil
}

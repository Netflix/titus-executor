// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TitusAgentVPCServiceClient is the client API for TitusAgentVPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TitusAgentVPCServiceClient interface {
	// This ProvisionInstance function has to be called at startup of the instance, and it is idempotent.
	ProvisionInstance(ctx context.Context, in *ProvisionInstanceRequest, opts ...grpc.CallOption) (*ProvisionInstanceResponse, error)
	ProvisionInstanceV3(ctx context.Context, in *ProvisionInstanceRequestV3, opts ...grpc.CallOption) (*ProvisionInstanceResponseV3, error)
	AssignIP(ctx context.Context, in *AssignIPRequest, opts ...grpc.CallOption) (*AssignIPResponse, error)
	AssignIPV3(ctx context.Context, in *AssignIPRequestV3, opts ...grpc.CallOption) (*AssignIPResponseV3, error)
	UnassignIPV3(ctx context.Context, in *UnassignIPRequestV3, opts ...grpc.CallOption) (*UnassignIPResponseV3, error)
	GetAssignment(ctx context.Context, in *GetAssignmentRequest, opts ...grpc.CallOption) (*GetAssignmentResponse, error)
	GCV3(ctx context.Context, in *GCRequestV3, opts ...grpc.CallOption) (*GCResponseV3, error)
	// Lock Management
	GetLocks(ctx context.Context, in *GetLocksRequest, opts ...grpc.CallOption) (*GetLocksResponse, error)
	GetLock(ctx context.Context, in *LockId, opts ...grpc.CallOption) (*Lock, error)
	DeleteLock(ctx context.Context, in *LockId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PreemptLock(ctx context.Context, in *PreemptLockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// These are internal APIs that should really only be used by operators
	AssociateTrunkNetworkInterface(ctx context.Context, in *AssociateTrunkNetworkInterfaceRequest, opts ...grpc.CallOption) (*AssociateTrunkNetworkInterfaceResponse, error)
	DisassociateTrunkNetworkInterface(ctx context.Context, in *DisassociateTrunkNetworkInterfaceRequest, opts ...grpc.CallOption) (*DisassociateTrunkNetworkInterfaceResponse, error)
	DescribeTrunkNetworkInterface(ctx context.Context, in *DescribeTrunkNetworkInterfaceRequest, opts ...grpc.CallOption) (*DescribeTrunkNetworkInterfaceResponse, error)
	DetachBranchNetworkInterface(ctx context.Context, in *DetachBranchNetworkInterfaceRequest, opts ...grpc.CallOption) (*DetachBranchNetworkInterfaceResponse, error)
}

type titusAgentVPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTitusAgentVPCServiceClient(cc grpc.ClientConnInterface) TitusAgentVPCServiceClient {
	return &titusAgentVPCServiceClient{cc}
}

func (c *titusAgentVPCServiceClient) ProvisionInstance(ctx context.Context, in *ProvisionInstanceRequest, opts ...grpc.CallOption) (*ProvisionInstanceResponse, error) {
	out := new(ProvisionInstanceResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/ProvisionInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) ProvisionInstanceV3(ctx context.Context, in *ProvisionInstanceRequestV3, opts ...grpc.CallOption) (*ProvisionInstanceResponseV3, error) {
	out := new(ProvisionInstanceResponseV3)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/ProvisionInstanceV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) AssignIP(ctx context.Context, in *AssignIPRequest, opts ...grpc.CallOption) (*AssignIPResponse, error) {
	out := new(AssignIPResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/AssignIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) AssignIPV3(ctx context.Context, in *AssignIPRequestV3, opts ...grpc.CallOption) (*AssignIPResponseV3, error) {
	out := new(AssignIPResponseV3)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/AssignIPV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) UnassignIPV3(ctx context.Context, in *UnassignIPRequestV3, opts ...grpc.CallOption) (*UnassignIPResponseV3, error) {
	out := new(UnassignIPResponseV3)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/UnassignIPV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) GetAssignment(ctx context.Context, in *GetAssignmentRequest, opts ...grpc.CallOption) (*GetAssignmentResponse, error) {
	out := new(GetAssignmentResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/GetAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) GCV3(ctx context.Context, in *GCRequestV3, opts ...grpc.CallOption) (*GCResponseV3, error) {
	out := new(GCResponseV3)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/GCV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) GetLocks(ctx context.Context, in *GetLocksRequest, opts ...grpc.CallOption) (*GetLocksResponse, error) {
	out := new(GetLocksResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/GetLocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) GetLock(ctx context.Context, in *LockId, opts ...grpc.CallOption) (*Lock, error) {
	out := new(Lock)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/GetLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) DeleteLock(ctx context.Context, in *LockId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/DeleteLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) PreemptLock(ctx context.Context, in *PreemptLockRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/PreemptLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) AssociateTrunkNetworkInterface(ctx context.Context, in *AssociateTrunkNetworkInterfaceRequest, opts ...grpc.CallOption) (*AssociateTrunkNetworkInterfaceResponse, error) {
	out := new(AssociateTrunkNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/AssociateTrunkNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) DisassociateTrunkNetworkInterface(ctx context.Context, in *DisassociateTrunkNetworkInterfaceRequest, opts ...grpc.CallOption) (*DisassociateTrunkNetworkInterfaceResponse, error) {
	out := new(DisassociateTrunkNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/DisassociateTrunkNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) DescribeTrunkNetworkInterface(ctx context.Context, in *DescribeTrunkNetworkInterfaceRequest, opts ...grpc.CallOption) (*DescribeTrunkNetworkInterfaceResponse, error) {
	out := new(DescribeTrunkNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/DescribeTrunkNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titusAgentVPCServiceClient) DetachBranchNetworkInterface(ctx context.Context, in *DetachBranchNetworkInterfaceRequest, opts ...grpc.CallOption) (*DetachBranchNetworkInterfaceResponse, error) {
	out := new(DetachBranchNetworkInterfaceResponse)
	err := c.cc.Invoke(ctx, "/com.netflix.titus.executor.vpc.TitusAgentVPCService/DetachBranchNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TitusAgentVPCServiceServer is the server API for TitusAgentVPCService service.
// All implementations must embed UnimplementedTitusAgentVPCServiceServer
// for forward compatibility
type TitusAgentVPCServiceServer interface {
	// This ProvisionInstance function has to be called at startup of the instance, and it is idempotent.
	ProvisionInstance(context.Context, *ProvisionInstanceRequest) (*ProvisionInstanceResponse, error)
	ProvisionInstanceV3(context.Context, *ProvisionInstanceRequestV3) (*ProvisionInstanceResponseV3, error)
	AssignIP(context.Context, *AssignIPRequest) (*AssignIPResponse, error)
	AssignIPV3(context.Context, *AssignIPRequestV3) (*AssignIPResponseV3, error)
	UnassignIPV3(context.Context, *UnassignIPRequestV3) (*UnassignIPResponseV3, error)
	GetAssignment(context.Context, *GetAssignmentRequest) (*GetAssignmentResponse, error)
	GCV3(context.Context, *GCRequestV3) (*GCResponseV3, error)
	// Lock Management
	GetLocks(context.Context, *GetLocksRequest) (*GetLocksResponse, error)
	GetLock(context.Context, *LockId) (*Lock, error)
	DeleteLock(context.Context, *LockId) (*emptypb.Empty, error)
	PreemptLock(context.Context, *PreemptLockRequest) (*emptypb.Empty, error)
	// These are internal APIs that should really only be used by operators
	AssociateTrunkNetworkInterface(context.Context, *AssociateTrunkNetworkInterfaceRequest) (*AssociateTrunkNetworkInterfaceResponse, error)
	DisassociateTrunkNetworkInterface(context.Context, *DisassociateTrunkNetworkInterfaceRequest) (*DisassociateTrunkNetworkInterfaceResponse, error)
	DescribeTrunkNetworkInterface(context.Context, *DescribeTrunkNetworkInterfaceRequest) (*DescribeTrunkNetworkInterfaceResponse, error)
	DetachBranchNetworkInterface(context.Context, *DetachBranchNetworkInterfaceRequest) (*DetachBranchNetworkInterfaceResponse, error)
	mustEmbedUnimplementedTitusAgentVPCServiceServer()
}

// UnimplementedTitusAgentVPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTitusAgentVPCServiceServer struct {
}

func (UnimplementedTitusAgentVPCServiceServer) ProvisionInstance(context.Context, *ProvisionInstanceRequest) (*ProvisionInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionInstance not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) ProvisionInstanceV3(context.Context, *ProvisionInstanceRequestV3) (*ProvisionInstanceResponseV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionInstanceV3 not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) AssignIP(context.Context, *AssignIPRequest) (*AssignIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignIP not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) AssignIPV3(context.Context, *AssignIPRequestV3) (*AssignIPResponseV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignIPV3 not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) UnassignIPV3(context.Context, *UnassignIPRequestV3) (*UnassignIPResponseV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignIPV3 not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) GetAssignment(context.Context, *GetAssignmentRequest) (*GetAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignment not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) GCV3(context.Context, *GCRequestV3) (*GCResponseV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GCV3 not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) GetLocks(context.Context, *GetLocksRequest) (*GetLocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocks not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) GetLock(context.Context, *LockId) (*Lock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLock not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) DeleteLock(context.Context, *LockId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLock not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) PreemptLock(context.Context, *PreemptLockRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreemptLock not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) AssociateTrunkNetworkInterface(context.Context, *AssociateTrunkNetworkInterfaceRequest) (*AssociateTrunkNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssociateTrunkNetworkInterface not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) DisassociateTrunkNetworkInterface(context.Context, *DisassociateTrunkNetworkInterfaceRequest) (*DisassociateTrunkNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisassociateTrunkNetworkInterface not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) DescribeTrunkNetworkInterface(context.Context, *DescribeTrunkNetworkInterfaceRequest) (*DescribeTrunkNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTrunkNetworkInterface not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) DetachBranchNetworkInterface(context.Context, *DetachBranchNetworkInterfaceRequest) (*DetachBranchNetworkInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachBranchNetworkInterface not implemented")
}
func (UnimplementedTitusAgentVPCServiceServer) mustEmbedUnimplementedTitusAgentVPCServiceServer() {}

// UnsafeTitusAgentVPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TitusAgentVPCServiceServer will
// result in compilation errors.
type UnsafeTitusAgentVPCServiceServer interface {
	mustEmbedUnimplementedTitusAgentVPCServiceServer()
}

func RegisterTitusAgentVPCServiceServer(s grpc.ServiceRegistrar, srv TitusAgentVPCServiceServer) {
	s.RegisterService(&TitusAgentVPCService_ServiceDesc, srv)
}

func _TitusAgentVPCService_ProvisionInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).ProvisionInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/ProvisionInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).ProvisionInstance(ctx, req.(*ProvisionInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_ProvisionInstanceV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionInstanceRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).ProvisionInstanceV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/ProvisionInstanceV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).ProvisionInstanceV3(ctx, req.(*ProvisionInstanceRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_AssignIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).AssignIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/AssignIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).AssignIP(ctx, req.(*AssignIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_AssignIPV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignIPRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).AssignIPV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/AssignIPV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).AssignIPV3(ctx, req.(*AssignIPRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_UnassignIPV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignIPRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).UnassignIPV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/UnassignIPV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).UnassignIPV3(ctx, req.(*UnassignIPRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_GetAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).GetAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/GetAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).GetAssignment(ctx, req.(*GetAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_GCV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GCRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).GCV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/GCV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).GCV3(ctx, req.(*GCRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_GetLocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).GetLocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/GetLocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).GetLocks(ctx, req.(*GetLocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_GetLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).GetLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/GetLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).GetLock(ctx, req.(*LockId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_DeleteLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).DeleteLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/DeleteLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).DeleteLock(ctx, req.(*LockId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_PreemptLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreemptLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).PreemptLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/PreemptLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).PreemptLock(ctx, req.(*PreemptLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_AssociateTrunkNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociateTrunkNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).AssociateTrunkNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/AssociateTrunkNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).AssociateTrunkNetworkInterface(ctx, req.(*AssociateTrunkNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_DisassociateTrunkNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisassociateTrunkNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).DisassociateTrunkNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/DisassociateTrunkNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).DisassociateTrunkNetworkInterface(ctx, req.(*DisassociateTrunkNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_DescribeTrunkNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTrunkNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).DescribeTrunkNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/DescribeTrunkNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).DescribeTrunkNetworkInterface(ctx, req.(*DescribeTrunkNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitusAgentVPCService_DetachBranchNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachBranchNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitusAgentVPCServiceServer).DetachBranchNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.netflix.titus.executor.vpc.TitusAgentVPCService/DetachBranchNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitusAgentVPCServiceServer).DetachBranchNetworkInterface(ctx, req.(*DetachBranchNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TitusAgentVPCService_ServiceDesc is the grpc.ServiceDesc for TitusAgentVPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TitusAgentVPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.netflix.titus.executor.vpc.TitusAgentVPCService",
	HandlerType: (*TitusAgentVPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProvisionInstance",
			Handler:    _TitusAgentVPCService_ProvisionInstance_Handler,
		},
		{
			MethodName: "ProvisionInstanceV3",
			Handler:    _TitusAgentVPCService_ProvisionInstanceV3_Handler,
		},
		{
			MethodName: "AssignIP",
			Handler:    _TitusAgentVPCService_AssignIP_Handler,
		},
		{
			MethodName: "AssignIPV3",
			Handler:    _TitusAgentVPCService_AssignIPV3_Handler,
		},
		{
			MethodName: "UnassignIPV3",
			Handler:    _TitusAgentVPCService_UnassignIPV3_Handler,
		},
		{
			MethodName: "GetAssignment",
			Handler:    _TitusAgentVPCService_GetAssignment_Handler,
		},
		{
			MethodName: "GCV3",
			Handler:    _TitusAgentVPCService_GCV3_Handler,
		},
		{
			MethodName: "GetLocks",
			Handler:    _TitusAgentVPCService_GetLocks_Handler,
		},
		{
			MethodName: "GetLock",
			Handler:    _TitusAgentVPCService_GetLock_Handler,
		},
		{
			MethodName: "DeleteLock",
			Handler:    _TitusAgentVPCService_DeleteLock_Handler,
		},
		{
			MethodName: "PreemptLock",
			Handler:    _TitusAgentVPCService_PreemptLock_Handler,
		},
		{
			MethodName: "AssociateTrunkNetworkInterface",
			Handler:    _TitusAgentVPCService_AssociateTrunkNetworkInterface_Handler,
		},
		{
			MethodName: "DisassociateTrunkNetworkInterface",
			Handler:    _TitusAgentVPCService_DisassociateTrunkNetworkInterface_Handler,
		},
		{
			MethodName: "DescribeTrunkNetworkInterface",
			Handler:    _TitusAgentVPCService_DescribeTrunkNetworkInterface_Handler,
		},
		{
			MethodName: "DetachBranchNetworkInterface",
			Handler:    _TitusAgentVPCService_DetachBranchNetworkInterface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vpc.proto",
}
